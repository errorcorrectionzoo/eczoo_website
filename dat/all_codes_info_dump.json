{"oaecc": {"short_name": "Operator-algebra QECC", "logical": null, "introduced": "[quant-ph/0203105,0705.1574]", "description": "Stub.", "name": "Operator-algebra error-correcting code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "oaecc"}, "eacq": {"short_name": "EACQ", "logical": null, "introduced": "[0802.2414,1911.12260,2202.02184]", "description": "Stub.", "name": "Entanglement-assisted hybrid classical-quantum (EACQ) code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "eacq"}, "ecc": {"short_name": "ECC", "name": "Error-correcting code (ECC)", "protection": "A code corrects errors associated with a noise channel if it is possible to recover any codeword after its coordinates have been changed after going through the channel. More technically, an error-correcting code \\((u,\\mathcal{E})\\) is an encoder function \\(u:[1\\cdots K]\\to[1\\cdots N]\\) with a set of correctable errors \\(E:[1\\cdots N]\\to [1\\cdots M]\\) with the following property: there exists a decoder function \\(d:[1\\cdots M]\\to [1\\cdots K]\\) such that for all \\(E\\in\\cal{E}\\) and states \\(x\\in[1\\cdots K]\\), \\(d(E(e(x)))=x\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "ecc", "logical": null, "introduced": "", "description": "A code is a subset of a set or alphabet, with each element called a codeword. An error-correcting code consists of \\(K\\) codewords over an alphabet with \\(N\\) elements such that it is possible to recover the codewords from errors \\(E\\) from some error set \\(\\mathcal{E}\\).", "notes": ["The modern theory of error-correcting codes is rooted in the foundational work of C. Shannon [10.1002/j.1538-7305.1948.tb01338.x], but error-correcting codes have been used prior to that work [10.1007/bf03025254]."]}, "regenerating": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "name": "Regenerating code (RGC)", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "matrices", "notes": [], "realizations": [], "code_id": "regenerating"}, "alamouti": {"short_name": "", "name": "Alamouti code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "The only OSTBC with unity rate.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "matrices", "realizations": [], "code_id": "alamouti", "logical": "points", "introduced": "[10.1109/49.730453]", "description": "The simplest OSTBC, with two time slots, two channels, and with unitary coding matrix\n\\begin{align}\n  \\begin{pmatrix}c_{1} & c_{2}\\\\\n  -c_{2}^{\\star} & c_{1}^{\\star}\n  \\end{pmatrix}~,\n\\end{align}\nwhere \\(c_i\\) are complex numbers.\n", "notes": []}, "matrices_into_matrices": {"short_name": "", "logical": null, "introduced": "", "description": "Encodes \\(K\\) states (codewords) in an \\(m\\times n\\)-dimensional matrix of coordinates over a field (e.g., the Galois field \\(GF(q)\\) or the complex numbers \\(\\mathbb{C}\\)).", "name": "Matrix code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "matrices", "notes": [], "realizations": [], "code_id": "matrices_into_matrices"}, "spacetime": {"short_name": "STC", "name": "Spacetime code (STC)", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "matrices", "realizations": [], "code_id": "spacetime", "logical": "points", "introduced": "[10.1109/18.661517]", "description": "Code designed for wireless transmission of information (via, e.g., radio waves) such that the sender can send multiple times from multiple locations. A spacetime code uses a modulation scheme to encode a message into signals that are sent at different times through different antennas, thereby utilizing both spatial and temporal (i.e., spacetime) degrees of freedom.\n", "notes": ["See the chapter [10.1016/B978-0-12-385055-3.00002-X] or the Ch. 28 of Ref. [10.1201/9781315147901] for an introduction to spacetime coding."]}, "spacetime_block": {"short_name": "STBC", "name": "Spacetime block code (STBC)", "protection": "Provides protection against errors due to thermal noise and destructive interference arising from traversing an environment with scattering, reflection, and/or refraction.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "matrices", "realizations": ["High data-rate wireless communication, e.g., WiMAX (IEEE 802.16m) [10.1007/s11235-013-9846-3,10.1109/JSTSP.2008.922508]."], "code_id": "spacetime_block", "logical": "points", "introduced": "[10.1109/49.730453]", "description": "In a space-time block code, \\(n\\) spatially separated channels transmit symbols in \\(T\\) time slots. These symbols can be arranged in a \\(T\\times n\\) matrix where the columns correspond to the channels, and the rows correspond to the time slots. The codewords \\(\\{X\\}\\) are \\(T\\times n\\) matrices such that the codeword difference matrices have rank \\(n\\), and \\(\\min_{X\\neq 0}\\det(XX^*)\\) is maximized.", "notes": []}, "mbr": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "name": "Minimum-bandwidth regenerating (MBR) code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "matrices", "notes": [], "realizations": [], "code_id": "mbr"}, "orth_spacetime_block": {"short_name": "OSTBC", "name": "Orthogonal Spacetime Block Code (OSTBC)", "protection": "If the matrix \\(C-C'\\), where \\(C\\) and \\(C'\\) are distinct codewords, has minimum rank \\(b\\), the code has diversity order \\(bn_R\\) (see Ref. [10.1201/9781315147901], Sec. 28.2.1), where \\(n_R\\) is the number of receivers. The maximum possible diversity order is \\(nn_R\\).", "features": {"transversal_gates": "", "decoders": ["Maximum-likelihood decoding can be achieved with only linear processing [10.1109/49.753730]."], "rate": "The greatest rate which can be achieved is \\(\\frac{n_0+1}{2n_0}\\), where either \\(n=2n_0\\) or \\(n=2n_0-1\\) [10.1109/TIT.2003.817426].", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "matrices", "realizations": [], "code_id": "orth_spacetime_block", "logical": "points", "introduced": "[10.1109/49.730453]", "description": "The codewords are \\(T\\times n\\) matrices as defined for spacetime codes, with the additional condition that columns of the coding matrix are orthogonal. The parameter \\(n\\) is the number of channels, and \\(T\\) is the number of time slots.", "notes": []}, "msr": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "name": "Minimum-storage regenerating (MSR) code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "matrices", "notes": [], "realizations": [], "code_id": "msr"}, "residue": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Also called a differential code. Stub.", "name": "Residue AG code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "q-ary_digits", "notes": [], "realizations": [], "code_id": "residue"}, "extended_reed_solomon": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Stub. If \\(f\\in \\mathcal{P}_k\\) with \\(k<q\\), then \\(\\sum_{\\alpha\\in\\mathbb{F}_q}f(\\alpha)=0\\) which implies RS codes are odd-like. Hence, by adding a parity check coordinate with evaluation point \\(\\alpha_0=0\\) to an RS code on \\(q-1\\) registers, the distance increases to \\(\\hat{d}=d+1\\). This addition yields an \\([q,k,q-k+1]\\) extended RS code.", "name": "Extended RS code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "q-ary_digits", "notes": [], "realizations": [], "code_id": "extended_reed_solomon"}, "folded_reed_solomon": {"short_name": "", "name": "Folded RS code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Guruswami\u2013Rudra achieved list decoding capacity of radius \\(1-R-\\epsilon\\) [10.1109/TIT.2007.911222].", "Folded RS codes, concatenated with suitable inner codes, can be efficiently list-decoded up to the Zyablov bound [cs/0511072]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "folded_reed_solomon", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "notes": []}, "q-ary_digits_into_q-ary_digits": {"short_name": "", "name": "Galois-field \\(q\\)-ary code", "protection": "Detects errors on up to \\(d-1\\) coordinates, corrects erasure errors on up to \\(d-1\\) coordinates, and corrects general errors on up to \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) coordinates.", "features": {"transversal_gates": "", "decoders": ["For small \\(n\\), decoding can be based on a lookup table. For infinite code families, the size of such a table scales exponentially with \\(n\\), so approximate decoding algorithms scaling polynomially with \\(n\\) have to be used. The decoder determining the most likely error given a noise channel is called the maximum-likelihood decoder.", "Given a received string \\(x\\) and an error bound \\(e\\), a list decoder returns a list of all codewords that are at most \\(e\\) from \\(x\\). The number of codewords in a neighborhood of \\(x\\) has to be polynomial in \\(n\\) in order for this decoder to run in time polynomial in \\(n\\)."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "q-ary_digits_into_q-ary_digits", "logical": "q-ary_digits", "introduced": "", "description": "Encodes \\(K\\) states (codewords) in \\(n\\) \\(q\\)-ary coordinates over the field \\(GF(q)=\\mathbb{F}_q\\) and has distance \\(d\\). Usually denoted as \\((n,K,d)_q\\). The distance is the minimum number of coordinates where two strings in the code differ.", "notes": ["Tables of bounds and examples of linear codes for various \\(n\\) and \\(k\\), extending code tables by Brouwer [Andries E. Brouwer, Bounds on linear codes, in: Vera S. Pless and W. Cary Huffman (Eds.), Handbook of Coding Theory, pp. 295-461, Elsevier, 1998.], are maintained by M. Grassl at this website <http://codetables.markus-grassl.de/>."]}, "q-ary_additive": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "A code whose codewords are closed under addition, i.e., for any codewords \\(x,y\\), \\(x+y\\) is also a codeword.\n", "name": "Additive \\(q\\)-ary code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "q-ary_digits", "notes": [], "realizations": [], "code_id": "q-ary_additive"}, "q-ary_linear": {"short_name": "", "name": "Linear \\(q\\)-ary code", "protection": "Distance \\(d\\) of a linear code is the number of nonzero entries in the (nonzero) codeword with the smallest such number. Corrects any error set such that the difference of any pair of distinct elements of the set is a codeword.", "features": {"transversal_gates": "", "decoders": ["Random linear codes over large fields are list-recoverable and list-decodable up to near-optimal rates [1704.02420]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "q-ary_linear", "logical": "q-ary_digits", "introduced": "", "description": "An \\((n,K,d)_q\\) linear code is denoted as \\([n,k,d]_q\\), where \\(k=\\log_{q}K\\) need not be an integer. Its codewords form a linear subspace, i.e., for any codewords \\(x,y\\), \\(\\alpha x+ \\beta y\\) is also a codeword for any \\(q\\)-ary digits \\(\\alpha,\\beta\\).\n\nLinear codes can be defined in terms of a generator matrix \\(G\\), whose rows form a basis for the \\(k\\)-dimensional codespace. Given a codeword \\(x\\), the corresponding encoded codeword is \\(G^T x\\). The generator matrix can be reduced via coordinate permutations to its standard or systematic form \\(G = [I_k A]\\), where \\(I_k\\) is a \\(k\\times k\\) identity matrix and \\(A\\) is a \\(k \\times (n-k)\\) \\(q\\)-ary matrix.\n", "notes": ["Admits a parity check matrix \\(H\\), whose columns make up a maximal linearly independent set of vectors that are in the kernel of \\(G\\)."]}, "generalized_reed_solomon": {"short_name": "GRS", "name": "Generalized Reed-Solomon (GRS) code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": ["Various cloud storage systems [1612.01361].", "Public-key cryptosystems [10.1007/s10623-003-6151-2]. Initial construction of McEliece Public Key Cryptosystem was based on Goppa codes which are subfield subcode of GRS codes. Public Key Cryptosystem designs based on GRS codes first proposed in Ref. [10.1002/oca.4660070108], which replaced the generator matrix with the parity check matrix, were proven to be insecure [10.1515/dma.1992.2.4.439] since the public key exposes algebraic structure of code. More recent works focus on methods to mask the algebraic structure using subcodes of GRS codes [10.1007/s10623-003-6151-2]. Lately a key-recovery attack was developed in [1307.6458] for a variant of masking method proposed by [1108.2462]."], "code_id": "generalized_reed_solomon", "logical": "q-ary_digits", "introduced": "[F. J. MacWilliams and N. J. A. Sloane. The theory of error correcting codes. Elsevier, 1977]", "description": "Stub.", "notes": []}, "gabidulin": {"short_name": "", "name": "Vector code", "protection": "Set of vectors \\(\\{x_1, x_2, \\ldots, x_M\\}\\) determines a rank code with distance \\(d=\\min d(x_i, x_j)\\). The code with distance \\(d\\) corrects all errors with rank of the error not greater than \\(\\lfloor (d-1)/2\\rfloor\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": ["Useful for error and erasure correction in network coding"], "code_id": "gabidulin", "logical": "q-ary_digits", "introduced": "[E. M. Gabidulin, \"Theory of Codes with Maximum Rank Distance\", Problemy Peredachi Informacii, Volume 21, Issue 1, 3\u201316 (1985),10.1109/18.75248]", "description": "Also called Gabidulin or vector rank-metric code. The code corrects errors over rank metric instead of the traditional Hamming distance. The rank of an \\(n\\)-dimensional vector over \\(GF(q)^N\\) is the maximum number of its linearly independent coordinates.\n\nGiven \\(X^n=\\text{span}\\{x_i\\}\\), an \\(n\\)-dimensional vector space over \\(GF(q)^N\\) where \\(q\\) is a power of a prime number, the rank metric \\(d(x, y)\\) is defined via the rank norm \\(r(x, q) = \\mathrm{rank}(A(x))\\), where\n\\begin{align}\nA(x) = \\begin{pmatrix} a_{11} & a_{12} & \\ldots & a_{1n} \\\\ a_{21} & a_{22} & \\ldots & a_{2n} \\\\  a_{N1} & a_{N2} & \\ldots & a_{Nn} \\end{pmatrix}\n\\end{align}\nand \\(x_i = a_{1i} u_1 + a_{2i} u_2 + \\ldots + a_{Ni}u_N \\) for some fixed basis \\(\\{u_i\\}_{i=1}^N\\).\n\nIf the vector set \\(\\{x_1, x_2, \\ldots, x_M\\}\\) defines a \\(k\\)-dimensional subspace, then the code is \\([n,k]\\)-linear.\n", "notes": []}, "evaluation": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "name": "Evaluation AG code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "q-ary_digits", "notes": [], "realizations": [], "code_id": "evaluation"}, "goppa": {"short_name": "", "name": "Goppa code", "protection": "The length \\( n = |L| \\) , dimension \\( k \\geq n-mr \\) where \\( r = \\text{deg} G(z) \\), and the minimum distance \\( d \\geq r +1 \\).", "features": {"transversal_gates": "", "decoders": ["Algebraic decoding algorithms [10.1109/TIT.1975.1055350].", "If \\( \\text{deg} G(z) = 2t \\) , then there exists a \\(t\\)-correcting algebraic decoding algorithm for \\( \\Gamma(L,G) \\)."], "rate": "There exist Goppa codes defined over larger alphabets that meet the Gilbert-Varshamov, or GV,  bound.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": ["The binary version \\( (q=2) \\) is commonly used in post-quantum cryptosystems such as the McElise cryptosystem [10.1007/BF00173300]."], "code_id": "goppa", "logical": "q-ary_digits", "introduced": "[V. D. Goppa, \"A new class of linear error-correcting codes\", Probl. Peredach. Inform., vol. 6, no. 3, pp. 24-30, Sept. 1970.,V. D. Goppa, \"Rational representation of codes and (Lg) codes\", Probl. Peredach. Inform., vol. 7, no. 3, pp. 41-49, Sept. 1971.,10.1109/TIT.1973.1055088]", "description": "Let \\( G(z) \\)  be a polynomial describing a projective plane curve with coefficients from \\( GF(q^m) \\) for some fixed integer \\(m\\). Let \\( L \\) be a finite subset of the extension field \\( GF(q^m) \\)  where \\(q\\) is prime, meaning \\( L  = \\{\\alpha_1, \\cdots, \\alpha_n\\} \\) is a subset of nonzero elements of \\( GF(q^m) \\). A Goppa code \\( \\Gamma(L,G) \\) is an \\([n,k,d]\\) linear code consisting of all vectors \\(a = a_1, \\cdots, a_n\\) such that \\( R_a(z) =0 \\) modulo \\(G(z)\\), where \\( R_a(z) = \\sum_{i=1}^n \\frac{a_i}{z - \\alpha_i} \\).", "notes": ["GAP function GoppaCode(G,L) <https://www.gap-system.org/Manuals/pkg/guava/doc/chap5.html#X7EE808BB7D1E487A> takes in a polynomial \\(G\\) that satisfies the necessary conditions for a Goppa code and a list \\(L\\) that contains elements in \\(GF(q)\\) that are not roots of \\(G\\). It returns a Goppa code."]}, "divisible": {"short_name": "", "name": "Divisible code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "divisible", "logical": "q-ary_digits", "introduced": "[10.1007/BF01223730]", "description": "A linear \\(q\\)-ary code is \\(\\Delta\\)-divisible if the Hamming weight of each of its codewords is divisible by \\(\\Delta\\). A \\(2\\)-divisible (\\(4\\)-divisible) code is called even (doubly even) [2112.11763].", "notes": []}, "ag": {"short_name": "", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "name": "Algebraic-geometry (AG) code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "q-ary_digits", "notes": [], "realizations": [], "code_id": "ag"}, "wozencraft": {"short_name": "", "name": "Wozencraft ensemble code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "wozencraft", "logical": "q-ary_digits", "introduced": "[J. L. Massey, Threshold Decoding. Cambridge, MA: M.I.T. Press, 1963.]", "description": "Stub.", "notes": []}, "group": {"short_name": "", "name": "\\(q\\)-ary group code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "group", "logical": "q-ary_digits", "introduced": "", "description": "An \\( [n,k]_{q} \\) code based on a finite group \\( G \\) of size \\(n \\). A group code for an abelian group is called an abelian group code.\n\nThe code is a \\( k \\)-dimensional linear subspace of the group algebra of \\( G\\) with coefficients in the field \\(GF(q) = \\mathbb{F}_q\\) with \\(q\\) elements. To be precise, the code must be closed under permutations corresponding to the elements of the group \\( G \\); therefore, \\( G \\) must be a subgroup of the permutation automorphism group of the code, which is defined as the group of permutations of the physical bits that preserve the code space. This leads us to the formal definition of a group code: a group code is an ideal in the group algebra \\( \\mathbb{F}_q G \\).\n", "notes": ["See Ch. 16 of Ref. [10.1201/9781315147901] for an introduction to group codes.", "Not all abelian group codes are for cyclic groups (cyclic codes) or for elementary abelian \\( p \\) groups (e.g. Reed Muller codes [10.1007/BF01119999]). For example, there is a binary code with parameters \\( [45,13,16] \\) which is an abelian group code for the group \\( G = \\mathbb{Z}_3 \\times \\mathbb{Z}_{15} \\). "]}, "maximum_rank_distance": {"short_name": "", "name": "Maximum-rank vector code", "protection": "\\(d\\)-distance codes protect agains all errors of rank not greater \\(\\lfloor (d-1)/2\\rfloor\\)", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "maximum_rank_distance", "logical": "q-ary_digits", "introduced": "[E. M. Gabidulin, \"Theory of Codes with Maximum Rank Distance\", Problemy Peredachi Informacii, Volume 21, Issue 1, 3\u201316 (1985),10.1109/18.75248]", "description": "Linear rank-metric code with maximum rank \\([n,k,n-k+1]_q\\) over rank metric. For any vector \\(g=(g_1, \\ldots, g_n)\\) with linearly independent elements \\(g_i\\) over \\(GF(q)\\),\nthe generator matrix\n\\begin{align}\nG = \\begin{pmatrix} g_1^{[0]} & g_2^{[0]} & \\ldots & g_n^{[0]} \\\\ g_1^{[1]} & g_2^{[1]} & \\ldots & g_n^{[1]} \\\\ g_1^{[k-1]} & g_2^{[k-1]} & \\ldots & g_n^{[k-1]} \\end{pmatrix}~,\n\\end{align}\nwhere \\([i]:=q^i\\) and \\(k=n-d+1\\) defines a maximum rank distance code.\n", "notes": []}, "mds": {"short_name": "MDS", "name": "Maximum distance separable (MDS) code", "protection": "Given \\(n\\) and \\(k\\), MDS codes have the highest distance possible of all codes and so have the best possible error correction properties.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": ["The McEliece Public Key Cryptosystem [McEliece, R.J.: A public-key cryptosystem based on algebraic coding theory. DSN Progress Report pp. 114\u2013116 (1978).] uses algebraic coding theory to secure communications against eavesdropping attack, in which private keys are generator matrices of linear codes, i.e., \\(G\\). Public Keys shared to outside world are scrambled and permutated versions of \\(G\\), i.e., \\(G^\\prime=SGP\\). Data to be encrypted, \\(u\\), is multiplied by public key and added intentional errors \\(e\\), i.e., \\(x=uG^\\prime+e\\). Upon receiving encrypted data, private key owner can apply inverse permutation \\(P^{-1}\\) to \\(x\\), decode the scrambled message given the presence of \\(e\\) errors, and finally unscramble to obtain \\(u\\). Security parameters of the system are \\(n\\) and \\(e\\), hence MDS codes, such as GRS codes may provide the same security level for shorter key sizes, and the private key owner can decode arguably fast enough using known decoding algorithms."], "code_id": "mds", "logical": "q-ary_digits", "introduced": "[10.1109/TIT.1964.1053661]", "description": "A \\([n,k,d]_q\\) \\(q\\)-ary linear code is an MDS code if parameters \\(n\\), \\(k\\), \\(d\\), and \\(q\\) are such that the Singleton bound\n\\begin{align}\nd \\leq n-k+1\n\\end{align}\nbecomes an equality. A code is called almost MDS (AMDS) when \\(d=n-k\\). A bound for general \\(q\\)-ary codes can also be formulated; see Thm. 1.9.10 in Ref. [10.1201/9781315147901].\n", "notes": ["The dual of an MDS codes is always MDS.", "The codes \\( [n,1,n]_q, [n,n-1,2]_q, [n,n,1]_q \\) for any \\(q\\) are MDS codes. These are called the trivial MDS codes.", "The only binary MDS codes are the trivial ones."]}, "reed_solomon": {"short_name": "RS", "name": "Reed-Solomon (RS) code", "protection": "Since each polynomial \\(f_{\\mu}\\) is of degree less than \\(k\\), it can be determined from its values at \\(k\\) points. This means that RS codes can correct erasures on up to \\(n-k\\) registers. The resulting distance, \\(d=n-k+1\\), saturates the Singleton bound.", "features": {"transversal_gates": "", "decoders": ["Berlekamp-Massey decoder [10.1109/TIT.1969.1054260,E. R. Berlekamp, Algebraic Coding Theory, McGraw-Hill, 1968].", "Gorenstein-Peterson-Zierler decoder [R.E. Blahut, Theory and practice of error-control codes, Addison-Wesley 1983.].", "Berlekamp-Welch decoder [E. R. Berlekamp and L. Welch, Error Correction of Algebraic Block Codes. U.S. Patent, Number 4,633,470 1986.], assuming that \\(t \\geq (n+k)/2\\).", "Gao decoder using extended Euclidean algorithm [10.1007/978-1-4757-3789-9_5].", "List decoders try to find a low-degree bivariate polynomial \\(Q(x,y)\\) such that evaluation of \\(Q\\) at \\((\\alpha_i,y_i)\\) is zero. By choosing proper degrees, it can be shown such polynomial exists by drawing an analogy between evaulation of \\(Q(\\alpha_i,y_i)\\) and homogenous linear equation(interpolation). Once this is done, list roots of \\(y\\) that agree at \\(\\geq t\\) points. The Sudan list decoding algorithm corrects up to \\(1-\\sqrt{2R}\\) proportion of errors [10.1006/JCOM.1997.0439]. The Sudan\u2013Guruswami algorithm improves that to \\(1-\\sqrt{R}\\) [10.1109/SFCS.1998.743426]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": ["Cross-interleaved RS code (CIRC) is adopted in Compact Discs (CDs) and RS Product Code (RSPC) in DVDs; see Ch. 4 of Ref. [10.1109/9780470546345].", "In DSL technologies and its variants against impluse noise [10.1109/ICC.2012.6364040].", "RS codes as outer codes concatenated with convolutional codes are used indirectly in solar exploration programs; see Ch. 3 of Ref. [10.1109/9780470546345].", "Coded sharding designs in blockchains to increase efficiency [1809.10361].", "Private Information Retrieval [10.1109/ISIT45174.2021.9517900].", "Used in QR-Codes to retrieve damaged barcodes [International Organization for Standardization, Information Technology: Automatic Identification and Data Capture Techniques-QR Code 2005 Bar Code Symbology Specification, 2nd ed., IEC18004 (ISO, 2006).].", "Wireless communication systems such as 3G, DVB, and WiMAX [10.1109/PIMRC.2010.5672091].", "Correcting pooled testing results for SARS-CoV-2 [10.1126/sciadv.abc5961]."], "code_id": "reed_solomon", "logical": "q-ary_digits", "introduced": "[10.1214/aoms/1177729387,10.1137/0108018]", "description": "An \\([n,k,n-k+1]_q\\) linear code based on polynomials over \\(GF(q)\\). Let \\(\\{\\alpha_1,\\cdots,\\alpha_n\\}\\) be \\(n\\) distinct nonzero elements of \\(GF(q)\\) with \\(q>n\\). An RS code encodes \\(\\mu=\\{\\mu_0,\\cdots,\\mu_{k-1}\\}\\) into \\(\\{f_\\mu(\\alpha_1),\\cdots,f_\\mu(\\alpha_n)\\}\\), with polynomial\n\\begin{align}\nf_\\mu(x)=\\mu_0+\\mu_1 x + \\cdots + \\mu_{k-1}x^{k-1}.\n\\end{align}\nIn other words, each codeword \\(\\mu\\) is a string of values of the corresponding polynomial \\(f_\\mu\\) at the points \\(\\alpha_i\\).\n", "notes": ["\\([n,k,n-k+1]\\) RS code requires an order \\(O(n^2)\\) operations while encoding if a straightforward matrix multiplication is employed and \\(k=\\mathcal{O}(n)\\). Using the FFT algorithm, complexity of evaluating a polynomial at \\(n\\) roots of unity becomes \\(O(n\\log n)\\). The FFT can be generalized to finite fields and rings, which is referred as Number-theoretic Transform (NTT). However, for some values of \\(n\\), which can not be factorized into small primes or do not have \\(n\\) roots of unity, the FFT algorithm fails. Independently developed by [10.1109/49.1926,10.1016/0097-3165(89)90020-4] and generalized in Ref. [10.1017/CBO9781139856065], the additive FFT solves this problem by evaluating the polynomial at \\(n-1\\) roots of unity when \\(n\\) is power of 2.", "Although using iFFT has its counterpart iNNT for finite fields, the decoding is usually standard polynomial interpolation in \\(k=\\mathcal{O}(n\\log^2 (n))\\). However, in erasure decoding, encoded values are only erased in \\(r\\) points, which is a specific case of polynomial interpolation and can be done in \\(\\mathcal{O}(n\\log (n)\\) by computing product of the received polynomial and an erasure locator polynomial and using long division to find an original polynomial. The long division step can be omitted to increase speed further by only dividing the derivative of the product polynomial, and derivative of erasure locator polynomial evaluated at erasure locations."]}, "binary_permutation": {"short_name": "", "name": "Binary permutation-based code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "groups", "realizations": [], "code_id": "binary_permutation", "logical": "points", "introduced": "[10.1016/S0019-9958(79)90076-7,10.1016/j.ejc.2009.03.044]", "description": "Stub.", "notes": []}, "group_classical": {"short_name": "", "logical": "points", "introduced": "", "description": "Encodes \\(K\\) states (codewords) in \\(n\\) coordinates labeled by elements of a finite group \\(G\\).", "name": "Group-based code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "groups", "notes": [], "realizations": [], "code_id": "group_classical"}, "rank_modulation": {"short_name": "", "name": "Rank-modulation code", "protection": "Protects against errors in the Kendall tau distance on the space of permutations.\nThe Kendall distance between permutations \\(\\sigma\\) and \\(\\pi\\) is defined as the minimum number of adjacent transpositions required to change \\(\\sigma\\) into \\(\\pi\\).\n", "features": {"transversal_gates": "", "decoders": [], "rate": "Rank modulation codes with code distance \\(d=\\Theta(n^{1+\\epsilon})\\) for \\(\\epsilon\\in[0,1]\\) achieve a rate of \\(1-\\epsilon\\) [10.1109/ISIT.2010.5513604].", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "groups", "realizations": ["Electronic devices where charges can either increase in an individual cell or decrease in a block of adjacent cells, e.g., flash memories [10.1109/TIT.2009.2018336]."], "code_id": "rank_modulation", "logical": "points", "introduced": "[10.1109/TIT.1969.1054291,10.1109/ISIT.2008.4595285]", "description": "Also known as a code in permutations.\nA family of codes that encode a finite set of size \\(M\\) into a set \\(S_n\\) of permutations of \\([n]=(1,2,...,n)\\).\nThey can be derived from Lee-metric codes, Reed-Solomon codes [10.1109/ISIT.2011.6034261], quadratic residue codes and most binary codes.\n", "notes": []}, "points_into_spheres": {"short_name": "", "logical": "spheres", "introduced": "", "description": "Encodes states (codewords) into points on an \\(n\\)-dimensional sphere \\(S^n\\).", "name": "Spherical code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "points", "notes": [], "realizations": [], "code_id": "points_into_spheres"}, "covering": {"short_name": "", "logical": null, "introduced": "", "description": "A code \\(C\\) in a metric space is covering if the union of balls of some radius centered at the codewords covers the entire space. For example, a \\(q\\)-ary code \\(C\\) is \\(\\rho\\)-covering if \\(\\forall v \\in GF(q)^{n}\\), there is a codeword \\(c \\in C\\) such that the Hamming distance \\(D(c,v)\\leq \\rho\\).\n\nThe covering radius \\(\\rho(C)\\) is the smallest non-negative integer \\(\\rho\\) such that \\(C\\) is \\(\\rho\\)-covering, i.e.\n\\begin{align}\n  \\rho(C)=\\max_{{v\\in GF(q)^{n}}}\\min_{{c\\in C}}d(v,c)~.\n\\end{align}\nFor a linear code \\([n,k]_q\\), the covering radius is the minimum number of columns of the code's parity check matrix which cover \\(GF(q)^{n-k}\\).\n\nThe covering radius satisfies various inequalities. A code \\(C\\) with distance \\(d\\) satisfies the relation\n\\begin{align}\n  \\rho(C)\\geq \\frac{|d-1|}{2}~. \\label{perfect-ref}\n\\end{align}\nLinear \\([n,k]_q\\) codes also satisfy the redundancy bound\n\\begin{align}\n  \\rho(C)\\leq n-k\n\\end{align}\nand the sphere covering bound\n\\begin{align}\n  \\rho(C)\\leq \\min{\\left(p~\\bigg\\rvert \\sum_{i=0}^{p} {n \\choose i}(q-1)^{i}|C| \\geq q^{n}\\right)}~. \\label{spherepacking-perfect-label}\n\\end{align}\nA code is perfect iff it satisfies Eqs. perfect-ref and spherepacking-perfect-label with equality.\n\nIn general, finding the covering radius of a given code is difficult. Complexity analysis as well as an extensive study on bounds can be found in Ref. [G. Cohen, I. Honkala, S. Litsyn, A. Lobstein, Covering Codes, Elsevier (1997).].\n", "name": "Covering code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": ["Data compression both with or without compression [G. Cohen, I. Honkala, S. Litsyn, A. Lobstein, Covering Codes, Elsevier (1997).].", "Football-pool problem: finding the smallest number of bets on a set of matches needed to guarantee at least one bet has at most \\(\\rho\\) errors [10.2307/2974552,10.1007/BF03025254]."], "code_id": "covering"}, "dual": {"short_name": "", "name": "Dual linear code", "protection": "The dual of an \\([n,k,d] \\) code is an \\([n,n-k,d']\\) code, where \\(d'\\) is not always related to \\(d\\). The generator matrix of \\(C^\\perp\\) is the parity check matrix of \\(C\\), and visa versa.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "dual", "logical": "q-ary_digits", "introduced": "[10.1201/9781315147901]", "description": "For any  \\([n,k]\\) binary or \\(q\\)-ary linear code \\(C\\), the dual code,\n\\begin{align}\nC^\\perp = \\{ y\\in GF(q)^{\\times n} ~|~ x\\cdot y=0 \\forall x\\in C\\},\n\\end{align}\nis the row space of the parity check matrix of \\(C\\). The dual code is the kernel of the encoding map for \\(C\\), and \\(\\dim C^\\perp = n-k\\).\n\nA code that contains its dual, \\(C^\\perp \\subseteq C\\), is called weakly self-dual or self-orthogonal. A code that is equal to its dual, \\(C^\\perp = C\\), is called self-dual. The dual of a dual code is the original code.\n", "notes": []}, "perfect": {"short_name": "", "logical": null, "introduced": "", "description": "An \\((n,K,2t+1)_q\\) \\(q\\)-ary code is perfect if parameters \\(n\\), \\(K\\), \\(t\\), and \\(q\\) are such that the Hamming (a.k.a. sphere-packing) bound\n\\begin{align}\n\\sum_{j=0}^{t}(q-1)^{j}{n \\choose j}\\leq q^{n}/K\n\\end{align}\nbecomes an equality. For example, for a binary \\(q=2\\) code with one logical bit (\\(K=2\\)) and \\(t=1\\), the bound becomes \\(n+1 \\leq 2^{n-1}\\). Any nontrivial perfect linear code is either a Hamming code or a binary or ternary Golay code.\n\nPerfect codes are those for which balls of Hamming radius \\(t\\) exactly fill the space of all \\(n\\) \\(q\\)-ary strings. Quasi-perfect codes are those for which balls of Hamming radius \\(t\\) are disjoint, while balls of radius \\(t+1\\) cover the space with possible overlaps.\n\nFor binary codes with \\(K=2^k\\), one can work out an asymptotic Hamming bound in the large-\\(n,k,t\\) limit,\n\\begin{align}\n\\frac{k}{n}\\leq 1-h(t/n),\n\\end{align}\nwhere \\(h\\) is the binary entropy function.\n", "name": "Perfect code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "perfect"}, "ldpc": {"short_name": "LDPC", "name": "Low-density parity-check (LDPC) code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": ["5G NR cellular communication for the traffic channel [10.1109/CSCITA47329.2020.9137797].", "WiMAX (IEEE 802.16e) [LDPC coding for OFDMA PHY. 802.16REVe Sponsor Ballot Recirculation comment, July 2004. IEEE C802.16e04/141r2].", "Satelite transmission of digital television [10.1109/ICARES.2014.7024407]."], "code_id": "ldpc", "logical": "bits", "introduced": "[10.1109/TIT.1962.1057683]", "description": "Also known as Gallager codes. Family of \\([n,k,d]\\) linear codes for which the number of nonzero entries in each row and column of the parity check matrix are both bounded by a constant as \\(n\\to\\infty\\). In other words, the parity-check matrix of an LDPC code is sparse.\n\nA parity check is performed by taking the inner product of a row of the parity-check matrix with a codeword that has been affected by a noise channel. A parity check yields either zero (no error) or one (error) for binary codes, while yielding zero (no error) or a nonzero field element (error) for \\(q\\)-ary codes. Despite the fact that there is more than one nonzero outcome, \\(q\\)-ary linear codes with sparse parity-check matrices are also called LDPC codes.\n", "notes": []}, "ipp": {"short_name": "", "name": "Identifiable parent property (IPP) code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "ipp", "logical": "q-ary_digits", "introduced": "[10.1006/jcta.1997.2851]", "description": "Stub.", "notes": []}, "alternant": {"short_name": "", "name": "Alternant code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "alternant", "logical": "q-ary_digits", "introduced": "[10.1016/S0019-9958(74)80005-7]", "description": "Stub.", "notes": []}, "random": {"short_name": "", "name": "Random code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Ball-collision decoding [10.1007/978-3-642-22792-9_42].", "Finiasz and Sendrier (FS-ISD) decoding [10.1007/978-3-642-10366-7_6]."], "rate": "Typical random codes (TRC) or typical random linear codes (TLC) refer to codes in the respective ensemble that satisfy a certain minimum distance. The relative fraction of typical codes in the ensemble approaches one as \\(N\\) goes to infinity [10.1002/j.1538-7305.1948.tb01338.x] (see also Ref. [10.1109/TIT.2002.800480]). Asymptotically, given distance \\(d\\), the maximum rate for a TRC is given by \\(R=\\frac{1}{2}R_{GV}(\\delta)\\) where \\(R_{GV}\\) is the Gilbert\u2013Varshamov (GV) bound \\(R_{GV}=1-h(\\delta)\\), and \\(h(\\delta)=h(\\frac{d}{n})\\) is the binary entropy function. The maximum rate for a TLC is given by \\(R=R_{GV}(d)\\), meaning that TLCs achieve the asymoptic GV bound.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": ["Distributed storage systems [10.1109/TPDS.2008.251]."], "code_id": "random", "logical": null, "introduced": "[10.1002/j.1538-7305.1948.tb01338.x]", "description": "Code whose construction is non-deterministic in some way, i.e., codes that utilize an elements of randomness somewhere in their construction. Members of this class range from fully non-deterministic codes, to codes whose multi-step construction is deterministic with the exception of a single step.\n\nTypically, random codes are selected with uniform distribution from some ensemble of codes. For example, a random binary code is a set of \\(2^{K}\\) codewords with length \\(N\\) chosen uniformly from the ensemble of all \\(2^N\\) bit-strings. Each bit in the codeword is randomly chosen between 0 and 1 with equal probability. For another example, a random binary linear code is generated from a random chosen \\(K\\) generators of length \\(N\\), where each bit of the generators is randomly chosen between 0 and 1 with equal probability. Equivalently, a random binary linear code is defined by a randomly generated \\(K\\) by \\(N\\) generator matrix, where each entry is randomly chosen between 0 and 1 with equal probability.\n\nIn both of the above random code constructions, the ensemble size scales exponentially with \\(N\\). A common convention is to think of the resulting code constructions as effectively explicit (as opposed to random) in cases where the ensemble size is independent of \\(N\\) or even when the size scales polynomially with \\(N\\).\n", "notes": ["Shannon's pioneering work [10.1002/j.1538-7305.1948.tb01338.x] analyzes the distance distribution of the code given a rate. Given \\(N\\) and the rate \\(R\\), the minimum distance of a TRC is given by the GV bound \\(d=N\\delta_{GV}(2R)\\), where \\(\\delta_{GV} = h^{-1}(1-R)\\), \\(0\\le R \\le 1\\), and \\(\\delta_{GV}(x)=0\\) for all other \\(R\\). For a TLC, the minimum distane is given by \\(d=N\\delta_{GV}(R)\\)."]}, "cyclic": {"short_name": "", "name": "Cyclic code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "cyclic", "logical": "q-ary_digits", "introduced": "", "description": "A code \\(C\\) of length \\(n\\) over an alphabet is cyclic if, for each string \\(c_1 c_2 \\cdots c_n\\in C\\), the cyclically shifted string \\(c_n c_1 \\cdots c_{n-1}\\in C\\).", "notes": []}, "quad_residue": {"short_name": "", "name": "Quadratic-residue code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "quad_residue", "logical": "q-ary_digits", "introduced": "", "description": "Stub.", "notes": []}, "skew_cyclic": {"short_name": "", "name": "Skew-cyclic code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Only given for skew-BCH codes, adapted froom standard BCH codes."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": ["Not directly implemented, but BCH codes form a subclass, and are used in DVD, solid state drive storage, etc."], "code_id": "skew_cyclic", "logical": "q-ary_digits", "introduced": "[math/0604603]", "description": "A classical code \\(C\\) of length \\(n\\) over an alphabet \\(R\\) is skew-cyclic if there exists an automorphism, \\(\\theta\\), of \\(R\\), such that for each string \\(c_1 c_2 \\cdots c_n\\in C\\), the skew-cyclically shifted string \\(\\theta(c_n) \\theta(c_1) \\cdots \\theta(c_{n-1})\\in C\\). We say that \\(C\\) is a \\(\\theta\\)-cyclic code over \\(R\\).", "notes": ["Computer algebra software is used to find most codes of this type. Ref. [math/0604603] gives several examples of codes, which have slightly improved minimum distance for some \\((n,k)\\) codes."]}, "quasi_cyclic": {"short_name": "", "name": "Quasi-cyclic code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "q-ary_digits", "realizations": [], "code_id": "quasi_cyclic", "logical": "q-ary_digits", "introduced": "[10.1109/TIT.1967.1053974]", "description": "Stub.", "notes": []}, "parallel_concatenated": {"short_name": "", "logical": null, "introduced": "", "description": "Stub.", "name": "Parallel concatenated code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "parallel_concatenated"}, "generalized_concatenated": {"short_name": "", "logical": null, "introduced": "", "description": "Stub.", "name": "Generalized concatenated code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "generalized_concatenated"}, "concatenated": {"short_name": "", "logical": null, "introduced": "[G. D. Forney, Jr (1966). Concatenated Codes. MIT Press, Cambridge, MA.]", "description": "Also called a serially concatenated code [10.1109/TIT.2005.846392]. Stub.", "name": "Concatenated code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "concatenated"}, "codes_with_availability": {"short_name": "", "logical": null, "introduced": "", "description": "Stub.", "name": "Availability code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "codes_with_availability"}, "parallel_recovery": {"short_name": "", "logical": null, "introduced": "", "description": "Stub.", "name": "Parallel-recovery code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "parallel_recovery"}, "distributed_storage": {"short_name": "", "logical": null, "introduced": "", "description": "Designed to encode information into spatial nodes such that it is possible to recover said information after failure of some nodes by accessing the remaining nodes with minimal bandwidth. Stub.", "name": "Distributed-storage code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "distributed_storage"}, "sequential_recovery": {"short_name": "", "logical": null, "introduced": "", "description": "Stub.", "name": "Sequential-recovery code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "sequential_recovery"}, "locally_recoverable": {"short_name": "LRC", "name": "Locally recoverable code (LRC)", "protection": "The distance, \\(d\\), of an \\((n,k,r)\\) LRC code satisfies \\begin{align} d\\leq n-k-\\left \\lceil\\frac{k}{r}\\right \\rceil+2~,\\label{gen-singleton} \\end{align} where \\(r\\leq k\\). When \\(k=r\\), the bound on the distance gives the Singleton bound. The generalized Singleton bound gen-singleton does not account for \\(q\\)-ary alphabet size. A more generalized bound (including the non-linear case) is given in Ref. [10.1109/TIT.2015.2477406].", "features": {"transversal_gates": "", "decoders": [], "rate": "The rate \\(r\\) of an \\((n,k,r)\\) LRC code satisfies \\begin{align} \\frac{k}{n}\\leq\\frac{r}{r+1}~. \\end{align}", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": ["An \\((18,14,7)\\) LRC code has beed used in the Windows Azure cloud storage system [C. Huang, H. Simitci, Y. Xu, A. Ogus, B. Calder, P. Gopalan, J. Li, and S. Yekhanin. Erasure coding in Windows Azure Storage. In Proc. USENIX Annual Technical Conference (ATC), pgs. 15-26, Boston, Massachusetts, June 2012.]; see also Sec. 31.3.1.2 in Ref. [10.1201/9781315147901]."], "code_id": "locally_recoverable", "logical": null, "introduced": "", "description": "Any code for which, given a codeword \\(x\\) and coordinate \\(i\\), \\(x_i\\) can be recovered from (at most \\(r\\)) other coordinates of \\(x\\). An \\(r\\)-locally recoverable code of length \\(n\\) and dimension \\(k\\) is denoted as an \\((n,k,r)\\) LRC code.\n\nMore technically, a \\(q\\)-ary code \\(C\\) with length \\(n\\) is \\(r\\)-locally recoverable, or has locality \\(r\\), if \\(\\forall i \\in [n]\\), there exists \\(I_i \\subset [n]\\setminus i\\) such that \\(|I_i|\\leq r\\), and the projection of the set \\(\\mathcal{C}(i,a)=\\{x\\in C : x_i=a\\}\\) on to the coordinates in \\(I_i\\), i.e., \\(\\mathcal{C}_{I_i}(i,a)\\) is disjoint from \\(\\mathcal{C}_{I_i}(i,a^\\prime)\\) where \\(a\\neq a^\\prime\\).\n\nThe definition can be generalized to \\(t\\)-LRC code, if every coordinate is recoverable from \\(t\\) disjoint subsets of coordinates. A study on the parameters of \\(t\\)-LRC codes, together with known bounds, can be found in Ref. [10.1109/TIT.2016.2518663].\n", "notes": []}, "rings_into_rings": {"short_name": "", "logical": "rings", "introduced": "", "description": "Encodes \\(K\\) states (codewords) in \\(n\\) coordinates over a ring \\(R\\).", "name": "Ring code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "rings", "notes": [], "realizations": [], "code_id": "rings_into_rings"}, "quaternary_over_z4": {"short_name": "", "logical": "rings", "introduced": "", "description": "A linear code encoding \\(K\\) states (codewords) in \\(n\\) coordinates over the ring \\(\\mathbb{Z}_4\\) of integers modulo 4.", "name": "Quaternary code over \\(\\mathbb{Z}_4\\)", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "rings", "notes": [], "realizations": [], "code_id": "quaternary_over_z4"}, "rings_linear": {"short_name": "", "logical": "rings", "introduced": "", "description": "A code of length \\(n\\) over a ring \\(R\\) is \\(R\\)-linear if it is a submodule of \\(R^n\\).", "name": "\\(R\\)-linear code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "rings", "notes": [], "realizations": [], "code_id": "rings_linear"}, "points_into_lattices": {"short_name": "", "logical": "lattices", "introduced": "", "description": "Encodes states (codewords) in coordinates of a lattice in the \\(n\\)-dimensional real coordinate space \\(\\mathbb{R}^n\\). The number of codewords may be infinite because the coordinate space is infinite-dimensional, so various restricted versions have to be constructed in practice. Since lattices are closed under addition, lattice-based codes can be thought of as linear codes over the reals.", "name": "Lattice-based code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "points", "notes": [], "realizations": [], "code_id": "points_into_lattices"}, "convolutional": {"short_name": "", "name": "Convolutional code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Decoders based on the Viterbi algorithm (trellis decoding) were developed first, which result in the most-likely codeword for the encoded bits [10.1109/TIT.1967.1054010]. Following, other trellis decoders such as the BCJR decoding algorithm [10.1109/TIT.1974.1055186] were developed later."], "rate": "Depends on the polynomials used. Using puncturing removal [10.12928/telkomnika.v10i4.171] the rate for the code can be increased from \\(\\frac{1}{t}\\) to \\(\\frac{s}{t}\\), where \\(t\\) is the number of output bits, and \\(s\\) depends on the puncturing done. This is done by deleting some pieces of the encoder output such that the most-likely decoders remain effective", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Evaluation on the generator polynomials. Can be implemented with a small number of XOR gates"]}, "physical": "bits", "realizations": ["A type of convolutional code used in Real-time Application networks [10.5815/ijcnis.2014.07.03].", "Mobile and radio communications (3G networks) use convolutional codes concatenated with Reed-Solomon codes to obtain suitable performance [10.1002/0470866969].", "A convolutional code with rate 1/2 was used for deep-space and satellite communication [Butman, Deutsch, and Miller. Performance of concatenated codes for deep space missions. 1981.]"], "code_id": "convolutional", "logical": "bits", "introduced": "[Peter Elias. Coding for noisy channels. IRE Convention Records, 3(4):37\u201346, 1955.]", "description": "Classical codes that are formed using generator polynomials over the finite field with two elements. The encoder slides across contiguous subsets of the input bit-string (like a convolutional neural network) evaluating the polynomials on that window to obtain a number of parity bits. These parity bits are the encoded information. There are many ways to formulate these codes", "notes": []}, "hadamard": {"short_name": "", "logical": "bits", "introduced": "", "description": "The Hadamard code is dual to the extended Hamming Code.", "name": "Hadamard code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "bits", "notes": [], "realizations": [], "code_id": "hadamard"}, "single_parity_check": {"short_name": "", "name": "Single parity-check code", "protection": "This code cannot protect information, it can only detect 1-bit error.", "features": {"transversal_gates": "", "decoders": ["If the receiver finds that the parity information of a codeword disagrees with the parity bit, then the receiver will discard the information and request a resend."], "rate": "The code rate is \\(\\frac{n}{n+1}\\to 1\\) as \\(n\\to\\infty\\). The code distance is 2.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Concatenate the codeword with a parity bit which encodes the parity information of codeword."]}, "physical": "bits", "realizations": ["Can be realized on almost every communication device."], "code_id": "single_parity_check", "logical": "bits", "introduced": "", "description": "An \\([n,n-1,2]\\) binary linear error-detecting code encoding an \\(n\\)-bit codeword into an \\((n+1)\\)-bit string. In this code, parity information of a codeword is sotred in an extra parity bit. If the Hamming weight of a codeword is odd, then its parity is 1. If the Hamming weight of a codeword is even, then its parity is 0. This code is inexpensive since it only requires an extra parity bit and a single parity check. ", "notes": []}, "tanner": {"short_name": "", "name": "Tanner code", "protection": "Tanner Codes protect against noise on classical bit strings. If \\(C_0\\) is an \\([d, d-t,d'> d(\\gamma_0 +\\frac{\\lambda}{d})]_2\\) code and G is an \\((N, M, 2, d, \\rho,\\alpha)\\)- expander where \\(\\rho = \\gamma_0 (\\gamma_0 +\\frac{\\lambda}{d})\\), then the Tanner Code \\(T(G, C_0)\\) has rate \\(1-\\frac{M}{N}t\\) and relative distance \\(\\geq \\gamma_0(\\gamma_0+\\frac{\\lambda}{d})\\).", "features": {"transversal_gates": "", "decoders": ["Parallel decoding algorithm corrects a fraction \\(\\delta_0^2/48\\) of errors for Tanner codes [10.1109/18.556667]. A modification of said algorithm improves the fraction to \\(\\delta_0^2/4\\) with no extra cost to complexity [10.1109/18.910593]."], "rate": "For a short code \\(C_0\\) with rate \\(R_0\\), the Tanner code has rate \\(R \\geq 2R_0-1\\). If \\(C_0\\) satisfies the Gilbert-Varshamov bound, the rate \\(R \\geq \\delta = 1-2h(\\delta_0)\\), where \\(\\delta\\) (\\(\\delta_0\\)) is the relative distance of the Tanner code (\\(C_0\\)), and \\(h\\) is the binary entropy function.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Quadratic algorithm: This technique works for all linear block codes and encodes using matrix multiplication [10.1145/258533.258575].", "Using the non-Abelian Fast Fourier Transform and exploiting the symmetry of the underlying graph, an encoding algorithm that requires \\(O(n^{4/3})\\) has been devised in [10.1145/258533.258575].", "A modified construction yields codes that may be encoded in linear time yet maintain similar performance [10.1109/18.556668]."]}, "physical": "bits", "realizations": [], "code_id": "tanner", "logical": "bits", "introduced": "[10.1109/TIT.1981.1056404]", "description": "Binary linear code defined on edges on a regular graph \\(G\\) such that each subsequence of bits corresponding to edges in the neighborhood any vertex belong to some short binary linear code \\(C_0\\). Expansion properties of the underlying graph can yield efficient decoding algorithms.\n\nMore technically, let \\(G(V,E)\\) be a \\(\\Delta\\)-regular (not necessarily bipartite) graph with number of vertices \\(|V| = n \\) and number of edges \\(|E| = N = n\\Delta/2\\). Let \\(C_0\\) be a linear binary code of length \\(\\Delta\\) and rate \\(R_0\\). The Tanner code \\(T(G,C_0)\\), whose bits are placed on edges of the graph, consists of the following codewords:\n\\begin{align}\n\\left\\{ c \\in GF(2)^{n}\\,\\text{s.t. }\\forall v\\in V,\\left.c\\right|_{N(v)}\\in C_{0}\\right\\} ~,\n\\end{align}\nwhere \\(\\left.c\\right|_{N(v)}\\) is the subsequence formed by the \\(\\Delta\\) bits located on the neighbors \\(N(v)\\) of the vertex \\(v\\). The dimension of \\(T\\) is at least \\(N -n(\\Delta -\\Delta R_0) = N(2R_0-1)\\geq 0\\) whenever \\(R_0 \\geq \\frac{1}{2}\\).\n", "notes": []}, "levenshtein": {"short_name": "", "name": "Levenshtein code", "protection": "Levenshtein codes meet the Plotkin bound \\(K\\leq 2\\left\\lfloor\\frac{d}{2d-n}\\right\\rfloor\\), where \\(K\\) is the number of codewords, \\(d\\) is the distance, and \\(n\\) is the length, and with the assumption that the Hadamard matrices for such parameters exist. The general proof depends on the correctness of Hadamard''s conjecture [F. J. MacWilliams and N. J. A. Sloane. The theory of error correcting codes. Elsevier, 1977].", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": [], "code_id": "levenshtein", "logical": "bits", "introduced": "[V.I. Levenshtein, Application of Hadamard matrices to a problem in coding theory, Problems of Cybernetics, vol. 5, GIFML, Moscow, 1961, 125\u2013136.]", "description": "Binary codes constructed from combining two codes \\(A'\\) constructed out of Hadamard matrices.\n\nLet \\(H_n\\) be a normalized Hadamard matrix. The generator matrix for an \\((n-1,n,n/2)\\) code \\(A_n\\) is obtained by taking \\(H_n\\), replacing the +1's by 0's and the -1's by 1's, and deleting the first column. Taking only the codewords of \\(A_n\\) which begin with 0 and deleting the leading 0 yields the generator matrix of an \\((n-2,n/2,n/2)\\) code \\(A_n'\\).\n\nNext, apply the following way of combining codes. Suppose we have an \\((n_1,M_1,d_1)\\) code \\(C_1\\) and an \\((n_2,M_2,d_2)\\) code \\(C_2\\). The combined \\((an_1+bn_2,\\min(M_1,M_2),ad_1+bd_2)\\) code \\(a C_1\\bigoplus b C_2\\) may be constructed by pasting \\(a\\) copies of \\(C_1\\) and \\(b\\) copies of \\(C_2\\) together and omitting the last \\(|M_1-M_2|\\) rows. Applying this to construct a Levenshtein code with length \\(n\\) and distance \\(d\\), define \\(k=\\lfloor d/(2d-n)\\rfloor\\), \\(a=d(2k+1)-n(k+1)\\), and \\(b=kn-d(2k-1)\\). If \\(n\\) is even, construct \\(\\frac{a}{2}A_{4k}'\\bigoplus\\frac{b}{2}A_{4k+4}'\\). If \\(n\\) is odd and \\(k\\) is even, construct \\(aA_{2k}\\bigoplus\\frac{b}{2}A_{4k+4}'\\). If \\(n\\) is odd and \\(k\\) is odd, construct \\(\\frac{a}{2}A_{4k}'\\bigoplus b A_{2k+2}\\).\n", "notes": []}, "polar": {"short_name": "", "name": "Polar code", "protection": "Protects against various types of noise in the communication channel, for instance, errors, erasures, or other types of noise. Distance plays no role in the analysis of its properties, and is much lower than the largest possible value given \\(K,N\\).", "features": {"transversal_gates": "", "decoders": ["Successive cancellation decoder [10.1109/TIT.2009.2021379].", "Successive cancellation list decoder [10.1109/TIT.2015.2410251]."], "rate": "Supports reliable transmission at rates \\(K/N\\) approaching the Shannon capacity of the channel.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["Achieves Shannon capacity of the binary-input memoryless channel under successive cancellation decoder [10.1109/TIT.2009.2021379]."], "encoders": []}, "physical": "bits", "realizations": ["Code control channels for the 5G NR (New Radio) interfaces [3rd Generation Partnership Project (3GPP), Technical specification group radio access network, 3GPP TS 38.212 V.15.0.0, 2017.]."], "code_id": "polar", "logical": "bits", "introduced": "[10.1109/TIT.2009.2021379]", "description": "In its basic version, a binary linear polar code encodes \\(K\\) message bits into \\(N=2^n\\) bits. The linear transformation that defines the code is given by the matrix \\(G^{(n)}=B_N G^{\\otimes n}\\), where \\(B_N\\) is a certain \\(N\\times N\\) permutation matrix, and \\(G^{\\otimes n}\\) is the \\(n\\)th Kronecker power of the \\(2\\times 2\\) kernel matrix \\(G=\\left[\\begin{smallmatrix}1 & 0\\\\ 1 & 1 \\end{smallmatrix}\\right]\\). To encode \\(K\\) message bits, one forms an \\(N\\)-vector \\(u\\) in which \\(K\\) coordinates represent the message bits. The remaining \\(N-K\\) coordinates are set to some fixed values and are said to be frozen. The codeword \\(x \\in \\{0,1\\}^N\\) is obtained as \\(x=u G^{\\otimes n}\\).\n\nThe choice of the frozen coordinates depends on the communication channel, and they correspond to the least reliable bits on the output of the channel under a particular decoding procedure called successive cancellation decoding. If the communication channel is input-symmetric, the values of the frozen bits can be set to zero.\n\nThere are multiple variants of the above basic construction, in particular relying on other kernel matrices. The codes can be defined for nonbinary alphabets, and they can be adjusted to support tasks such as lossless and lossy compression, successive refinement, communication over the mulitple access channel, communication over the wiretap channel, and many others.\n", "notes": ["For more details, see Ch. 32 of Ref. [10.1201/9781315147901]."]}, "justesen": {"short_name": "", "name": "Justesen code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Generalized minimum distance decoding [10.1109/TIT.1972.1054893]."], "rate": "The first asymptotically good codes. Rate is \\(R_m=k/n=K/2N\\geq R\\) and the relative minumum distance satisfy \\(\\delta_m=d_m/n\\geq 0.11(1-2R)\\), where \\(K=\\left\\lceil 2NR\\right\\rceil\\) for asymptotic rate \\(0<R<1/2\\); see pg. 311 of Ref. [F. J. MacWilliams and N. J. A. Sloane. The theory of error correcting codes. Elsevier, 1977].\n\nThe code can be improved and extend the range of \\(R\\) from 0 to 1 by puncturing, i.e., by erasing \\(s\\) digits from each inner codeword. This yields a code of length \\(n=(2m-s)N\\) and rate \\(R=mk/(2m-s)N\\). The lower bound of the distance of the punctured code approaches \\(d_m/n=(1-R/r)H^{-1}(1-r)\\) as \\(m\\) goes to infinity, where \\(r\\) is the maximum of 1/2 and the solution to \\(R=r^2/(1+\\log(1-h^{-1}(1-r)))\\), and \\(h\\) is the binary entropy function.\n", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": ["Generating small-bias sample spaces, i.e., probability distributions that parity functions cannot typically distinguish from the uniform distribution [10.1145/100216.100244]."], "code_id": "justesen", "logical": "bits", "introduced": "[10.1109/TIT.1972.1054893]", "description": "Binary code resulting from generalized concatenation of a Reed-Solomon (RS) outer code with multiple inner codes sampled from the Wozencraft ensemble, i.e., \\(N\\) distinct binary inner codes of dimension \\(m\\) and length \\(2m\\). Justesen codes are parameterized by \\(m\\), with length \\(n=2mN\\) and dimension \\(k=mK\\), where \\((N=2^m-1,K)\\) is the RS outer code over \\(GF(2^m)\\).", "notes": []}, "repetition": {"short_name": "", "name": "Binary repetition code", "protection": "Detects errors on up to \\(\\frac{n-1}{2}\\) coordinates, corrects erasure errors on up to \\(\\frac{n-1}{2}\\) coordinates. The generator matrix is \\(G=\\left[\\begin{smallmatrix}1 & 1&\\cdots& 1 & 1 \\end{smallmatrix}\\right]\\).", "features": {"transversal_gates": "", "decoders": ["Calculate the Hamming weight \\(d_H\\) of the code. If \\(d_H\\leq \\frac{n-1}{2}\\), decode the code as 0. If \\(d_H\\geq \\frac{n+1}{2}\\), decode the code as 1."], "rate": "Code rate is \\(\\frac{1}{n}\\), code distance is \\(n\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["Suppose each bit has probability \\(p\\) of being received correctly, independent for each bit. The probability that a repetition code is received correctly is \\(\\sum_{k=0}^{(n-1)/2}\\frac{n!}{k!(n-k)!}p^{n-k}(1-p)^{k}\\). If \\(\\frac{1}{2}\\leq p\\), then people can always increase the probability of success by increasing the number of physical bit \\(n\\)."], "encoders": []}, "physical": "bits", "realizations": ["Repetition codes were used in magnetic disks."], "code_id": "repetition", "logical": "bits", "introduced": "[10.1201/9781315147901]", "description": "\\([n,1,n]\\) binary linear code encoding one bit of information into an \\(n\\)-bit string. The length \\(n\\) needs to be an odd number, since the receiver will pick the majority to recover the information. The idea is to increase the code distance by repeating the logical information several times. It is a \\((n,1)\\)-Hamming code.", "notes": []}, "binary_linear": {"short_name": "", "name": "Linear binary code", "protection": "Distance \\(d\\) of a linear code is the number of nonzero entries in the (nonzero) codeword with the smallest such number. Corrects any error set for which no two elements of the set add up to a codeword.\n\nLinear codes admit a parity check matrix \\(H\\), whose columns make up a set of parity checks, i.e., a maximal linearly independent set of vectors that are in the kernel of \\(G\\). It follows that\n\\begin{align}\n  G H^{\\text{T}} = 0 \\mod 2~.\n\\end{align}\n", "features": {"transversal_gates": "", "decoders": [], "rate": "A family of linear codes \\(C_i = [n_i,k_i,d_i]\\) is asymptotically good if the asymptotic rate \\(\\lim_{i\\to\\infty} k_i/n_i\\) and asymptotic distance \\(\\lim_{i\\to\\infty} d_i/n_i\\) are both positive.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": [], "code_id": "binary_linear", "logical": "bits", "introduced": "", "description": "An \\((n,2^k,d)\\) linear code is denoted as \\([n,k]\\) or \\([n,k,d]\\), where \\(d\\) is the code's distance. Its codewords form a linear subspace, i.e., for any codewords \\(x,y\\), \\(x+y\\) is also a codeword. A code that is not linear is called nonlinear.\n\nLinear codes can be defined in terms of a generator matrix \\(G\\), whose rows form a basis for the \\(k\\)-dimensional codespace. Given a codeword \\(x\\), the corresponding encoded codeword is \\(G^T x\\). The generator matrix can be reduced via coordinate permutations to its standard or systematic form \\(G = [I_k~A]\\), where \\(I_k\\) is a \\(k\\times k\\) identity matrix and \\(A\\) is a \\(k \\times (n-k)\\) binary matrix.\n", "notes": ["Tables of bounds and examples of linear codes for various \\(n\\) and \\(k\\), extending code tables by A. E. Brouwer [Andries E. Brouwer, Bounds on linear codes, in: Vera S. Pless and W. Cary Huffman (Eds.), Handbook of Coding Theory, pp. 295-461, Elsevier, 1998.], are maintained by M. Grassl at this website <http://codetables.markus-grassl.de/>."]}, "parity_check": {"short_name": "", "logical": "bits", "introduced": "", "description": "Stub.", "name": "Parity-check code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "bits", "notes": [], "realizations": [], "code_id": "parity_check"}, "hamming": {"short_name": "", "name": "Hamming code", "protection": "Can detect 1-bit and 2-bit errors, and can correct 1-bit errors.", "features": {"transversal_gates": "", "decoders": [], "rate": "Asymptotic rate \\(k/n = 1-\\frac{\\log n}{n} \\to 1\\) and normalized distance \\(d/n \\to 0\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": ["Commonly used when error rates are very low, for example, computer RAM."], "code_id": "hamming", "logical": "bits", "introduced": "[10.1002/j.1538-7305.1950.tb00463.x]", "description": "Hamming codes are an infinite family of linear codes with parameters \\((2^r-1,2^r-r-1, 3)\\) for \\(r \\geq 3\\). The \\(r \\times (2^r-1) \\) parity check matrix \\(H\\) has all possible non-zero \\(r\\)-bit strings as its columns. The codewords are \\(\\{x|Hx=0\\}\\).", "notes": ["Has the maximum rate among binary codes for that block length and with minimum distance 3. Therefore, it is a perfect code, i.e, it saturates the Hamming Bound."]}, "bch": {"short_name": "BCH", "name": "Bose\u2013Chaudhuri\u2013Hocquenghem (BCH) code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": [], "code_id": "bch", "logical": "bits", "introduced": "[10.1016/s0019-9958(60)90287-4]", "description": "Stub.", "notes": []}, "homological_classical": {"short_name": "", "name": "Graph homology code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": [], "code_id": "homological_classical", "logical": "bits", "introduced": "[quant-ph/0605094]", "description": "This code's properties are derived from the size two chain complex associated with a particular graph. Given a connected simplicial (no self loops or muliedges) graph \\(G = (V, E)\\), which is not a tree, with incidence matrix \\(\\Gamma\\) we can construct a code by choosing a parity check matrix which consists of all the linearly independent rows of \\(\\Gamma\\). This is a \\([n,k,d]\\) code with \\(n = |E|\\), \\(k = 1 - \\mathcal{X}(G) = 1-|V|+|E|\\), where \\( \\mathcal{X}(G)\\) is the euler characteristic of the graph. The code distance is equal to the shortest size of a cycle, guaranteed to exist since \\(G\\) is not a tree.\n", "notes": []}, "reed_muller": {"short_name": "", "name": "Reed-Muller (RM) code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": [], "code_id": "reed_muller", "logical": "bits", "introduced": "[10.1109/irepgelc.1954.6499441,10.1109/tit.1954.1057465]", "description": "Stub. Define first order (\\(r=1\\)) and second order.", "notes": []}, "expander": {"short_name": "", "name": "Expander code", "protection": "Bit flip errors of weight at most \\((d-1)/2\\) where \\(d\\) is the distance of the code and is linear in \\(n\\), the number of physical bits.", "features": {"transversal_gates": "", "decoders": ["Decoding can be done in \\(O(n)\\) runtime using a greedy algorithm. The algorithm consists of flipping a bit of the received word if it will result in a greater number of satisfied parity checks. This is repeated until a codeword is reached."], "rate": "The rate is \\(1 - m/n\\) where \\(n\\) is the number of left nodes and \\(m\\) is the number of right nodes in the bipartite expander graph.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Multiplication by generator matrix with runtime \\(O(n^2)\\)"]}, "physical": "bits", "realizations": [], "code_id": "expander", "logical": "bits", "introduced": "[10.1109/18.556667]", "description": "Expander codes are binary linear codes whose parity check matrices are derived from the adjacency matrix of bipartite expander graphs. In particular, the rows of the parity check matrix correspond to the right nodes of the bipartite graph and the columns correspond to the left nodes. The codespace is equivalent to all subsets of the left nodes in the graph that have an even number of edges going into every right node of the graph. Since the expander graph is only left regular, these codes do not qualify as LDPC codes.\n\nExpander codes are important because they admit efficient encoding and decoding algorithms and are asymptotically good (i.e., their rate and normalized distance are constant). The rate and distance of the expander code depend on specific parameters of the corresponding graph. A (\\(n, m, D, \\gamma, \\alpha\\)) bipartite expander graph is defined as a \\(D\\)-left-regular graph with \\(n\\) left nodes, and \\(m\\) right nodes such that for any subset of left nodes \\(S\\) of size at most \\(\\gamma n\\) the neighborhood \\(N(S)\\) is at least of size \\(\\alpha|S|\\). Given a (\\(n, m, D, \\gamma, (1-\\epsilon)D\\)) expander graph, the corresponding expander code has rate of \\(1 - m/n\\) and a distance of at least \\(2(1-\\epsilon)\\gamma n\\) for any \\(\\epsilon < 1/2\\). Explicit constructions for expander graphs with any ratio \\(n/m\\) are known where \\(D = \\text{polylog}(n/m)\\), \\(\\gamma = \\Omega(1/D)\\) and arbitrary \\(\\epsilon\\) [10.1145/509907.510003].\n", "notes": []}, "zetterberg": {"short_name": "", "name": "Zetterberg code", "protection": "Correct at least all weight-2 errors.", "features": {"transversal_gates": "", "decoders": ["Kallquist first described an algebraic decoding theorem [P. Kallquist, \"Decoding of Zetterberg codes,\" in Proc. Fourth Joint Swedish-Soviet Workshop on Inform. Theory, Gotland, Sweden, Aug. 27-Sept. 1, 1989, p. 305-300]. A faster version was later provided in Ref. [10.1109/18.149509] and further modified in Ref. [10.1109/LCOMM.2010.07.100784]."], "rate": "The rate is given by \\(1-\\frac{4s}{n}\\), which is asymptotically good, with a minimum distance of 5.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": ["Code used to provide better protection of data transmission with its double error correcting capacity [10.1109/TIT.1961.1057659]."], "code_id": "zetterberg", "logical": "bits", "introduced": "[10.1109/TIT.1962.1057682]", "description": "Family of binary cyclic \\([2^{2s}+1,2^{2s}-4s+1]\\) codes with distance \\(d>5\\) generated by the minimal polynomial \\(g_s(x)\\) of \\(\\alpha\\) over \\(GF(2)\\), where \\(\\alpha\\) is a primitive \\(n\\)th root of unity in the field \\(GF(2^{4s})\\). They are quasi-perfect codes and are one of the best known families of double-error correcting binary linear codes", "notes": []}, "bits_into_bits": {"short_name": "", "name": "Binary code", "protection": "A binary code \\(C\\) corrects \\(t\\) errors if\n\\begin{align}\n  \\forall x \\in C~,~D(x,x+y) < D(x' , x+y)\n\\end{align}\nfor all codewords \\(x' \\neq x\\) and all \\(y\\) such that \\(|y|=t\\), where \\(D\\) is the Hamming distance and \\(|y| = D(y,0) \\). A code corrects \\(t\\) errors if and only if \\(d \\geq 2t+1\\), i.e., a code corrects errors on \\(t \\leq \\left\\lfloor (d-1)/2 \\right\\rfloor\\) coordinates. In addition, a code detects errors on up to \\(d-1\\) coordinates, and corrects erasure errors on up to \\(d-1\\) coordinates.\n", "features": {"transversal_gates": "", "decoders": ["For few-bit codes (\\(n\\) is small), decoding can be based on a lookup table. For infinite code families, the size of such a table scales exponentially with \\(n\\), so approximate decoding algorithms scaling polynomially with \\(n\\) have to be used. The decoder determining the most likely error given a noise channel is called the maximum-likelihood decoder.", "Given a received string \\(x\\) and an error bound \\(e\\), a list decoder returns a list of all codewords that are at most \\(e\\) from \\(x\\) in Hamming distance. The number of codewords in a neighborhood of \\(x\\) has to be polynomial in \\(n\\) in order for this decoder to run in time polynomial in \\(n\\)."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "bits", "realizations": [], "code_id": "bits_into_bits", "logical": "bits", "introduced": "", "description": "Encodes \\(K\\) states (codewords) in \\(n\\) binary coordinates and has distance \\(d\\). Usually denoted as \\((n,K,d)\\). The distance is the minimum Hamming distance between a pair of distinct codewords.", "notes": []}, "oecc": {"short_name": "Subsystem QECC", "name": "Subsystem quantum error-correcting code", "protection": "Necessary and sufficient [quant-ph/0506069] error-correction conditions are, for all errors \\(E_a,E_b\\) in an error set \\(\\cal{E}\\),\n\\begin{align}\nP E^{\\dagger}_a E_b P = I_{\\mathsf{A}} \\otimes g_{ab}^{\\mathsf{B}}\n\\end{align}\nwhere \\(P\\) is a projector onto the codespace \\(\\mathsf{C}\\), and \\(g_{ab}^{\\mathsf{B}}\\) is an arbitrary operator on the gauge subsystem.\n", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "oecc", "logical": null, "introduced": "[quant-ph/0412076,quant-ph/0504189]", "description": "A subsystem code, also known as an operator QECC or gauge QECC, encodes information in a subsystem \\(\\mathsf{A}\\) of the code space \\(\\mathsf{C}\\), which is part of the system Hilbert space \\(\\mathsf{H}\\), as\n\\begin{align}\n\\mathsf{H}=\\mathsf{C} \\oplus \\mathsf{C}^{\\perp} = \\mathsf{A} \\otimes \\mathsf{B} \\oplus \\mathsf{C}^{\\perp}~.\n\\end{align}\nFollowing an error, it is sufficient to revert back to the original state modulo a transformation on the auxiliary or gauge subsystem \\(\\mathsf{B}\\). The subsystem \\(\\mathsf{B}\\) therefore gives additional freedom to the error correction process, and is said to encode gauge qubits when its dimension is a power of two. While strictly speaking all operator QECCs are also ordinary QECCs, the attachment of a subsystem to a code allows for a wider variety of encoding procedures, fault-tolerant logical operations, and efficient error-correction protocols.\n", "notes": []}, "qecc_finite": {"short_name": "Finite QECC", "name": "Finite-dimensional quantum error-correcting code", "protection": "Denoting Hilbert spaces by the letter \\(\\mathsf{H}\\), a finite-dimensional quantum code \\((U,\\cal{E})\\) is a partial isometry \\(U:\\mathsf{H}_{K}\\to\\mathsf{H}_{N}\\) with a set of correctable errors \\({\\cal{E}}:\\mathsf{H}_N\\to\\mathsf{H}_M\\) with the following property: there exists a quantum operation \\({\\cal{D}}:\\mathsf{H}_M\\to \\mathsf{H}_K\\) such that for all \\(E\\in\\cal{E}\\) and states \\(|\\psi\\rangle\\in\\mathsf{H}_{K}\\),\n\\begin{align}\n{\\cal D}(EU|\\psi\\rangle\\langle\\psi|U^{\\dagger}E^{\\dagger})=c(E,|\\psi\\rangle)|\\psi\\rangle\\langle\\psi|\\end{align}\nfor some constant \\(c\\). A code is said to protect against or correct the errors \\(\\mathcal{E}\\).\n\nEquivalently, correction capability is determined by the quantum error-correction conditions [quant-ph/9604034,quant-ph/9604024]: for all \\(|\\psi\\rangle,|\\phi\\rangle\\in\\mathsf{H}_{N}\\) and all errors \\(E_a,E_b\\in{\\mathcal{E}}\\),\n\\begin{align}\n  \\langle \\psi | E^{\\dagger}_a E_b |\\phi \\rangle = C_{ab} \\langle \\psi | \\phi \\rangle~,\n\\end{align}\nwhere the coefficients \\(C_{ab}\\) do not depend on \\(|\\psi\\rangle\\) or \\(|\\phi\\rangle\\). A code that satisfies these conditions approximately, i.e., up to some small quantifiable error, is called an approximate error-correcting code<code:approximate_qecc>.\n\nA code is degenerate with respect to a noise model if different errors map code states to the same error subspace. For a linearly independent error set \\(\\cal{E}\\), degeneracy is equivalent to \\(\\text{rank}(C_{ab}) < |\\cal{E}|\\).\n", "features": {"transversal_gates": "", "decoders": ["The operation \\(\\cal{D}\\) in the definition of this code is called the decoder. However, the term decoder can sometimes be used for the inverse of an encoder, which does not correct errors.", "Quantum machine-learning based decoders such as quantum convolutional neural networks [1810.03787] and quantum autoencoders [2202.00555]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Universal gate set cannot be transversal for any code that detects single-qubit errors due to Eastin-Knill theorem [0811.4262]."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "qecc_finite", "logical": null, "introduced": "", "description": "Encodes quantum information in a \\(K\\)-dimensional (logical) subspace of an \\(N\\)-dimensional (physical) Hilbert space such that it is possible to recover said information from errors. The logical subspace is spanned by a basis comprised of code basis states or codewords.", "notes": []}, "qecc": {"short_name": "QECC", "logical": null, "introduced": "", "description": "Encodes quantum information in a (logical) subspace of a (physical) Hilbert space such that it is possible to recover said information from errors that act as linear maps on the physical space. The logical subspace is spanned by a basis comprised of code basis states or codewords. Codewords may not be normalizable if the physical Hilbert space in infinite, so approximate versions have to be constructed in practice.", "name": "Quantum error-correcting code (QECC)", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "Denoting Hilbert spaces by the letter \\(\\mathsf{H}\\), a quantum code \\((U,\\cal{E})\\) is a partial isometry \\(U:\\mathsf{H}_{\\text{logical}}\\to\\mathsf{H}_{\\text{physical}}\\) with a set of correctable errors \\(\\cal{E}\\) with the following property: there exists a quantum operation \\(\\cal{D}\\) such that for all \\(E\\in\\cal{E}\\) and states \\(|\\psi\\rangle\\in\\mathsf{H}_{\\text{logical}}\\),\n\\begin{align}\n{\\cal D} (EU|\\psi\\rangle\\langle\\psi|U^{\\dagger}E^{\\dagger})=c(E,|\\psi\\rangle)|\\psi\\rangle\\langle\\psi|\n\\end{align}\nfor some constant \\(c\\).\n\nEquivalently, correction capability is determined by of the quantum error-correction conditions [quant-ph/9604034,quant-ph/9604024], which may admit infinite terms due to non-normalizability of ideal code states. A code that satisfies these conditions approximately, i.e., up to some small quantifiable error, is called an approximate code<code:approximate_qecc>.\n", "physical": null, "notes": [], "realizations": [], "code_id": "qecc"}, "eaqecc": {"short_name": "EAQECC", "logical": null, "introduced": "[quant-ph/0608027,quant-ph/0610092]", "description": "QECC whose encoding and decoding utilizes pre-shared entanglement between sender and receiver.", "name": "Entanglement-assisted (EA) QECC", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "eaqecc"}, "eaoecc": {"short_name": "EAOQECC", "logical": null, "introduced": "[0708.2142,10.1109/ISIT.2007.4557160]", "description": "Subsystem QECC whose encoding and decoding utilizes pre-shared entanglement between sender and receiver.", "name": "Entanglement-assisted (EA) operator QECC", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "eaoecc"}, "quantum_convolutional": {"short_name": "", "name": "Quantum convolutional code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_convolutional", "logical": "qubits", "introduced": "[quant-ph/0511016]", "description": "Stub.", "notes": []}, "color": {"short_name": "", "name": "Color code", "protection": "As with the surface code, the code distance depends on the specific kind of lattice used to define the code. More precisely, the distance depends on the homology of logical string operators [1311.0277].", "features": {"transversal_gates": "Transversal CNOT can be implemented via braiding [0806.4827]. Universal transversal gates can be achieved in 3D color code using gauge fixing [1311.0879], lattice surgery [1407.5103], or code deformation [10.1088/1367-2630/13/4/043005,0806.4827].", "decoders": ["Projection decoder [10.7907/059V-MG69].", "Matching decoder gives low logical failure rate [2108.11395].", "Integer-program-based decoder [1402.3037].", "Restriction decoder [10.1088/1367-2630/ab68fd].", "Cellular-automaton decoder for the \\(XYZ\\) color code [2203.16534]."], "rate": "For general 2D manifolds, \\(kd^2 \\leq c(\\log k)^2 n\\) for some constant \\(c\\) [1301.6588], meaning that color codes with finite rate can only achieve an asymptotic minimum distance that is logarithmic in \\(n\\).", "code_capacity_threshold": ["\\(\\geq 6\\%\\) threshold with rescaling-based decoder [2112.09584]."], "fault_tolerance": ["Clifford gates can be performed fault-tolerantly on a suitable 2D lattice [quant-ph/0605138].", "Syndrome measurement [1407.5103].", "Steane's ancilla-coupled measurement method [1407.5103]"], "general_gates": ["Magic-state distillation protocols [10.7907/059V-MG69].", "Non-clifford gates can be implemented via code switching [10.7907/059V-MG69].", "Lattice surgery scheme for 2D layout yields lower resource overhead when compared to analogous surface code scheme [2201.07806]."], "magic_scaling_exponent": "", "threshold": ["\\(\\geq 6.25\\%\\) threshold for 2D color codes with error-free syndrome extraction, and \\(0.1\\%\\) with faulty syndrome extraction [0907.1708].", "\\(0.46\\%\\) for 3D codes with clustering decoder [1708.07131].", "\\(1.9\\%\\) for 1D string-like logical operators and \\(27.6\\%\\) for 2D sheet-like operators for 3D codes with noise models using optimal decoding and perfect measurements [1708.07131].", "\\(0.31\\%\\) noise threshold error rate for gauge code using clustering decoder [1503.08217].", "\\(0.143\\%\\) with depolarising circuit-level noise using perfect-matching decoder [1407.5103].", "\\(>0\\%\\) threshold with sweep decoder [10.7907/059V-MG69]."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "color", "logical": "qubits", "introduced": "[quant-ph/0605138]", "description": "A family of abelian topological CSS stabilizer<code:css> codes defined on a \\(D\\)-dimensional lattice which satisfies two properties: The lattice is (1) a homogeneous simplicial \\(D\\)-complex obtained as a triangulation of the interior of a \\(D\\)-simplex and (2) is \\(D+1\\)-colorable. Qubits are placed on the \\(D\\)-simplices and generators are supported on suitable simplices [10.7907/059V-MG69]. For 2-dimensional color code, the lattice must be such that it is 3-valent and has 3-colorable faces, such as a honeycomb lattice. The qubits are placed on the vertices and two stabilizer generators are placed on each face [1311.0277].", "notes": []}, "quantum_divisible": {"short_name": "", "name": "Quantum divisible code", "protection": "Distance \\(d\\) is upper bounded by the two classical codes that determine the CSS code.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["The \\(T\\) gate realized by concatenating members of the \\([[2m \u2212 1, 1 \\leq k \\leq 1 + \\sum_{i=1}^{m-4}(m \u2212 i), 3]]\\) quantum divisible code family with either the five-qubit \\([[5,1,3]]\\) or Steane \\([[7,1,3]]\\) code is fault-tolerant and does not require magic-state distillation. The gate is performed on the inner five-qubit/Steane code and does require encoding and decoding algorithms to pass between the inner and outer codes."], "general_gates": ["The \\([[2m \u2212 1, 1 \\leq k \\leq 1 + \\sum_{i=1}^{m-4}(m \u2212 i), 3]]\\) quantum divisible code family can serve as outer codes of either the five-qubit \\([[5,1,3]]\\) or Steane \\([[7,1,3]]\\) code to realize a \\(T\\) gate on the inner code. For example, when \\(m=5\\) (\\(m=6\\)), the resulting \\([[31,5,3]]\\) (\\([[63,7,3]]\\)) code yields the \\(T\\) gate on the inner five-qubit (Steane) code."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_divisible", "logical": "qubits", "introduced": "[2204.13176]", "description": "Consider a CSS code whose \\(Z\\)-stabilizers are determined by the dual of a classical \\([n, k_1]\\) linear binary code \\(C_1\\), and whose \\(X\\)-stabilizers are determined by a classical \\([n, k_2]\\) binary code \\(C_2 \\subset C_1\\). This code is quantum divisible if all weights in \\(C_2\\) share a common divisor \\(\\Delta > 1\\), and all weights in each coset of \\(C_2\\) in \\(C_1\\) are congruent to \\(\\Delta\\).\n\nFor example, if \\(C_2\\) is the first-order Reed-Muller code, and \\(C_1/ C_2\\) consists of quadratic forms with a bounded rank, then \\([[n = 2m \u2212 1, 1 \\leq k \\leq 1 + \\sum_{i=1}^{m-4}(m \u2212 i), d = 3]]\\) is a family of quantum divisible codes.\n", "notes": []}, "haar_random": {"short_name": "", "name": "Haar-random code", "protection": "Random code achieve the capacity of any noisy quantum channel.", "features": {"transversal_gates": "", "decoders": [], "rate": "The rate of the code is equal to the coherent information of the channel (i.e. the quantum channel capacity).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "haar_random", "logical": "qubits", "introduced": "[Peter W. Shor, The quantum channel capacity and coherent information <https://github.com/errorcorrectionzoo/eczoo_data/files/7808154/shor.pdf>, 2002 (obtained from the MSRI Workshop on Quantum Computation website).,quant-ph/0702005,quant-ph/0304127,0712.2558]", "description": "Haar-random codewords are generated in a process involving averaging over unitary operations distributed accoding to the Haar measure. Haar-random codes are used to prove statements about the capacity of a quantum channel to transmit quantum information [1106.1445], but encoding and decoding in such \\(n\\)-qubit codes quickly becomes impractical as \\(n\\to\\infty\\).\n\nThere are different approaches to create Haar-random codewords. In the construction of Ref. [quant-ph/0702005], codewords are produced by performing a unitarily covariant projective measurement on a typical subspace of a tensor-power state. Reference [quant-ph/0702005] showed that the capacity of a noisy quantum channel can be achieved by encoding in such Haar-random codes. In particular, Haar-random codes achieve perfect transmission in the \\(n\\to\\infty\\)) limit by proving that the encoded information becomes decoupled from the environment. This is a necessary and sufficient condition for successful decoding since measurements of the environment should never reveal the encoded information [quant-ph/9604022].\n\nIntuitively, coupling with the environment can be decreased by projecting the system onto a random codespace. The more qubits that are randomly discarded, the more the codespace is decoupled from the environment. One may ask what is the least amount of qubits that can be discarded, i.e. the largest remaining codespace, that still achieves decoupling. It can be shown through the decoupling inequality [quant-ph/0512247] that the largest possible dimension of the random codespace that achieves arbitrarily large decoupling is exponential in the coherent information of the channel. Therefore, there exist codes that can transmit information with rate equal to the coherent information. Furthermore, these codes can be constructed with high probability by performing a Haar-random isometry embedding a \\(k\\)-dimensional logical subspace into an \\(n\\)-dimensional physical space, where \\(k/n\\) is equal to the coherent information. Such an isometry can be produced by QR decomposition of a Gaussian random matrix [10.1137/0717034].\n", "notes": []}, "eastab": {"short_name": "EA stabilizer", "logical": null, "introduced": "[quant-ph/0608027,quant-ph/0610092]", "description": "Constructed using a variation of the stabilizer formalism designed to utilize pre-shared entanglement between sender and receiver.", "name": "Entanglement-assisted (EA) stabilizer code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "eastab"}, "xs_stabilizer": {"short_name": "", "name": "XS stabilizer code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "xs_stabilizer", "logical": "qubits", "introduced": "[1404.5327]", "description": "A type of stabilizer code where stabilizer generators are elements of the group \\( \\{\\alpha I, X, \\sqrt{Z}]\\}^{\\otimes n} \\), with \\( \\sqrt{Z} = \\text{diag} (1, i)\\). The codespace is a joint \\(+1\\) eigenspace of a set of stabilizer generators, which need not commute to define a valid codespace.\n", "notes": []}, "eth": {"short_name": "ETH", "name": "Eigenstate thermalization hypothesis (ETH) code", "protection": "Approximately protects against erasure errors at known locations. Translation invariance alone is sufficient for good approximate error-correcting properties in a many-body spectrum, including in integrable models [1710.04631]. The ETH code generated from the spectrum of the translation-invariant 1D Heisenberg spin chain [1710.04631] has recovery infidelity (against the erasure of a constant number of sites) scale as \\(\\epsilon_\\text{worst}=O(1/n)\\) [1902.07714].", "features": {"transversal_gates": "", "decoders": ["An explicit universal recovery channel for the ETH code is given in [1906.03669]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "eth", "logical": "qubits", "introduced": "[1710.04631]", "description": "Also called a thermodynamic code [1902.07714]. An \\(n\\)-qubit approximate code whose codespace is formed by eigenstates of a translationally-invariant quantum many-body system which satisfies the Eigenstate Thermalization Hypothesis (ETH). ETH ensures that codewords cannot be locally distinguished in the thermodynamic limit. Relevant many-body systems include 1D non-interacting spin chains, Motzkin chains, or Heisenberg models.\n\nETH requires that for ordered energy eigenstates \\(|E_l\\rangle\\) and any local observable \\(O\\),\n\\begin{align}\n|\\langle E_l|O|E_l\\rangle-\\langle E_{l+1}|O|E_{l+1}\\rangle|\\leq\\exp(-cn)\n\\end{align}\nfor a constant \\(c\\). This implies that energy eigenstates around some energy \\(\\bar E\\) are approximately locally indistinguishable from one another, as their reduced density matrices on any subsystem are both approximately thermal at energy \\(\\bar E\\). In this way, global information is protected from local measurements by the environment as \\(n\\to\\infty\\).\n", "notes": []}, "haah_cubic": {"short_name": "", "name": "Haah cubic code", "protection": "Cubic codes protect against simultaneous independent Pauli errors on different sites (not qubits, since there can be 2 qubits per site). Codes 0-4 are known to have distance \\(d \\ge L\\), meaning they can achieve macroscopic code distance as \\(L\\to\\infty\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["The encoding rate depends on the code implemented, but code 0 has been shown to have \\(k \\ge L\\) (on a periodic finite cubic lattice of side length \\(L\\). In general we expect the number of logical bits to scale as \\(k \\sim L\\)."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "haah_cubic", "logical": "qubits", "introduced": "[1101.1962]", "description": "Class of stabilizer codes on a length-\\(L\\) cubic lattice with one or two qubits per site. We also require that the stabilizer group \\(\\mathsf{S}\\) is translation invariant and generated by two types of operators with support on a cube. In the non-CSS case, these two are related by spatial inversion. For CSS codes, we require that the product of all corner operators is the identity. We lastly require that there are no non-trival ''string operators'', meaning that single-site operators are a phase, and any period one logical operator \\(l \\in \\mathsf{S}^{\\perp}\\) is just a phase. Haah showed in his original construction that there is exactly one non-CSS code of this form, and 17 CSS codes [1101.1962]. The non-CSS code is labeled code 0, and the rest are numbered from 1 - 17. Codes 1-4, 7, 8, and 10 do not have string logical operators [1101.1962,1908.08049].\n\nStraightforward generalizations of the above codes exist to modular qudits, oscillators, and rotors [J. Haah, Two generalizations of the cubic code model, KITP Conference: Frontiers of Quantum Information Physics, UCSB, Santa Barbara, CA. <https://online.kitp.ucsb.edu/online/qinfo_c17/haah/>,1709.04460].\n", "notes": []}, "t-designs": {"short_name": "", "name": "Local Haar-random circuit code", "protection": "In a 1D geometry, the code approximately detects any error with support on a segment of length \\(\\leq n/4\\), with deviations exponentially suppressed in \\(n\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Random local circuit of depth proportional to \\(n^{\\alpha}\\), with \\(\\alpha\\) depending on system geometry."]}, "physical": "qubits", "realizations": [], "code_id": "t-designs", "logical": "qubits", "introduced": "[10.1007/s00220-016-2706-8]", "description": "An \\(n\\)-qubit code whose codewords are a pair of approximately locally indistinguishable states produced by starting with any two orthogonal \\(n\\)-qubit states and acting with a random unitary circuit of depth polynomial in \\(n\\). Two states are locally indistinguishable if they cannot be distinguished by local measurements. A single layer of the encoding circuit is composed of about \\(n/2\\) two-qubit nearest-neighbor gates run in parallel, with each gate drawn randomly from the Haar distribution on two-qubit unitaries.\nThe above circuit elements act on nearest-neighbor qubits arranged in a line, i.e., a one-dimensional geometry (\\(D=1\\), while codes for higher-dimensional geometries require \\(O(n^{1/D})\\)-depth circuits [10.1007/s00220-016-2706-8]. Follow-up work [2010.09775] revealed that optimal code properties require only \\(O(\\sqrt{n})\\)-depth circuits for that case, and \\(O(\\sqrt{n})\\)-depth circuits for a two-dimensional square-lattice geometry.", "notes": []}, "qubits_into_qubits": {"short_name": "", "name": "Qubit code", "protection": "A convenient and often considered error set is the Pauli error or Pauli string basis. For a single qubit, this set consists of products of powers of the Pauli matrices\n\\begin{align}\n  X=\\begin{pmatrix}0 & 1\\\\\n  1 & 0\n  \\end{pmatrix}\\,\\,\\text{ and }\\,\\,Z=\\begin{pmatrix}1 & 0\\\\\n  0 & -1\n  \\end{pmatrix}~.\n\\end{align}\nFor multiple qubits, error set elements are tensor products of elements of the single-qubit error set.\n\nThe Pauli error set is a unitary and Hermitian basis for linear operators on the multi-qubit Hilbert space that is orthonormal under the Hilbert-Schmidt inner product; it is a prototypical nice error basis [quant-ph/9608048]. The distance associated with this set is often the minimum weight of a Pauli string that implements a nontrivial logical operation in the code. The minimum weight of a Pauli error that has a non-zero expectation value for some code basis state is called the diagonal distance [2107.11286]. Codes whose distance is greater than the diagonal distance are degenerate.\n", "features": {"transversal_gates": "", "decoders": ["For few-qubit codes (\\(n\\) is small), decoding can be based on a lookup table. For infinite code families, the size of such a table scales exponentially with \\(n\\), so approximate decoding algorithms scaling polynomially with \\(n\\) have to be used. The decoder determining the most likely error given a noise channel is called the maximum-likelihood decoder."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "qubits_into_qubits", "logical": "qubits", "introduced": "", "description": "Encodes \\(K\\)-dimensional Hilbert space into a \\(2^n\\)-dimensional (i.e., \\(n\\)-qubit) Hilbert space. Usually denoted as \\(((n,K))\\) or \\(((n,K,d))\\), where \\(d\\) is the code''s distance.\n", "notes": ["There is a relations between one-way entanglement distillation protocols and QECCs [quant-ph/9604024]."]}, "matching": {"short_name": "", "name": "Matching code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "matching", "logical": "qubits", "introduced": "[1501.07779]", "description": "Stub.", "notes": []}, "qubit_stabilizer": {"short_name": "", "name": "Qubit stabilizer code", "protection": "Detects errors on up to \\(d-1\\) qubits, and corrects erasure errors on up to \\(d-1\\) qubits. More generally, define the normalizer \\(\\mathsf{N(S)}\\) of \\(\\mathsf{S}\\) to be the set of all operators that commute with all \\(S\\in\\mathsf{S}\\). A stabilizer code can correct a Pauli error set \\({\\mathcal{E}}\\) if and only if \\(E^\\dagger F \\notin \\mathsf{N(S)}\\setminus \\mathsf{S}\\) for all \\(E,F \\in {\\mathcal{E}}\\).\n\nA stabilizer code is geometrically local if the support of the stabilizer generators is bounded by a ball of size independent of \\(n\\). There is an upper bound of \\(d \\leq O(L^{D-1})\\) on the distance [0810.1983] of geometrically local stabilizer codes arranged in a \\(D\\)-dimensional lattice of length \\(L\\) with \\(n=L^D\\).\n", "features": {"transversal_gates": "", "decoders": ["The structure of stabilizer codes allows for syndrome-based decoding, where errors are corrected based on the results of stabilizer measurements (syndromes). Finding an optimal decoder is \\(\\#P\\)-hard [1310.3235].", "Trellis decoder, which builds a compact representation of the algebraic structure of the normalizer \\(\\mathsf{N(S)}\\) [quant-ph/0512041]."], "rate": "", "code_capacity_threshold": ["For correlated Pauli noise, bounds on code capacity thresholds for any stabilizer codes can be obtained by mapping the effect of noise on the code to a statistical mechanical model [quant-ph/0110143,1208.2317,1311.7688,1809.10704]."], "fault_tolerance": ["With pieceable fault-tolerance, any nondegenerate stabilizer code with a complete set of fault-tolerant single-qubit Clifford gates has a universal set of non-transversal fault-tolerant gates [1603.03948].", "Fault-tolerant error correction can be done using Shor error correction [quant-ph/9605011], which is based on repeated measurements, or Knill error correction, which is based on teleportation [quant-ph/0410199,quant-ph/0312190]."], "general_gates": ["Logical gates implemented via constant-depth quantum circuits of \\(D\\)-dimensional geometrically local stabilizer codes lie in the \\(D\\)th level of the Clifford hierarchy [1206.1609].", "With pieceable fault-tolerance, any nondegenerate stabilizer code with a complete set of fault-tolerant single-qubit Clifford gates has a universal set of non-transversal fault-tolerant gates [1603.03948]."], "magic_scaling_exponent": "", "threshold": ["Computational thresholds against stochastic local noise can be achieved through repeated use of concatenatenation, and can rely on the same small code in every level [quant-ph/9702058,quant-ph/9906129,quant-ph/9705031,quant-ph/0504218]. The resulting code is highly degenerate, with all but an exponentially small fraction of generators having small weights. Circuit and measurement designs have to take case of the few stabilizer generators with large weights in order to be fault tolerant."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "qubit_stabilizer", "logical": "qubits", "introduced": "[quant-ph/9605005,quant-ph/9705052]", "description": "Also called a Pauli stabilizer code. An \\(((n,2^k,d))\\) qubit stabilizer code is denoted as \\([[n,k]]\\) or \\([[n,k,d]]\\), where \\(d\\) is the code's distance. Logical subspace is the joint eigenspace of commuting Pauli operators forming the code's stabilizer group \\(\\mathsf{S}\\). Traditionally, the logical subspace is the joint \\(+1\\) eigenspace of a set of \\(2^{n-k}\\) commuting Pauli operators which do not contain \\(-I\\). The distance is the minimum weight of a Pauli string that implements a nontrivial logical operation in the code.\n\nEach stabilizer code can be represented by a \\((n-k) \\times 2n\\) check matrix (a.k.a. stabilizer generator matrix) \\(H=(A|B)\\), where each row \\((a|b)\\) is the binary symplectic representation of an element from a set of generating elements of the stabilizer group. The check matrix can be brought into standard form via Gaussian elimination [10.1017/CBO9780511976667].\n", "notes": ["Tables of bounds and examples of stabilizer codes for various \\(n\\) and \\(k\\), based on algorithms developed in Ref. [10.1007/978-3-540-37634-7_13], are maintained by M. Grassl at this website <http://codetables.markus-grassl.de/>."]}, "quantum_reed_muller": {"short_name": "", "name": "Quantum Reed-Muller code", "protection": "Detects errors on \\(d-1\\) qubits, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits.", "features": {"transversal_gates": "", "decoders": [], "rate": "\\(\\frac{k}{n}\\), where \\(k = 2^r - {r \\choose t} + 2 \\sum_{i=0}^{t-1} {r \\choose i}\\). Additionally, CSS codes formed from binary Reed-Muller codes achieve channel capacity on erasure channels [1601.04689].", "code_capacity_threshold": [], "fault_tolerance": ["Gate switching protocol for universal computation [1403.2734]."], "general_gates": ["Magic state distillation in all prime dimensions [10.1103/PhysRevX.2.041021]"], "magic_scaling_exponent": "", "threshold": ["Between \\(10^{-3}\\) and \\(10^{-6}\\) for depolarizing noise (assuming ideal decoders), see [10.1088/2058-9565/abb027]"], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_reed_muller", "logical": "qubits", "introduced": "[quant-ph/9608026]", "description": "A CSS code formed from a classical Reed-Muller code in which polynomials over finite fields encode data. This is done by transforming these polynomials into the stabilizer generator matrices.", "notes": []}, "double_semion": {"short_name": "", "name": "Double-semion code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "double_semion", "logical": "qudits", "introduced": "[cond-mat/0404617]", "description": "Stub.", "notes": []}, "movassagh_ouyang": {"short_name": "", "name": "Movassagh-Ouyang Hamiltonian code", "protection": "Let \\(C \\subset \\{0,1,\\dots,q-1\\}^n\\) be a classical code with distance \\(d_x\\). Let \\(d_z\\) satisfy \\(q^n > 2 V_q(d_z-1) -1\\), where \\(V_q(r)\\) is the volume of the \\(q\\)-ary Hamming ball of radius \\(r\\). Then the algorithm produces a quantum code with distance \\(d = \\text{min}(d_x,d_z)\\). Asymptotically, the distance scales linearly with \\(n\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "The rate depends on the classical code, but distance can scale linearly with \\(n\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "movassagh_ouyang", "logical": "qubits", "introduced": "[2012.01453]", "description": "This is a family of codes derived via an algorithm that takes as input any binary classical code and outputs a quantum code (note that this framework can be extended to \\(q\\)-ary codes). The algorithm is probabalistic but succeeds almost surely if the classical code is random. An explicit code construction does exist for linear distance codes encoding one logical qubit. For finite rate codes, there is no rigorous proof that the construction algorithm succeeds, and approximate constructions are described instead.\n\nThis family strictly generalizes CSS codes (because CSS codes come only from linear or self orthogonal classical codes). These codes can be shown to be realized as a subspace of the ground space of a (geometrically) local Hamiltonian.\n", "notes": []}, "floquet": {"short_name": "", "name": "Floquet code", "protection": "Protects against single-qubit Pauli noise and check operator measurement errors.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "floquet", "logical": "qubits", "introduced": "[2107.02194]", "description": "Dynamically-generated stabilizer-based code whose logical qubits are generated through a particular sequence of measurements such that the number of logical qubits is larger than when the code is viewed as a static subsystem stabilizer code. The code space is the \\(+1\\) eigenspace of the instantaneous stabilizer group (ISG). The ISG specifies the state of the system as a Pauli stabilizer state at a particular round of measurement, and it evolves into a (potentially) different ISG depending on the check operators measured. As opposed to subsystem codes, only specific measurement sequences maintain the codespace.\n", "notes": []}, "quantum_hamming": {"short_name": "", "name": "\\([[2^r, 2^r-r-2, 3]]\\) quantum Hamming code", "protection": "Protects against any single qubit error.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_hamming", "logical": "qubits", "introduced": "[quant-ph/9604038]", "description": "A family of stabilizer codes of distance \\(3\\) that asymptotically saturate quantum Hamming bound.", "notes": []}, "nonlocal_lowdepth": {"short_name": "", "name": "Low-depth random Clifford-circuit code", "protection": "Creates a random \\([[n,k,d]]\\) stabilizer code that detects errors on \\(d-1\\) qubits, and corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "nonlocal_lowdepth", "logical": "qubits", "introduced": "[1312.7646]", "description": "An encoder for an \\([[n,k]]\\) quantum error correcting code, is an \\(n\\)-qubit unitary transformation that takes a \\(k\\)-qubit state as input (with \\(k\\leq n\\), and the remaining \\(n-k\\) qubits initialized to \\(|0\\rangle^{\\otimes n-k}\\) ) to give a corresponding state in the codespace as the output. An n-qubit quantum circuit with random 2-qubit Clifford gates can act as an encoder into a code with distance \\(d\\) with high probability, with a size (i.e. number of gates in the circuit) at most \\(O(n^2 log n)\\)). Noting that two gates acting on disjoint qubits could in fact be executed simultaneously, this is equivalent to the depth (number of time steps in the circuit) being at most \\(O(log^3 n)\\).", "notes": []}, "rbh": {"short_name": "", "logical": null, "introduced": "[1805.01474]", "description": "Stub. (see Sec. III E of [1805.01474])\n", "name": "Raussendorf-Bravyi-Harrington (RBH) code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "The symmetric energy barrier grows linearly with the lattice width. When the system is coupled locally to a thermal bath respecting the symmetry and below a critical temperature, the memory time grows expoenetially with the lattice width.\n", "physical": null, "notes": [], "realizations": [], "code_id": "rbh"}, "gnu_permutation_invariant": {"short_name": "GNU", "name": "GNU permutation-invariant code", "protection": "Depends on the family. One family which is completely symmetrized versions of Bacon-Shor codes (parameterized by \\(t\\)) protects against arbitrary weight-\\(t\\) qubit errors. Additionally, codes with large enough length \\((t+1)(3t+1)+t\\) can approximately correct \\(t\\) spontaneous decay errors.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "gnu_permutation_invariant", "logical": "qubits", "introduced": "[1302.3247]", "description": "Can be expressed in terms of Dicke states where the logical states are\n\\begin{align}\n|\\overline{\\pm}\\rangle = \\sum_{\\ell=0}^{n} \\frac{(\\pm 1)^\\ell}{\\sqrt{2^n}} \\sqrt{n \\choose \\ell} |D^m_{g \\ell}\\rangle~.\n\\end{align}\nHere, \\(m\\) is the number of particles used for encoding \\(1\\) qubit, and \\(g, n \\leq m\\) are arbitrary positive integers. The state \\(|D^m_w\\rangle\\) is a Dicke state -- a normalized permutation-invariant state on \\(m\\) qubits with \\(w\\) excitations, i.e., a normalized sum over all basis elements with \\(w\\) ones and \\(m - w\\) zeroes.\n\nA qudit extension of such codes, based on a correspondence with binomial codes, exists [1708.05010].\n", "notes": []}, "quantum_hamming_css": {"short_name": "", "name": "\\([[2^r-1, 2^r-2r-1, 3]]\\) Hamming-based CSS code", "protection": "Protects against any single qubit error.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Syndrome measurement can be done with two ancillary flag qubits [1705.02329]."], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_hamming_css", "logical": "qubits", "introduced": "", "description": "A Hamming-based CSS code is a CCS code constructed with a classical Hamming code \\([2^r-1,2^r-1-r,3]=C_X=C_Z\\).", "notes": []}, "quantum_h": {"short_name": "", "name": "H code", "protection": "Detects weight-1 Pauli errors. The \\(r\\)-level contatenated H code detects weight Pauli errors up to weight \\(2^r-1\\).", "features": {"transversal_gates": "Hadamard and \\(TXT^{\\dagger}\\) gates, with the latter Clifford-equivalent to Hadamard, and where \\(T=\\exp(i\\pi(I-Z)/8)\\) is the \\(\\pi/8\\)-rotation gate.", "decoders": [], "rate": "The H codes are dense, i.e., the rate \\(\\frac{k}{k+4}\\rightarrow 1\\) as \\(k \\rightarrow \\infty\\). The distance is 2. However an \\(r\\)-level concatenation of H codes gives a distance of \\(2^r\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["The H codes can be used for high-quality and high-efficiency magic-state distillation [1210.3388]. Their associated multi-level magic states protocols have an efficency advantage over the 10-to-2 and 15-to-1 protocals for output error below \\(10^{-7}\\)."], "magic_scaling_exponent": "A total of \\(r\\) rounds of magic-state distillation yields a magic-state scaling exponent \\(\\gamma\\to 1\\) as \\(k,r\\rightarrow \\infty\\). This matches a conjectured bound for \\(\\gamma\\) [1209.2426].", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_h", "logical": "qubits", "introduced": "[1210.3388]", "description": "Family of \\([[k+4,k,2]]\\) CSS codes with transversal Hadmard gates; relevant to magic state distillation. Four stablizer generators are \\(X_1X_2X_3X_4\\), \\(Z_1Z_2Z_3Z_4\\), \\(X_1X_2X_5X_6...X_{k+4}\\), and \\(Z_1Z_2Z_5Z_6...Z_{k+4}\\).", "notes": []}, "cws": {"short_name": "CWS", "name": "Codeword stabilized (CWS) code", "protection": "Code distance \\(\\mathcal{Q} = ( \\mathcal{G},\\mathcal{C}) \\) is upper bounded by the distance of the classical code \\(\\mathcal{C} \\). The diagonal distance<code:qubits_into_qubits> is upper bounded by \\(\\delta + 1\\), where \\(\\delta\\) is the minimum degree of \\(\\mathcal{G}\\). Computing the distance is generally NP-complete, and is NP-hard for non-degenerate codes [2203.04262].", "features": {"transversal_gates": "", "decoders": ["There is no known efficient algorithm to decode non-additive (non-stabilizer) CWS codes."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["If \\( \\mathcal{C} \\) has an efficient classical encoder, then so does the CWS code \\( \\mathcal{Q} = (\\mathcal{G},\\mathcal{C}) \\)."]}, "physical": "qubits", "realizations": [], "code_id": "cws", "logical": "qubits", "introduced": "[0708.1021]", "description": "This family of codes strictly generalizes stabilizer codes. They are usually denoted by \\( \\mathcal{Q} = (\\mathcal{G},\\mathcal{C}) \\) where \\(\\mathcal{G}\\) is a graph and \\(\\mathcal{C}\\) is a \\( (n,K,d) \\) binary classical code. From the graph we form the unique graph state (stabilizer state) \\( |G \\rangle \\). From the classical code we form Pauli \\(Z\\)-type operators \\( W_i = Z^{c_{i,1}} \\otimes \\cdots \\otimes Z^{c_{i,n}} \\), where \\(c_{i,j} \\) is the \\(j\\)-th bit of the \\(i\\)-th classical codeword. The CWS codewords are then \\( | i \\rangle =  W_i | G \\rangle \\).\n\nThere is an alternative description to the one above that is locally Clifford-equivalent. In particular, we can describe CWS codes as \\( \\mathcal{Q} = (S,\\mathcal{W})\\) where \\(S\\) is a stabilizer group and \\( \\mathcal{W} = \\{ w_\\ell \\}_{\\ell = 1}^K \\) is a family of \\(K\\) \\(n\\)-qubit Pauli strings. We then form CWS codeswords as \\( | i \\rangle = w_i | S \\rangle \\), where \\( | S \\rangle \\) is the (unique) stabilizer state of \\(S\\).\n", "notes": []}, "css": {"short_name": "CSS", "name": "Calderbank-Shor-Steane (CSS) stabilizer code", "protection": "Detects errors on \\(d-1\\) qubits, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits.\n\nUsing the relation to chain complexes, the number of encoded logical qubits is equal to the dimension of the first \\(\\mathbb{Z}_2\\)-homology of the chain complex, \\(H_1(\\partial, \\mathbb{Z}_2) = \\frac{\\text{Ker}(\\partial_1)}{\\text{Im}(\\partial_2)}\\). The distance of the CSS code is equal to the minimum of the combinatorial (\\(d-1\\))-systole of the cellulated \\(d\\)-dimensional manifold and its dual.\n", "features": {"transversal_gates": "", "decoders": ["Coherent decoders allow for measurement-free error correction [2109.00086]. One method is table/multi-control decoding [1002.1536], which scales exponentially with the number of ancillas used in syndrome measurement. Another method, the Ising-based decoder, utilizes the mapping of the effect of the noise to a statistical mechanical model [quant-ph/0110143,2002.11733] such that the decoding problem maps to preparation of the ground state of an Ising model."], "rate": "", "code_capacity_threshold": ["Bounds on code capacity thresholds for various noise models exist in terms of stabilizer generator weights [1208.2317,1412.6172]."], "fault_tolerance": ["Steane error correction [quant-ph/9611027]."], "general_gates": ["LDPC CSS code symmetries called \\(XZ\\)-dualities allow for fold-transversal gates, i.e., transversal gates followed by qubit permutations [2202.06647]."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Stabilizer measurement [1404.2495]."]}, "physical": "qubits", "realizations": [], "code_id": "css", "logical": "qubits", "introduced": "[quant-ph/9512032,10.1103/PhysRevLett.77.793,quant-ph/9601029]", "description": "An \\([[n,k,d]]\\) stabilizer code admitting a set of stabilizer generators that are either \\(Z\\)-type or \\(X\\)-type Pauli strings. The stabilizer generator matrix is of the form\n\\begin{align}\nH=\\begin{pmatrix}0 & H_{Z}\\\\\nH_{X} & 0\n\\end{pmatrix}\n\\label{eq:parity}\n\\end{align}\nsuch that the rows of the two blocks must be orthogonal\n\\begin{align}\nH_X H_Z^T=0~.\n\\label{eq:comm}\n\\end{align}\nThe above condition guarantees that the \\(X\\)-stabilizer generators, defined in the symplectic representation as rows of \\(H_X\\), commute with the \\(Z\\)-stabilizer generators associated with \\(H_Z\\).\n\nEncoding is based on two related binary linear codes<code:binary_linear>, an \\([n,k_X,d^\\prime_X]\\) code \\(C_X\\) and \\([n,k_Z,d^\\prime_Z]\\) code \\(C_Z\\), satisfying \\(C_X^\\perp \\subseteq C_Z\\). The resulting CSS code has \\(k=k_X+k_Z-n\\) logical qubits and distance \\(d\\geq\\min\\{d^\\prime_X,d^\\prime_Z\\}\\). The \\(H_X\\) (\\(H_Z\\)) block of \\(H\\) eq:parity is the parity-check matrix of the code \\(C_X\\) (\\(C_Z\\)). The requirement \\(C_X^\\perp \\subseteq C_Z\\) guarantees eq:comm.\nBasis states for the code are, for \\(\\gamma \\in C_X\\),\n\\begin{align}\n|\\gamma + C_Z^\\perp \\rangle = \\frac{1}{\\sqrt{|C_Z^\\perp|}} \\sum_{\\eta \\in C_Z^\\perp} |\\gamma + \\eta\\rangle.\n\\end{align}\n\nA CSS code has stabilizer weight \\(w\\) if the highest weight of any stabilizer generator is \\(w\\), i.e., any row of \\(H_X\\) and \\(H_Z\\) has weight at most \\(w\\). In the context of comparing weight as well as of determining distances for noise models biased toward \\(X\\)- or \\(Z\\)-type errors, an extended notation for CSS codes is \\([[n,k,(d_X,d_Z),w]]\\). The quantity \\(\\min\\{d_X,d_Z\\}\\) is often called the worst-case minimum distance.\n\nThere exists a many-to-one mapping from size three chain complexes to CSS codes [10.1070/RM1997v052n06ABEH002155,quant-ph/0605094,1311.0885,1802.01520] that allows one to extract code properties from topological features of the complexes. Codes constructed in this manner are sometimes called homological CSS codes, but they are equivalent to CSS codes. This mapping of codes to manifolds allows the application of structures from topology to error correction, yielding various QLDPC codes<code:generalized_homological_product> with favorable properties.\n\nA chain complex of size three is given by binary vector spaces \\(A_2\\), \\(A_1\\), \\(A_0\\) and binary matrices \\(\\partial_{i=1,2}\\) (called boundary operators) \\(A_i\\) to \\(A_{i-1}\\) that satisfy \\(\\partial_1 \\partial_2 = 0\\). Such a complex is typically denoted as\n\\begin{align}\nA_2 \\xrightarrow{\\partial_2} A_1 \\xrightarrow{\\partial_1} A_0~.\n\\label{eq:chain}\n\\end{align}\nOne constructs a CSS code by associating a physical qubit to every basis element of \\(A_1\\), and defining parity-check matrices \\(H_X=\\partial_1^T\\) and \\(H_Z=\\partial_2\\)). That way, the spaces \\(A_0\\) and \\(A_2\\) can be associated with \\(X\\)-type and \\(Z\\)-type Pauli operators, respectively, and boundary operators determine the Paulis making up the stabilizer generators. The requirement \\(\\partial_1 \\partial_2 = 0\\) guarantees that the \\(X\\)-stabilizer generators associated with \\(H_X\\) commute with the \\(Z\\)-stabilizer generators associated with \\(H_Z\\).\n\nUsually, the chain complex eq:chain used in the construction comes from the chain complex associated with a cellulation of a manifold. When the manifold is a two-dimensional surface, its entire chain is used. Higher-dimensional manifolds allow for longer chain complexes, and one can use the three largest non-trivial vector spaces in its chain.\n", "notes": ["Introduction to CSS-to-homology dictionary by M. Hastings <https://www.youtube.com/watch?v=SeLpWg_8qlc>.", "Using linear programming to solve a set of equations and inequalities on weight distribution of a classical self-orthogonal code \\(C=(n, 2^n-k)\\) and its dual, one can find a \\(C\\) such that the \\([[n,k,d]]\\) CSS code constructed using \\(C\\) and its dual would have rate and distance close to the Singleton bound [quant-ph/9608006].", "Original requirement of \\(C_X^\\perp \\subset C_Z\\) [quant-ph/9512032] has been relaxed to absorb hypergraph product<code:hypergraph_product> codes."]}, "xp_stabilizer": {"short_name": "", "name": "XP stabilizer code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "xp_stabilizer", "logical": "qubits", "introduced": "[2203.00103]", "description": "The XP Stabilizer formalism is a generalization of the XS and Pauli stabilizer formalisms, with stabilizer generators taken from the group \\( \\{\\omega I, X, P\\}^{\\otimes n} \\). Here, \\( \\omega \\) is a \\( 2N \\) root of unity, and \\( P = \\text{diag} ( 1, \\omega^2) \\). The codespace is a \\(+1\\) eigenspace of a set of XP stabilizer generators, which need not commute to define a valid codespace.\n\nXP stabilizer codes are classified into XP-regular and XP-non-regular, where the former can be mapped to a CSS code with similar logical operator structure.\n", "notes": []}, "quantum_parity": {"short_name": "", "name": "Quantum parity code (QPC)", "protection": "Has distance \\(d=\\min(m_1,m_2)\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": ["The \\([[m^2,1,m]]\\) codes for \\(m\\leq 7\\) have been realized in trapped-ion quantum devices [2104.01205].", "Non-determinisitic linear-optical encoding [quant-ph/0501184] whose success probability \\(P_{E}\\) is determined by the efficiency \\(\\eta\\) of the photonic encoding circuit. A threshold \\(\\eta > 0.82 \\) exists for the efficiency, above which \\(P_{E}\\to 1\\) as \\(m_1\\to\\infty\\) given particular \\(m_2\\).", "Studied in the context of error-corrected quantum repeaters [1310.5291]."], "code_id": "quantum_parity", "logical": "qubits", "introduced": "[quant-ph/0501184,quant-ph/0006088]", "description": "Also called a generalized Shor code [quant-ph/0610088]. A \\([[m_1 m_2,1,\\min(m_1,m_2)]]\\) CSS code family obtained from concatenating an \\(m_1\\)-qubit phase-flip repetition code with an \\(m_2\\)-qubit bit-flip repetition code. Logical codewords are\n\\begin{align}\n\\begin{split}\n|\\overline{0}\\rangle&=\\frac{1}{2^{m_2/2}}\\left(|0\\rangle^{\\otimes m_1}+|1\\rangle^{\\otimes m_1}\\right)^{\\otimes m_2}\\\\\n|\\overline{1}\\rangle&=\\frac{1}{2^{m_2/2}}\\left(|0\\rangle^{\\otimes m_1}-|1\\rangle^{\\otimes m_1}\\right)^{\\otimes m_2}~.\n\\end{split}\n\\end{align}\n", "notes": []}, "quantum_repetition": {"short_name": "", "name": "Quantum repetition code", "protection": "Bit-flip code detects bit-flip errors \\(X\\) on \\(\\left\\lfloor (n-1)/2\\right\\rfloor\\) qubits and does not detect any phase-flip errors \\(Z\\). Phase-flip code detects phase-flip errors \\(Z\\) on \\(\\left\\lfloor (n-1)/2\\right\\rfloor\\) qubits and does not detect any bit-flip errors \\(X\\). Because they protect against only one type of noise, both codes can be thought of as a classical \\([n,1,d]\\) repetition code with classical distance \\(d=\\left\\lfloor (n-1)/2\\right\\rfloor\\) embedded in a quantum system.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": ["Superconducting circuits: IBM 15-qubit device [1709.00990], Google Quantum AI Sycamore utilizing from 5 to 21 qubits [2102.06132].", "Semiconductor spin-qubit devices: 3-qubit devices at RIKEN [2201.08581] and Delft [2202.11530].", "Nitrogen-vacancy centers in diamond: 3-qubit device [10.1038/s42005-022-00875-6].", "Continuous error correction protocols have been implemented on a 3-qubit superconducting circuit device [2107.11398].", "Liquid-state NMR: 3-qubit phase-flip code [quant-ph/9802018].", "See Table S6 in Ref. [2102.06132] for a history of earlier implementations.", "Repetition codes can be used to benchmark device performance [2202.11045]."], "code_id": "quantum_repetition", "logical": "qubits", "introduced": "[10.1103/PhysRevA.32.3266]", "description": "Encodes \\(1\\) qubit into \\(n\\) qubits according to \\(|0\\rangle\\to|\\phi_0\\rangle^{\\otimes n}\\) and \\(|1\\rangle\\to|\\phi_1\\rangle^{\\otimes n}\\). Also known as a bit-flip code when \\(|\\phi_i\\rangle = |i\\rangle\\), and a phase-flip code when \\(|\\phi_0\\rangle = |+\\rangle\\) and \\(|\\phi_1\\rangle = |-\\rangle\\).\n\nThe \\(\\pm\\)-basis codewords for the bit-flip code are GHz (a.k.a. cat) states \\(|0\\rangle^{\\otimes n}\\pm|1\\rangle^{\\otimes n}\\). These are ground states of the one-dimensional classical Ising model Hamiltonian \\(H=\\sum{x} Z^{(x)}Z^{(x+1)}\\).\n\nThe \\(\\pm\\)-basis codewords for the phase-flip code are expanded in the computational basis as\n\\begin{align}\n  \\begin{split}\n    |\\overline{+}\\rangle =\\frac{1}{\\sqrt{2^{n-1}}}\\sum_{\\sum_{i}v_{i}=0}|v_{1},\\cdots,v_{n}\\rangle~{\\phantom{,}}\\\\\n    |\\overline{-}\\rangle =\\frac{1}{\\sqrt{2^{n-1}}}\\sum_{\\sum_{i}v_{i}=1}|v_{1},\\cdots,v_{n}\\rangle~,\n  \\end{split}\n\\end{align}\nshowing that the phase-flip code code stores information in the total parity of the qubits.\n", "notes": []}, "honeycomb": {"short_name": "", "name": "Honeycomb code", "protection": "Protective features similar to the surface code: on a torus geometry, the code protects two logical qubits with a code distance proportional to the linear size of the torus. Properties of the code with open boundaries are discussed in Refs. [2110.09545,2110.05348].", "features": {"transversal_gates": "", "decoders": ["The ISG has a static subgroup for all time steps \\(r\\geq 3\\) \u2013 that is, a subgroup which remains a subgroup of the ISG for all future times \u2013 given by so-called plaquette stabilizers. These are stabilizers consisting of products of check operators around homologically trivial paths. The syndrome bits correspond to the eigenvalues of the plaquette stabilizers. Because of the structure of the check operators, only one-third of all plaquettes are measured each round. The syndrome bits must therefore be represented by a lattice in spacetime, to reflect when and where the outcome was obtained."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["One can run a fault-tolerant decoding algorithm by (1) bipartitioning the syndrome lattice into two graphs which are congruent to the Cayley graph of the free abelian group with three generators (up to boundary conditions) and (2) performing a matching algorithm to deduce errors."], "general_gates": ["There are two types of logical operators, inner and outer. An inner logical operator is the product of check operators on a homologically nontrivial cycle. They belong to the stabilizer group as a subsystem code. Outer logical operators have an interpretation in terms of magnetic and electric operators of an embedded surface code, and they do not belong to the stabilizer group of the associated subsystem code."], "magic_scaling_exponent": "", "threshold": ["\\(0.2\\%-0.3\\%\\) in a controlled-not circuit model with a correlated minimum-weight perfect-matching decoder [2108.10457].", "\\(1.5\\%<p<2.0\\%\\) in a circuit model with native two-body measurements and a correlated minimum-weight perfect-matching decoder [2108.10457]. Here, \\(p\\) is the collective error rate of the two-body measurement gate, including both measurement and correlated data depolarization error processes.", "Against circuit-level noise: within \\(0.2\\% \u2212 0.3\\%\\) for SD6 (standard depolarizing 6-step cycle), \\(0.1\\% \u2212 0.15\\%\\) for SI1000 (superconducting-inspired 1000 ns cycle), and \\(1.5\\% \u2212 2.0\\%\\) for EM3 (entangling-measurement 3-step cycle) [2202.11845]."], "encoders": ["Initialization can be performed by preparing each pair of qubits  on an edge in some particular state independently specified by the effective-one-qubit operators (two-qubit Pauli strings centered on an edge) and then beginning the check measurement sequence. This is analogous to projecting a state into the code space by measuring stabilizers."]}, "physical": "qubits", "realizations": [], "code_id": "honeycomb", "logical": "qubits", "introduced": "[2107.02194]", "description": "Floquet code inspired by the Kitaev honeycomb model [cond-mat/0506438] whose logical qubits are generated through a particular sequence of measurements.\n\nThe code is defined on a hexagonal (honeycomb) lattice with a physical qubit located at each vertex. Edges are labeled \\(x\\), \\(y\\), and \\(z\\), such that one edge of each label meet at every vertex. Check operators are defined as \\(XX\\) acting on any two qubits joined by an \\(x\\) edge, and similarly for \\(y\\) and \\(z\\). The hexagonal lattice is 3-colorable, so the hexagons may be labeled 0, 1, 2 such that no two neighboring hexagons have the same label.\n\nThe code-generating measurement pattern consists of measuring the check operators located on all of the \\(r\\)-labeled edges in round \\(r\\) mod 3. The code space is the \\(+1\\) eigenspace of the instantaneous stabilizer group (ISG). The ISG specifies the state of the system as a Pauli stabilizer state at a particular round of measurement, and it evolves into a (potentially) different ISG depending on the check operators measured.\n", "notes": []}, "permutation_invariant": {"short_name": "", "name": "Permutation-invariant code", "protection": "Depends on the family. The GNU permutation-invariant family (parameterized by \\(t\\)) protects against arbitrary weight \\(t\\) qubit errors and approximately corrects spontaneous decay errors [1302.3247,10.1103/PhysRevA.93.042340]. Other related codes protect against amplitude damping [10.1109/TIT.2019.2956142] while admitting a constant number of excitations, and against deletion errors [2102.02494,2102.03015].", "features": {"transversal_gates": "", "decoders": ["For a family of codes, using projection, probability amplitude rebalancing, and gate teleportation can be done in \\(O(N^2)\\) [2102.02494]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["With quantum harmonic oscillators (superconducting charge qubits in a ultrastrong coupling regime) in \\(O(N)\\) as in [10.1103/PhysRevA.99.012335]. Can be done in \\(O(N^2)\\) steps using quantum circuits [1904.07358], or using geometric phase gates in \\(O(N)\\) [1908.01120]."]}, "physical": "qubits", "realizations": [], "code_id": "permutation_invariant", "logical": "qubits", "introduced": "[quant-ph/0304153]", "description": "Codes which are stabilized by the symmetric group \\(S_n\\) on \\(n\\) elements, in a generalization of stabilizer codes to binary codes utilizing (non-abelian) group actions (in particular, \\(S_n\\) is non-abelian).", "notes": ["Can be constructed using real polynomials for high-dimensional qudit spaces [10.1016/j.laa.2017.06.031]."]}, "monitored_random_circuits": {"short_name": "", "name": "Monitored random-circuit code", "protection": "When in the volume-law phase, protects against random projective measurements at a rate \\( p < p_c \\). While the true code distance is not known, it is conjectured to be proportional to the contiguous distance. As first described in Ref. [1905.05195], the  contiguous distance for these circuits is defined with respect to all partitions of the system.", "features": {"transversal_gates": "", "decoders": ["The recovery operation is the reverse unitary transformation with access to the measurement record (for dynamically generated codes with a strong purification transition) [1905.05195]"], "rate": "Rate can be finite [1905.05195], depending on the family of random codes generated by the circuit.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["Above the critical measurement rate \\( p_c\\), the natural error correction properties of the circuit can no longer protect the information. This can be interpreted as the code threshold.", "These dynamically generated codes saturate the trade off between density of encoded information and the error rate threshold [1905.05195]"], "encoders": ["The dynamics of the monitored random circuit can be recast in the language of stabilizer codes [1905.05195]. The stabilizer group of the error-correcting code resulting from a monitored Clifford circuit either grows or shrinks with each time step, depending on which projective measurements were performed during the time step.", "One can construct optimal single-copy encoding operations for strong purification transitions [1905.05195]"]}, "physical": "groups", "realizations": ["Measurement induced quantum phases have been realized in a trapped-ion processor [2106.05881]."], "code_id": "monitored_random_circuits", "logical": "qubits", "introduced": "[10.1103/PhysRevX.9.031009,10.1103/PhysRevB.98.205136,1808.05949]", "description": "Error-correcting code arising from a monitored random circuit. Such a circuit is described by a series of intermittant random local projective Pauli measurements with random unitary time-evolution operators. An important sub-family consists of Clifford monitored random circuits, where unitaries are sampled from the Clifford group [1901.08092]. When the rate of projective measurements is independently controlled by a probability parameter \\(p\\), there can exist two stable phases, one described by volume-law entanglement entropy and the other by area-law entanglement entropy. The phases and their transition can be understood from the perspective of quantum error correction, information scrambling, and channel capacities [1903.05124,1905.05195].\n\nMonitored random circuits have a finite information capacity that decays exponentially with respect to system size [1905.05195]. When \\( p = 0 \\), the random circuit achieves channel capacity, meaning that it stores the most amount of information possible. This notion quantifies the recoverability of information and the reversability of the system under the monitored random dynamics. In the volume-law phase (\\( p < p_c \\) for some critical probability \\(p_c\\)), the channel capacity remains non-zero, and the monitored channel projects an initial state into a random error-correcting code [1905.05195]. With appropriately chosen evolution operators and measurements, the code is a stabilizer code whose parameters depend on time, \\( [[n,k(t),d(t)]] \\). A similar notion applies to Haar random circuits with measurements [1911.00008].\n", "notes": ["Connections to information scrambling in black hole physics, as introduced in Section 11 of [1903.05124]. In particular, monitored random circuits can be viewed as the Hayden-Preskill recovery problem [10.1103/PhysRevD.100.086001] running backwards in time. In this setting, the volume-law entanglement phase of the monitored circuit describes the phase when information can be recovered from an old black hole (ie, a black hole that is maximally entangled with the early universe).", "Mapping monitored random circuits to statistical mechanics models can help estimate thresholds and code distances for these systems [2007.03822]."]}, "quantum_polar": {"short_name": "", "name": "Quantum polar code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_polar", "logical": "qubits", "introduced": "[1109.3195]", "description": "Stub.", "notes": []}, "stabilizer_over_gf4": {"short_name": "", "name": "Stabilizer code over \\(GF(4)\\)", "protection": "Detects errors on \\(d-1\\) qubits, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "stabilizer_over_gf4", "logical": "qubits", "introduced": "[quant-ph/9608006]", "description": "An \\([[n,k,d]]\\) stabilizer code whose encoding is based on a weakly self-dual additive quaternary code \\((n, 2^{n-k}, d^*)_4\\) with respect to the trace inner product where \\(d \\ge d^*\\).\nThe quaternary field \\(GF(4)=\\mathbf{F}_4\\) consists of \\(\\{0, 1, w, \\bar{w}\\}\\), with \\(\\bar{w} = w^2 = w + 1\\), \\(\\mathrm{Tr}(x) = x+\\bar{x}\\), and trace inner product \\(u * v = \\mathrm{Tr}(u \\cdot \\bar{v})\\).\nThere is a mapping \\(L\\) between Pauli matrices \\(I, Y, Z, X\\) and \\(0, 1, \\bar{w}, w\\), in turn \\([A, B] \\Leftrightarrow Tr\\langle L(A), L(A)\\rangle\\).\nThe classical self-dual code \\(C\\) over \\(GF(4)^n\\) corresponds to the stabilizer group \\(\\mathsf{S}\\) while \\(C^{\\perp}\\) corresponds to \\(\\mathsf{N(S)}\\).\n\nThe quaternary code needs to only be additive (its codewords are closed under addition). It need not be a linear code, which would require the set of codewords to be closed under multiplication as well.\n", "notes": ["Tables of \\([[n,0,d]]\\) codes, corresponding to a self-dual \\(GF(4)\\) representation, at this website <http://www.ii.uib.no/~larsed/vncorbits/>."]}, "xyz_hexagonal": {"short_name": "", "name": "XYZ\\(^2\\) hexagonal stabilizer code", "protection": "As a stabilizer code with boundaries, protects a single qubit with parameters \\([[2 d^2, 1, d]]\\).", "features": {"transversal_gates": "", "decoders": ["Maximum-likelihood decoding using the EWD decoder [2112.01977]."], "rate": "", "code_capacity_threshold": ["\\(50\\%\\) for pure \\(Z\\), \\(Y\\), or \\(Z\\) noise under maximum-likelihood decoding.", "Threshold matches that of the \\(XZZX\\) code for various bias levels of \\(X\\), \\(Y\\), or \\(Z\\) biased noise  under maximum-likelihood decoding.", "\\(\\sim 18\\%\\) for depolarizing noise under maximum-likelihood decoding."], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "xyz_hexagonal", "logical": "qubits", "introduced": "[2109.13308,2112.06036]", "description": "An instance of the matching code based on the Kitaev honeycomb model. It is described on a hexagonal lattice with \\(XYZXYZ\\) stabilizers on each hexagonal plaquette. Each vertical pair of qubits has an \\(XX\\), \\(YY\\), or \\(ZZ\\) link stabilizer depending on the orientation of the plaquette stabilizers.", "notes": ["Isolated \\(X\\), \\(Y\\), and \\(Z\\) errors lead to unidirectional pairs of plaquette defects along the three directions of the triangular lattice."]}, "happy": {"short_name": "HaPPY", "name": "Pastawski-Yoshida-Harlow-Preskill (HaPPY) code", "protection": "Protects against erasure errors and Pauli errors on the boundary qubits.", "features": {"transversal_gates": "For locality-preserving physical gates on the boundary, the set of transversally implementable logical operations in the bulk is strictly contained in the Clifford group [2103.13404].", "decoders": ["Greedy algorithm for decoding specified in Ref. [1503.06237]."], "rate": "The pentagon HaPPY code has an asymptotic rate \\(\\frac{1}{\\sqrt{5}} \\approx 0.447\\). The pentagon/hexagon HaPPY code, with alternating layers of pentagons and hexagons in the tiling, has a rate of \\(0.299\\) if the last layer is a pentagon layer and a rate of \\(0.088\\) if the last layer is a hexagon layer.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["\\(26\\%\\) for boundary erasure errors on the the pentagon/hexagon HaPPY code, which has alternating layers of pentagons and hexagons in the tiling.", "\\(\\sim 50\\%\\) for boundary erasure errors on the single-qubit HaPPY code, which has a central pentagon encoding one bulk operator and hexagons tiling all other layers", "\\(16.3\\%\\) for boundary Pauli errors on the single-qubit HaPPY code with 3 layers [2008.10206].", "There is no threshold for the pentagon HaPPY code as a constant number of errors (two) can make bulk recovery impossible."], "encoders": ["Heisenberg-picture encoding is done through tensor pushing. Each bulk operator (logical) is pushed to an operator supported on a portion of the boundary region (physical). Pushing all the bulk operators through results in reconstruction of the boundary."]}, "physical": "qubits", "realizations": [], "code_id": "happy", "logical": "qubits", "introduced": "[1503.06237]", "description": "Holographic code constructed out of a network of perfect tensors that tesselates hyperbolic space. Physical qubits are associated with uncontracted tensor legs at the boundary of the tesselation, while logical qubits are associated with uncontracted legs in the bulk. The code serves as a minimal model for several aspects of the AdS/CFT holographic duality. The construction below is described for qubits, but straightforward generalizations exist to modular qudits, oscillators, and rotors [1902.07714].\n\nEncoding is accomplished using a tensor network of \\([[5,1,3]]\\) encoding isometries, which are six-legged perfect tensors (with five legs corresponding to the physical qubits and one for the encoded logical qubit). A \\(2n\\)-legged perfect tensor is proportional to an isometry for any bipartition of its indices into a set \\(A\\) and a complementary set \\(A^{\\perp}\\) such that \\(|A|\\leq|A^{\\perp}|\\).\n\nTo construct the encoding, one first uniformly tiles the hyperbolic AdS/CFT disc using pentagons and hexagons. Then, one places a 6-legged \\([[5,1,3]]\\) encoding tensor at each hexagon and pentagon, contracting legs between neighboring shapes and leaving one leg uncontracted at each pentagon. This construction forms an encoding isometry from the uncontracted legs in the bulk to the uncontracted legs at the boundary.\n", "notes": []}, "quantum_triorthogonal": {"short_name": "", "name": "Triorthogonal code", "protection": "Weight \\(t\\) Pauli errors, where \\(t\\) depends on the family. For example, Ref. [1209.2426] provides a family of distance \\(2\\) codes. It also presents a \\([[49, 1, 5]]\\) code.", "features": {"transversal_gates": "Admits transversal \\(T\\) gates [1209.2426] and the controlled-controlled-\\(Z\\) gate.", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Triorthogonal codes can be used for high-quality magic-state distillation [1209.2426]."], "magic_scaling_exponent": "Depends on the matrix. Reference [1209.2426] gave a family of \\(\\frac{k}{3k+8}\\) codes with magic-state distillation scaling exponent \\(\\gamma = \\log_2 \\frac{3k+8}{k}\\).", "threshold": ["Approximately \\(\\frac{1}{3k + 1}\\) [1209.2426]."], "encoders": ["Encoder for magic states for the code constructed in [1209.2426]."]}, "physical": "qubits", "realizations": [], "code_id": "quantum_triorthogonal", "logical": "qubits", "introduced": "[1209.2426]", "description": "A triorthogonal \\(m \\times n\\) binary matrix is triorthogonal if its rows \\(r_1, \\ldots, r_m\\) satisfy \\(|r_i \\cdot r_j| = 0\\) and \\(|r_i \\cdot r_j \\cdot r_k| = 0\\), where addition and multiplication are done on \\(\\mathbb{Z}_2\\). The triorthogonal code associated with the matrix is constructed by mapping non-zero entries in even-weight rows to \\(X\\) operators, and \\(Z\\) operators for each row in the orthogonal complement.", "notes": ["Reference [2107.09684] presents a classification of triorthogonal codes up to \\(n + k \\leq 38\\) by associating each triorthogonal code with a Reed-Muller polynomial."]}, "stab_4_2_2": {"short_name": "", "name": "\\([[4,2,2]]\\) CSS code", "protection": "Detects a single-qubit error [quant-ph/9603031] or single erasure [quant-ph/9610042]. Not able to correct arbitrary single-qubit errors because \\( \\lfloor \\frac{d-1}{2} \\rfloor =0 \\). Approximately corrects a single amplitude damping error [quant-ph/9704002].", "features": {"transversal_gates": "Transversal Pauli, Hadamard, and two-qubit \\(R\\) gates [1610.03507].", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Preparation of certain states along with transversal gates can be performed fault-tolerantly, but requires post-selection because the code cannot correct errors [1610.03507]."], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": ["Trapped-ion device by IonQ [1611.06946].", "Logical state preparation and flag-qubit error correction realized in superconducting-circuit devices by IBM [1705.09259,2110.04285]."], "code_id": "stab_4_2_2", "logical": "qubits", "introduced": "[quant-ph/9603031]", "description": "Four-qubit CSS stabilizer code with generators \\(\\{XXXX, ZZZZ\\} \\) and codewords\n\\begin{align}\n  \\begin{split}\n    |\\overline{00}\\rangle = (|0000\\rangle + |1111\\rangle)/\\sqrt{2}\\\\\n    |\\overline{01}\\rangle = (|0011\\rangle + |1100\\rangle)/\\sqrt{2}\\\\\n    |\\overline{10}\\rangle = (|0101\\rangle + |1010\\rangle)/\\sqrt{2}\\\\\n    |\\overline{11}\\rangle = (|0110\\rangle + |1001\\rangle)/\\sqrt{2}~.\n  \\end{split}\n\\end{align}\n\nIts subcode \\(\\{|\\overline{00}\\rangle,|\\overline{01}\\rangle\\}\\) is a \\([[4,1,2]]\\) code [quant-ph/9704002], whose \\(\\pm\\)-basis codewords can be written as\n\\begin{align}\n  |\\overline{\\pm}\\rangle = \\frac{1}{2}(|00\\rangle \\pm |11\\rangle)^{\\otimes 2}~.\\\\\n\\end{align}\nThis code can be thought of as a concatenation of a two-qubit bit-flip with a two-qubit phase-flip code. The other subcode \\(\\{|\\overline{10}\\rangle,|\\overline{11}\\rangle\\}\\) [quant-ph/0103042] has also been studied against amplitude-damping noise.\n", "notes": ["Concatenating \\([[4,2,2]]\\) code with surface code can generate 2D topological code with a reasonable circuit-based threshold [10.26421/QIC16.15-16-1]."]}, "steane": {"short_name": "", "name": "Steane \\([[7,1,3]]\\) code", "protection": "The Steane code is a distance 3 code. It detects errors on 2 qubits, corrects errors on 1 qubit.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Pieceable fault-tolerant CCZ gate [1603.03948].", "Syndrome measurement can be done with ancillary flag qubits [1612.04795,1705.02329] or with no extra qubits [10.1088/2058-9565/abc6f4]."], "general_gates": ["Pieceable fault-tolerant CCZ gate [1603.03948]."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": ["Trapped-ion qubits: seven-qubit device in Blatt group [1403.5426] and ten-qubit QCCD device by Quantinuum [2107.07505].", "Rydberg atom arrays: Lukin group [2112.03923]."], "code_id": "steane", "logical": "qubits", "introduced": "[10.1098/rspa.1996.0136]", "description": "A \\([[7,1,3]]\\) CSS code that uses the classical binary \\([7,4,3]\\) Hamming code for protecting against \\(X\\) errors and its dual \\([7,3,4]\\) for \\(Z\\) errors. The parity-check matrix for the \\([7,4,3]\\) Hamming code is\n\\begin{align}\n  H = \\left(\\begin{matrix}\n    1&0&0&1&0&1&1\\\\\n    0&1&0&1&1&0&1\\\\\n    0&0&1&0&1&1&1\n  \\end{matrix}\\right),\n\\end{align}\nand the check matrix for the Steane code is therefore\n\\begin{align}\n  \\left(\\begin{matrix}\n    0&H\\\\\n    H&0\n  \\end{matrix}\\right).\n\\end{align}\nThe stabilizer group for the Steane code has six generators.\n", "notes": []}, "stab_5_1_3": {"short_name": "", "name": "\\([[5,1,3]]\\) perfect code", "protection": "Smallest stabilizer code that protects against a single error on any one qubit. Detects two-qubit errors.", "features": {"transversal_gates": "Pauli gates are transversal.", "decoders": ["Combined dynamical decoupling and error correction protocol on individually-controlled qubits with always-on Ising couplings [1509.01239].", "Symmetric decoder correcting all weight-one Pauli errors. The resulting logical error channel after coherent noise has been explicitly derived [2203.01706]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Pieceable fault-tolerant CZ and CCZ gates [1603.03948].", "Syndrome measurement can be done with two ancillary flag qubits [1705.02329]."], "general_gates": ["Pieceable fault-tolerant CZ and CCZ gates [1603.03948]."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Four CNOT and five CPHASE gates [1509.01239]."]}, "physical": "qubits", "realizations": ["First realized in NMR [10.1103/PhysRevLett.86.5811].", "Demonstration with superconducting qubits [1907.04507]."], "code_id": "stab_5_1_3", "logical": "qubits", "introduced": "[quant-ph/9602019]", "description": "Five-qubit stabilizer code with generators that are symmetric under cyclic permutation of qubits, \\begin{align} \\begin{split} S_1 &= IXZZX \\\\ S_2 &= XZZXI \\\\ S_3 &= ZZXIX \\\\ S_4 &= ZXIXZ. \\end{split} \\end{align}", "notes": []}, "shor_nine": {"short_name": "", "name": "Shor \\([[9,1,3]]\\) code", "protection": "The code detects two-qubit errors or corrects an arbitrary single-qubit error.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": ["Trapped-ion qubits: state preparation with 98.8(1)% and 98.5(1)% fidelity for state \\(|\\overline{0}\\rangle\\) and \\(|\\overline{1}\\rangle\\), respectively, by N. Linke group [2104.01205]. Variants of the code to handle coherent noise studied and realized by K. Brown and C. Monroe groups [2105.05068].", "All-photonic quantum repeater architecture [2203.07979]."], "code_id": "shor_nine", "logical": "qubits", "introduced": "[10.1103/PhysRevA.52.R2493]", "description": "Nine-qubit CSS code<code:css> that is the smallest such code to correct a single-qubit error. The logical state is encoded using\n\\begin{align}\n\\begin{split}\n|\\overline{0}\\rangle&=\\frac{1}{2\\sqrt{2}}\\left(|000\\rangle+|111\\rangle\\right)^{\\otimes3}\\\\\n|\\overline{1}\\rangle&=\\frac{1}{2\\sqrt{2}}\\left(|000\\rangle-|111\\rangle\\right)^{\\otimes3}~.\n\\end{split}\n\\end{align}\nThe code works by concatenating<code:quantum_concatenated> each qubit of a phase-flip with a bit-flip repetition code<code:quantum_repetition>. Therefore, the code can correct both type of errors simultaneously.\n\nSpecifically, a state is phase-flip error-corrected by a three-qubit phase-flip repetition code<code:quantum_repetition>, with stabilizer generators \\(X_0 X_1I_2\\) and \\(X_0I_1X_2\\) in \\(X\\) basis, where the subscript represents the qubit index. Each logical qubit is encoded using\n\\begin{align}\n\\label{eq:phase-flip}\n\\begin{split}\n  |\\overline{0}\\rangle &= |+_0+_1+_2\\rangle \\\\\n  |\\overline{1}\\rangle &= |-_0-_1-_2\\rangle .\n\\end{split}\n\\end{align}\nThen, each physical qubit used in eq:phase-flip is further encoded in the three-qubit bit-flip repetition code<code:quantum_repetition>,\n\\begin{align}\n  |\\pm _j \\rangle  = \\frac{1}{\\sqrt{2}}( |0_{j0}0_{j1}0_{j2}\\rangle \\pm |1_{j0}1_{j1}1_{j2}\\rangle),\n\\end{align}\neach with bit-flip error stabilizer generators \\(Z_{j0}Z_{j1}I_{j2}\\) and  \\(Z_{j0}I_{j1}Z_{j2} \\) with \\(j=0,1,2\\).\nNotice now the phase-flip error stabilizer generator is extended as \\(X_j = X_{j0}X_{j1}X_{j2}\\).\nAs a result, the stabilizer generators with the qubit index flattened are\n\\begin{align}\n\\begin{split}\n  Z_{j0}Z_{j1}I_{j2} &\\rightarrow \\{Z_0Z_1, Z_3Z_4, Z_6Z_7\\} \\\\\n  Z_{j0}I_{j1}Z_{j2} &\\rightarrow \\{Z_0Z_2, Z_3Z_5, Z_6Z_8\\} \\\\\n  X_0 X_1I_2  &\\rightarrow  \\{X_0X_1X_2X_3X_4X_5\\}\\\\\n  X_0 I_1X_2  &\\rightarrow  \\{X_0X_1X_2X_6X_7X_8\\}.\n\\end{split}\n\\end{align}\n", "notes": ["Shor's code is the first known quantum error correction code. "]}, "stab_15_1_3": {"short_name": "", "name": "\\([[15,1,3]]\\) Reed-Muller code", "protection": "", "features": {"transversal_gates": "A transversal logical \\(T^\\dagger\\) is implemented by applying a \\(T\\) gate on every qubit [quant-ph/9610011,1403.2734,1612.07330].", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Combining the Steane code and the 15-qubit Reed-Muller code through a fault-tolerant conversion can result in a universal transversal gate set that does not need magic state distillation [1403.2734,1703.03860]."], "general_gates": ["Code is often used in magic-state distillation protocols because of its transversal \\(T\\) gate [quant-ph/0403025]."], "magic_scaling_exponent": "Magic-state distillation scaling exponent \\( \\gamma= \\log_d (n/k)\\approx 2.46\\) [1703.07847].", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "stab_15_1_3", "logical": "qubits", "introduced": "", "description": "\\([[15,1,3]]\\) CSS code that is most easily thought of as a tetrahedral 3D color code.\nThis code contains 15 qubits, represented by four vertices, four face centers, six edge centers, and one body center.\nThe tetrahedron is cellulated into four identical polyhedron cells by connecting the body center to all four face centers, where each face center is then connected by three adjacent edge centers.\nEach colored cell corresponds to a weight-8 \\(X\\)-check, and each face corresponds to a weight-4 \\(Z\\)-check.\nA logical \\(Z\\) is any weight-3 \\(Z\\)-string along an edge of the entire tetrahedron.\nThe logical \\(X\\) is any weight-7 \\(X\\)-face of the entire tetrahedron.\n", "notes": ["The \\([[15,1,3]]\\) code can be converted into the smallest known stabilizer code with a fault-tolerant logical \\(T\\) gate (i.e., the \\([[10,1,2]]\\) code) through a \"morphing procedure\" [2112.01446]."]}, "heavy_hex": {"short_name": "", "name": "Heavy-hexagon code", "protection": "Protects against Pauli noise. The code has no threshold for \\(Z\\)-type Pauli errors since they are detected by Bacon-Shor-type stabilizers.", "features": {"transversal_gates": "CNOT gates are transveral for this code. However, for most architectures, all logical gates would be implemented using lattice surgery methods.", "decoders": ["Any graph-based decoder can be used, such as MWPM and Union Find. However, edge weights must be dynamically renormalized using flag-qubit measurement outcomes after each syndrome measurement round."], "rate": "\\(1/n\\) for a distance-\\(d\\) heavy-hexagon code on \\(n = (5d^2-2d-1)/2\\) qubits.", "code_capacity_threshold": [], "fault_tolerance": ["All logical gates can be fault-tolerantly implemented using lattice surgery and magic state injection.", "Stabilizer measurements are measured fault-tolerantly using one-flag circuits since some single-fault events can result in weight-two data qubit errors which are parallel to the code's logical operators. Hence, using information from the flag-qubit measurements is crucial to fault-tolerantly measure the code stabilizers."], "general_gates": ["Universal gate set achieved with magic state injection and lattice surgery."], "magic_scaling_exponent": "", "threshold": ["\\(0.45\\%\\) for \\(X\\) errors under a full circuit-level depolarizing noise model (obtained from Monte Carlo simulations).", "\\(Z\\)-errors have no threshold given the \\(X\\)-type Bacon-Shor stabilizers."], "encoders": ["For a logical-zero state, prepare all data qubits in the physical-zero state and then measure the \\(X\\)-type Bacon-Shor stabilizers. For logical-plus state, prepare all data qubits in the physical-plus state and then measure \\(Z\\)-type surface code stabilizers.", "Stabilizer measurement encoding circuits have a constant depth of 10 time steps (excluding ancilla state preparation and measurement)."]}, "physical": "qubits", "realizations": ["Logical state preparation and flag-qubit error correction realized in superconducting-circuit devices (specifically, fixed-frequency transmon qubit architectures) by IBM for \\(d=2\\) [1705.09259,2110.04285] and \\(d=3\\) [2203.07205]."], "code_id": "heavy_hex", "logical": "qubits", "introduced": "[1907.09528]", "description": "Subsystem stabilizer code on the heavy-hexagonal lattice that combines Bacon-Shor and surface-code stabilizers. Encodes one logical qubit into \\(n=(5d^2-2d-1)/2\\) physical qubits with distance \\(d\\). The heavy-hexagonal lattice allows for low degree (at most 3) connectivity between all the data and ancilla qubits, which is suitable for fixed-frequency transom qubits subject to frequency collision errors.\n\nData qubits and ancillas of the code are placed on a heavy-hexagonal lattice (vertices and edges of a tilling of hexagons). A subset of the ancilla qubits are flag qubits used for detecting high-weight errors arising from fewer faults. The code stabilizers for detecting \\(X\\)-type errors are measured by measuring weight-two \\(Z\\)-type gauge operators whose product produces stabilizers of the surface code. \\(X\\)-type stabilizers are column operators corresponding to stabilizers of the Bacon-Shor code, which are measured by taking products of weight-four and weight-two \\(X\\)-type gauge operators.\n", "notes": []}, "subsystem_stabilizer": {"short_name": "", "name": "Subsystem qubit stabilizer code", "protection": "Detects errors on \\(d-1\\) qubits, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits. More generally, a set of errors \\( \\{ E_a \\} \\) is correctable iff \\( E_aE_b \\not\\in N(\\mathsf{S}) \\setminus \\mathsf{G} \\) for all pairs \\(a,b\\). The distance of the code is the minimal weight of operators in \\( N(\\mathsf{S}) \\setminus \\mathsf{G}\\).", "features": {"transversal_gates": "", "decoders": ["Syndrome measurements are obtained by first measuring gauge operators of the code and taking their products, which give the stabilizer measurement outcomes."], "rate": "", "code_capacity_threshold": ["For correlated Pauli noise, bounds can be obtained by mapping the effect of noise on the code to a statistical mechanical model [1809.10704]."], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "subsystem_stabilizer", "logical": "qubits", "introduced": "[quant-ph/0508131]", "description": "Also called a gauge stabilizer code. A stabilizer code with some of its logical qubits denoted as gauge qubits and not used for storage of logical information. Note that this doesnt lead to new codes but does lead to new error correction and fault tolerance procedures. Subsystem codes are denoted by \\([[n,k,r,d]]\\), similar to stabilizer codes, but with an extra parameter \\(r\\) denoting the number of gauge qubits.\n\nTo create these codes proceed as follows. Choose \\(2n\\) operators \\(\\{ \\tilde{X}_j,\\tilde{Z}_j\\}_{j=1}^n\\) from \\(\\mathsf{P}_n\\), the Pauli group on \\(n\\) qubits, such that they obey the same commutation relations as the regular \\(n\\)-qubit Pauli generators \\( \\{X_j,Z_j\\}_{j=1}^n \\) (the subscript on these latter operators indicates the single qubit the Pauli matrix acts on). The tilde operators might act on more than one physical (or bare) qubit but they behave as if they acted only on a single qubit. WLOG we can choose a stabilizer group as \\( \\mathsf{S} = \\langle Z_1,\\dots,Z_s \\rangle \\). It follows that the normalizer of \\(\\mathsf{S} \\) is \\( N(\\mathsf{S}) = \\langle i, \\tilde{Z}_1,\\dots, \\tilde{Z}_n, \\tilde{X}_{s+1},\\dots, \\tilde{X}_n \\rangle \\). We now choose a gauge group as \\( \\mathsf{G} = \\langle i, \\tilde{Z}_1,\\dots, \\tilde{Z}_s, \\tilde{X}_{s+1}, \\tilde{Z}_{s+1}, \\dots, \\tilde{X}_{s+r}, \\tilde{Z}_{s+r} \\rangle \\) with \\( s + r \\leq n \\). The logical group is choosen as \\( \\mathsf{L} = N(\\mathsf{S})/\\mathsf{G} \\simeq \\langle \\tilde{X}_{s+r+1},\\tilde{Z}_{s+r+1}, \\dots, \\tilde{X}_n,\\tilde{Z}_n \\rangle \\). Now the codespace \\( C \\) is as usual the \\(+1\\) eigenspace of the stabilizer \\( \\mathsf{S} \\). But the gauge and logical groups have further decomposed this space into \\( C = A \\otimes B \\simeq (\\mathbb{C}^2)^{\\otimes k} \\otimes (\\mathbb{C}^2)^{\\otimes r} \\). Thus the Hilbert space is partitioned into 3 sets; \\(k\\) logical qubits, \\(r\\) gauge qubits, and \\(s\\) stabilizer qubits, with \\(s+r+k=n\\).\n", "notes": ["When the gauge group \\( \\mathsf{G} \\) is abelian, the above is reduced to the standard stabilizer formalism."]}, "bacon_shor": {"short_name": "", "name": "Bacon-Shor code", "protection": "The \\([[m_1 m_2,1,min(m_1,m_2)]]\\) variant has distance \\(d=min(m_1,m_2)\\). In a symmetric 3-dimensional case (defined on a cubic lattice) with \\(L^3\\) qubits, the code has the parameters \\([[L^3,1,L]]\\).", "features": {"transversal_gates": "Logical Hadamard is transversal in symmetric Bacon-Shor codes up to a qubit permutation [quant-ph/0610063] and can be implemented with teleportation [quant-ph/0002039]. Bacon-Shor codes on an \\(m \\times mk\\) lattice admit transversal \\(k\\)-qubit-controlled \\(Z\\) gates [1705.01686].", "decoders": ["While check operators are few-body, stabilizer weights scale with the number of qubits, and stabilizer expectation values are obtained by taking products of gauge-operator expectation values. It is thus not clear how to extract stabilizer values in a fault-tolerant manner [2009.03921,2107.02194]."], "rate": "A non-LDPC family of Bacon-Shor codes achieves a distance of \\(\\Omega(n^{1-\\epsilon})\\) with sparse gauge operators.", "code_capacity_threshold": [], "fault_tolerance": ["Piecably fault-tolerant circuits can be employed to construct non-transversal gates effectively [Yoder, Theodore., DSpace@MIT Practical Fault-Tolerant Quantum Computation (2018)]."], "general_gates": ["Piecably fault-tolerant circuits can be employed to construct non-transversal gates effectively [Yoder, Theodore., DSpace@MIT Practical Fault-Tolerant Quantum Computation (2018)]."], "magic_scaling_exponent": "", "threshold": ["A lower bound of \\(1.94 \\times 10^{-4}\\) for the accuracy threshold was proved for Bacon-Shor code with 5 levels of concatenation, using Steane method of FTEC [quant-ph/0610063].", "The three dimensional version offers the possibility of being a self-correcting quantum memory [10.1103/PhysRevA.73.012340]."], "encoders": []}, "physical": "qubits", "realizations": ["Trapped-ion qubits: state preparation, logical measurement, and stabilizer measurement for nine-qubit Bacon-Shor code demonstrated on a 13-qubit device by M. Cetina and C. Monroe groups [2009.11482]."], "code_id": "bacon_shor", "logical": "qubits", "introduced": "[10.1103/PhysRevA.52.R2493,quant-ph/0506023]", "description": "CSS subsystem stabilizer code defined on an \\(m_1 \\times m_2\\) lattice of qubits. It is said to be symmetric when \\(m_1=m_2\\). The \\(X\\)-type and \\(Z\\)-type stabilizers defined as \\(X\\) and \\(Z\\) operators acting on all qubits on adjacent columns and rows, respectively. Let \\(O_{i,j}\\) denote an operator acting on the qubit at a position \\((i,j)\\) on the lattice, with \\(i\\in\\{0,1,\\ldots ,m_1-1\\}\\) and \\(j\\in\\{0,1,\\ldots,m_2-1\\}\\). The code's stabilizer group is\n\\begin{align}\n\\mathsf{S}=\\langle X_{i,*}X_{i+1,*},Z_{*,j}Z_{*,j+1}\\rangle~,\n\\end{align}\nwith generators expressed as products of nearest-neightbour 2-qubit gauge operators,\n\\begin{align}\n\\begin{split}\nX_{i,*}X_{i+1,*}= \\bigotimes_{k=0}^{m_2-1} X_{i,k}X_{i+1,k} \\\\\nZ_{*,j}Z_{*,j+1}=\\bigotimes_{k=0}^{m_1-1} Z_{k,j}Z_{k,j+1}~.\n\\end{split}\n\\end{align}\nSyndrome extraction can be done by measuring these gauge operators, which are on fewer qubits and local.\n\nThe shortest error-correcting Bacon-Shor code is \\([[9,1,3]]\\) and has 6 gauge operators, symmetric in both \\(X\\) and \\(Z\\), reducing to the Shor code<code:shor_nine> for a particular gauge configuration. The error-detecting \\([[4,1,2]]\\) Bacon-Shor code, which reduces to a subcode of the \\([[4,2,2]]\\) code<code:stab_4_2_2> for a particular gauge configuration, has gauge operators \\(\\{XIXI,IIXX,ZIZI,IZIZ\\}\\).\n", "notes": []}, "bravyi_bacon_shor": {"short_name": "", "name": "Bravyi-Bacon-Shor (BBS) code", "protection": "Detects errors on \\(d-1\\) qubits, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits, where \\(d\\) is the minimum weight of a row or column in \\(A\\) [2002.06257].", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "bravyi_bacon_shor", "logical": "qubits", "introduced": "[1008.1029]", "description": "An \\([[n,k,d]]\\) CSS subsystem stabilizer code generalizing Bacon-Shor codes to a larger set of qubit geometries. Defined through a binary matrix \\(A\\) such that physical qubits live on sites \\((i,j)\\) whenever \\(A_{i,j}=1\\). The gauge group is generated by 2-qubit operators, including \\(XX\\) interations between any two qubits sharing a column in \\(A\\), and \\(ZZ\\) interations between two qubits sharing a row. The code parameters are: \\(n=\\sum_{i,j}A_{i,j}\\), \\(k=\\text{rank}(A)\\), and the distance is the minimum weight of any row or column.", "notes": []}, "subsystem_color": {"short_name": "", "name": "Subsystem color code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "subsystem_color", "logical": "qubits", "introduced": "[0908.4246,1311.0879]", "description": "Stub.\n", "notes": []}, "fractal_surface": {"short_name": "", "name": "Fractal surface code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "fractal_surface", "logical": "qubits", "introduced": "[2108.00018,2201.03568]", "description": "Kitaev surface code on a fractal geometry, which is obtained by removing qubits from the surface code on a cubic lattice. Stub.", "notes": []}, "xzzx": {"short_name": "", "name": "XZZX surface code", "protection": "As a stabilizer code, \\([[n=O(d^2), k=O(1), d]]\\).", "features": {"transversal_gates": "", "decoders": ["Minimum-weight perfect matching decoder, which can be used for \\(X\\) and \\(Z\\) noise. For \\(Y\\) noise, a variant of the matching decoder could be used like it is used for the XY code in Ref. [1907.02554]."], "rate": "", "code_capacity_threshold": ["\\(50\\%\\) threshold for noise infinitely biased towards \\(X\\) or \\(Y\\) or \\(Z\\) errors using a maximum-likelihood decoder.", "For large but finite \\(X\\)- or \\(Z\\)-biased noise, the code's thresholds exceed the zero-rate hashing bound.  The difference of the threshold from the hashing bound exceeds \\(2.9\\%\\) at a \\(Z\\) or \\(X\\) bias of 300.", "\\(18.7\\%\\) for standard depolarising noise with maximum-likelihood decoder.", "\\(0.817\\%\\) and \\(0.940\\%\\) with minimum-weight perfect matching and belief-matching decoder, respectively, for biased circuit-level noise [2203.04948].", "\\(4.15\\%\\) when \\(98\\%\\) of depolarizing errors are coverted into erasure errors with union-find decoder on a planar code, vs. \\(0.937\\%\\) for pure depolarizing noise. In Rydberg atomic devices, erasure conversion during gates is promising because the dominant source of noise is spontaneous decay into detectable energy levels outside of the computational subspace [2201.03540]."], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["\\(\\sim 4.5\\%\\) using minimum-weight perfect matching decoder for depolarizing noise (bias \\(\\eta=0.5\\)); \\(\\sim 10\\%\\) for infinite \\(Z\\) bias."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "xzzx", "logical": "qubits", "introduced": "[2009.07851]", "description": "Non-CSS derivative of the surface code whose generators are \\(XZXZ\\) Pauli strings associated, clock-wise, to the vertices of each face of a two-dimensional lattice (with a qubit located at each vertex of the tessellation).", "notes": ["A single \\(X\\) or \\(Z\\) error gives rise to two nearby defects, which can be viewed as endpoints of a string. That way, multiple \\(Z\\) errors can be decomposed into a combination of diagonal strings.", "Originally formulated as an example of \\(\\mathbb{Z}_2\\) topological order in the Wen plaquette model [quant-ph/0205004]."]}, "freedman_meyer_luo": {"short_name": "", "name": "Freedman-Meyer-Luo code", "protection": "Four-dimensional manifolds with weak systolic freedom yield \\([[n,2,\\Omega(\\sqrt{n \\sqrt{\\log n}})]]\\) surface codes.", "features": {"transversal_gates": "", "decoders": [], "rate": "Codes held a 20-year record the best lower bound on asymptotic scaling of the minimum code distance, \\(d=\\Omega(\\sqrt{n \\sqrt{\\log n}})\\), broken by Ramanujan tensor-product codes.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "freedman_meyer_luo", "logical": "qubits", "introduced": "[10.1201/9781420035377-13]", "description": "Hyperbolic surface code constructed using cellulation of a Riemann Manifold \\(M\\) exhibitng systolic freedom [10.2140/gtm.1999.2.113]. Codes derived from such manifolds can achieve distances scaling better than \\(\\sqrt{n}\\), something that is impossible using closed 2D surfaces or 2D surfaces with boundaries [10.1063/1.4726034]. Improved codes are obtained by studying a weak family of Riemann metrics on closed 4-dimensional manifolds \\(S^2\\otimes S^2\\) with the \\(Z_2\\)-homology.\n", "notes": ["See thesis by Fetaya for pedagogical exposition [1108.2886]."]}, "xysurface": {"short_name": "", "name": "XY surface code", "protection": "As a stabilizer code, \\([[n=O(d^2), k=O(1), d]]\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": ["\\(50\\%\\) at infinite \\(Z\\) bias with maximum-likelihood decoder [1812.08186].", "\\(18.7\\%\\) for standard depolarising noise with maximum-likelihood decoder [1812.08186]."], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["\\(6.32(3)\\%\\) for infinite \\(Z\\) bias, and thresholds of \\(\\sim 5\\%\\) for \\(Z\\) bias around \\(\\eta = 100\\) using a variant of the minimum-weight perfect matching decoder [1907.02554]."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "xysurface", "logical": "qubits", "introduced": "[1708.08474]", "description": "Non-CSS derivative of the surface code whose generators are \\(XXXX\\)  and \\(YYYY\\), obtained by mapping \\(Z \\to Y\\) in the surface code.", "notes": []}, "real_projective_plane": {"short_name": "", "name": "Projective-plane surface code", "protection": "If \\(\\mathcal{C}\\) is a cellulation of \\(\\mathbb{R}P^2\\), then the bit-flip distance \\(d_X\\) is the shortest cycle in \\(\\mathcal{C}\\), and the phase-flip distance \\(d_Z\\) is the shortest cycle in the dual cellulation \\(\\mathcal{C}^*\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "The rate is \\(1/n\\), where \\(n\\) is the number of edges of the particular cellulation.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "real_projective_plane", "logical": "qubits", "introduced": "[quant-ph/9810055]", "description": "A family of Kitaev surface codes on the non-orientable 2-dimensional compact manifold \\(\\mathbb{R}P^2\\) (in contrast to a genus-\\(g\\) surface). Whereas genus-\\(g\\) surface codes require \\(2g\\) logical qubits, qubit codes on \\(\\mathbb{R}P^2\\) are made from a single logical qubit.", "notes": []}, "four_dimensional_hyperbolic": {"short_name": "", "name": "Guth-Lubotzky code", "protection": "Protection stems from the relationship between properties of manifolds and CSS codes derived from their cellulation. The number of physical \\(k\\) qubits and distance \\(d\\) of the code will scale as \\(\\Omega(n)\\) and \\(\\Omega(n^\\epsilon)\\), respectively.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "four_dimensional_hyperbolic", "logical": "qubits", "introduced": "[1310.5555]", "description": "Hyperbolic surface code based on cellulations of certain four-dimensional manifolds. The manifolds are shown to have good homology and systolic properties for the purposes of code construction, with corresponding codes exhibiting linear rate.\n\nGuth and Lubotzky [1310.5555] show that there exists \\(\\epsilon\\), a four-dimensional hyperbolic manifold \\(M\\), and a sequence of manifolds \\(M_i\\) such that\neach \\(M_i\\) is a finite sheeted covering <https://en.wikipedia.org/wiki/Covering_space> of \\(M\\), and the four-dimensional volumes of the manifolds \\(\\text{Vol}_4(M_i)\\) of the sequence tend to infinity.\nAlso, the dimension of the second homology and size of systoles are bounded by \\(H_2(M_i, Z_2) \\geq \\frac{\\text{Vol}_4(M_i)}{100}\\) and \\(\\text{Sys}_2(M_i) \\geq \\text{Vol}_4(M_i)^\\epsilon\\), respectively.\n\nThen given any cellulation of \\(M\\), it can naturally be extended to cellulations for each of the manifolds \\(M_i\\) and used to define CSS codes via the homological construction by choosing the size three chain complex consisting of the \\(3,2\\) and \\(1\\)-cells of the cellulations.\n\nFor dense cellulations (i.e. large \\(n\\)) the number of physical qubits for these codes will scale with the volume of the manifolds.\nTherefore, bounds on the dimension of the second homology and size of systoles are achieved in terms of \\(n\\) for large \\(n\\).\n", "notes": []}, "3d_surface": {"short_name": "", "name": "3D surface code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "3d_surface", "logical": "qubits", "introduced": "[1406.4227]", "description": "Also called the solid code. Stub.", "notes": []}, "hyperbolic_surface": {"short_name": "", "name": "Hyperbolic surface code", "protection": "Constructions (see code children below) have yielded distances scaling favorably with the number of qubits. The use of hyperbolic surfaces allows one to circumvent bounds on surface code parameters that are valid for surfaces with bounded geometry.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "hyperbolic_surface", "logical": "qubits", "introduced": "", "description": "An extension of the Kitaev surface code construction to hyperbolic manifolds in dimension two or greater. Given a cellulation of a manifold, qubits are put on \\(i\\)-dimensional faces, \\(X\\)-type stabilizers are associated with \\((i-1)\\)-faces, while \\(Z\\)-type stabilizers are associated with \\(i+1\\)-faces.\n", "notes": []}, "two_dimensional_hyperbolic_surface": {"short_name": "", "name": "Two-dimensional hyperbolic surface code", "protection": "Protects against Pauli errors with distance \\( d \\propto \\log(n) \\). Code parameters are \\( [[n, (1-2/r - 2/s)  n + 2, \\log(n) ]] \\)", "features": {"transversal_gates": "", "decoders": ["Due to the symmetries of hyperbolic surface codes, optimal measurement schedules of the stabilizers can be found [2010.09626]."], "rate": "Two-dimensional hyperbolic surface codes have an asymptotically constant encoding rate \\( k/n \\) with a distance scaling logarithmically with \\( n\\) when the surface is closed. The encoding rate depends on the tiling \\( {r,s} \\) and is given by \\( k/n = (1-2/r - 2/s) + 2/n \\), which approaches a constant value as the number of physical qubits grows. The weight of the stabilizers is \\( r \\) for \\( Z \\)-checks and \\( s \\) for \\( X \\)-checks. For open boundary conditions, the code reduces to constant distnace.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["1\\(\\%\\) - 5\\(\\%\\) for a \\({5,4}\\) tiling under minimum-weight decoding [10.1103/PhysRevA.87.020304]. For larger tilings, the lower bound on the distance decreases, suggesting the threshold will also decrease."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "two_dimensional_hyperbolic_surface", "logical": "qubits", "introduced": "[1506.04029]", "description": "Hyperbolic surface codes based on a tessellation of a closed 2D manifold with a hyperbolic geometry (i.e., non-Euclidean geometry, e.g., saddle surfaces when defined on a 2D plane).\n\nFor a tessellation involving regular polygons with \\( r \\) sides and \\( s \\) polygons meeting at each edge, the number of logical qubits is given by \\( k = (1-2/r - 2/s) n + 2 \\). Some possible tilings are \\( {r,s}: {7,3}, {5,4} \\). The weight of the stabilizer generators are dependent on the tiling, with \\({5,4}\\) having lower weight than \\({7,3}\\).\n", "notes": ["See Sec III A of Ref. [2103.06309] for a description of this code.", "Connection to percolation theory as shown in [1205.7036]."]}, "higher_dimensional_surface": {"short_name": "", "name": "Higher-dimensional surface code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "higher_dimensional_surface", "logical": "qubits", "introduced": "[quant-ph/0110143]", "description": "A family of Kitaev surface codes on planar or toric surfaces of dimension greater than two. Stub.", "notes": []}, "clifford-deformed_surface": {"short_name": "", "name": "Clifford-deformed surface code (CDSC)", "protection": "As a stabilizer code, \\([[n=O(d^2), k=O(1), d]]\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": ["A class of random CDSCs, parametrized by the probabilities \\(\\Pi_{XZ},~ \\Pi_{YZ}\\) of \\(X\\leftrightarrow Z\\) and \\(Y\\leftrightarrow Z\\) Pauli permutations, respectively, has \\(50\\%\\) code capacity threshold at infinite \\(Z\\) bias.", "Certain translation-invariant CDSCs such as the XY code and the XZZX code also have \\(50\\%\\) code capacity threshold at infinite \\(Z\\) bias.", "XZZX code and the \\((0.5,\\Pi_{YZ})\\) random CDSCs have a \\(50\\%\\) code capacity threshold for noise infinitely biased towards either Pauli-\\(X\\), \\(Y\\), or \\(Z\\) errors."], "fault_tolerance": ["In order to leverage the benefits of CDSCs into practical universal computation, we have to implement syndrome measurement circuits and fault-tolerant logical gates in a bias-preserving way."], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "clifford-deformed_surface", "logical": "qubits", "introduced": "[2201.07802]", "description": "A generally non-CSS derivative of the surface code defined by applying a constant-depth Clifford circuit to the original (CSS) surface code. Unlike the surface code, CDSCs include codes whose thresholds and subthreshold performance are enhanced under noise biased towards dephasing. Examples of CDSCs include the XY code, XZZX code, and random CDSCs.", "notes": []}, "surface": {"short_name": "", "name": "Kitaev surface code", "protection": "Toric code on an \\(L\\times L\\) torus is a \\([[2L^2,2,L]]\\) CSS code, and there\nexists a planar code with \\([[L^2,1,L]]\\) [1111.4022]. More\ngenerally, the code distance is related to the homology of the cellulation\n[quant-ph/0110143].\n", "features": {"transversal_gates": "Transversal Pauli gates exist and are based on non-trivial loops on surface.\nTransversal Clifford gates can be done on folded surface codes [1603.02286].\n", "decoders": ["Minimum weight perfect-matching\n[quant-ph/0110143,10.26421/QIC15.1-2-9], union-find\n[1709.06218], renormalization group\n[10.26421/QIC14.9-10-1,1411.3028], tensor network\n[1405.4883], Markov chain Monte Carlo [1302.2669],\ncellular automaton [1511.05579], machine learning\n[1610.04238,1802.06441,1810.07207].\n"], "rate": "Rate depends on the underlying cellulation and manifold. For general 2D\nmanifolds, \\(kd^2\\leq c(\\log k)^2 n\\) for some constant \\(c\\)\n[1301.6588], meaning that (1) 2D surface codes with bounded\ngeometry have distance scaling at most as \\(O(\\sqrt{n})\\)\n[0909.5200,10.1063/1.4726034], and (2) surface codes with\nfinite rate can only achieve an asymptotic minimum distance that is\nlogarithmic in \\(n\\). Higher-dimensional hyperbolic manifolds (see code\nchildren below) yield distances scaling more favorably. Loewner's theorem\nprovides an upper bound for any bounded-geometry surface code\n[10.1201/9781420035377-13].\n", "code_capacity_threshold": ["For correlated Pauli noise, bounds on code capacity thresholds can be obtained by mapping the effect of noise on the code to a statistical mechanical model. The first such threshold, based on the planar code, is \\(0.017\\%\\) [quant-ph/0110143].", "\\(10.9\\%\\) (\\(10.31\\%\\)) with pure \\(Z\\)-dephasing noise for square tiling\nusing tensor-network [cond-mat/0106023,1405.4883]\n(minimum-weight perfect matching [quant-ph/0207088]) decoder.\n", "\\(18.9\\%\\) with depolarizing noise for square tiling [1202.1852].", "\\(50\\%\\) with erasure errors for square tiling [0904.3556].", "\\(3.3\\%\\) with phenomenological noise for square tiling [quant-ph/0401101]."], "fault_tolerance": [], "general_gates": ["Clifford gates can be implemented via lattice surgery\n[1111.4022,1709.02318,1808.02892,2109.02746],\ntwist-based lattice surgery [2201.05678], or braiding defects\n[quant-ph/0610082,quant-ph/0703143,1208.0928,1609.04673].\n", "Non-Clifford gates require magic state distillation\n[1905.06903], Dehn twists [1806.06078], or\njust-in-time decoding [1903.11634].\n"], "magic_scaling_exponent": "", "threshold": ["\\(0.5-1.1\\%\\) for various error models [1311.5003,0811.0464]."], "encoders": ["Unitary [0712.0348,2002.00362,2110.02020].", "Dissipative [1310.1036].", "Stabilizer measurement-based [1404.2495]."]}, "physical": "qubits", "realizations": ["Distance-two surface codes have been implemented by Andersen et\nal. [1912.09410], Erhard et al. [2006.03071], Marques et al. [2102.13071],\nGoogle Quantum AI [2102.06132], and both planar and toric versions by Bluvstein et al. [2112.03923].\n", "Distance-three surface code implemented at ETH Zurich\n[2112.03708] and on the Zuchongzhi 2.1 superconducting quantum\nprocessor [2112.13505].\n", "Signatures of corresponding topological phase of matter detected in\nsuperconducting circuits [2104.01180] and two-dimensional arrays\nof Rydberg atoms [2104.04119].\n"], "code_id": "surface", "logical": "qubits", "introduced": "[10.1070/RM1997v052n06ABEH002155,10.1007/978-1-4615-5923-8_19,quant-ph/9707021]\n", "description": "A family of abelian topological CSS stabilizer<code:css> codes\nwhose generators are few-body \\(X\\)-type and \\(Z\\)-type Pauli strings\nassociated to the stars and plaquettes, respectively, of a cellulation of a\ntwo-dimensional surface (with a qubit located at each edge of the\ncellulation). Toric code often either refers to the construction on\nthe two-dimensional torus or is an alternative name for the general\nconstruction. The construction on surfaces with boundaries is often called the\nplanar code [quant-ph/9811052].\n\nThe original construction can be naturally extended to arbitrary \\(D\\)-dimensional\nmanifolds\n[10.1201/9781420035377-13,10.1007/978-3-642-01877-0_21]. Given a\ncellulation, qubits are put on \\(i\\)-dimensional faces, \\(X\\)-type stabilizers\nare associated with \\((i-1)\\)-faces, while \\(Z\\)-type stabilizers are\nassociated with \\(i+1\\)-faces. Such extensions are often called the \\(D\\)-dimensional surface or \\(D\\)-dimensional toric codes.\n\nThe stabilizers of the surface code on the 2-dimensional torus are generated\nby star operators \\(A_v\\) and plaquette operators \\(B_p\\).  Each star operator\nis a product of four Pauli-\\(X\\) operators on the edges adjacent to a vertex\n\\(v\\) of the lattice; each plaquette operator is a product of four Pauli-\\(Z\\)\noperators applied to the edges adjacent to a face, or plaquette, \\(p\\) of the\nlattice (<figure:toric-code-operators>).\n\n<Figure>\n\nThe two-dimensional toric code encodes two logical qubits.  We denote by\n\\(\\overline{X}_i,\\overline{Z}_i\\) the logical Pauli-\\(X\\) and Pauli-\\(Z\\)\noperator of the \\(i\\)-th logical qubit.  They can are represented by strings\nof Pauli-\\(X\\) operators or Pauli-\\(Z\\) operators that wrap around the torus\nas shown in <figure:toric-code-operators>.\n", "notes": ["Surfmap framework provides a way to stitch the surface code to various superconducting-circuit geometries by assigning each superconducting qubit to be either a physical or ancilla qubit, designing stabilizer measurement circuits, and scheduling stabilizer measurements [2111.13729].", "2D and 3D surface code visualization\ntool <http://gui.quantumcodes.io/>.\n", "Tutorials from error-correction perspective by\nJ. Haah <https://boulderschool.yale.edu/2018/boulder-school-2018-lecture-notes>\nand condensed-matter perspective by\nM. Levin\nand C. Nayak <https://boulderschool.yale.edu/2016/boulder-school-2016-lecture-notes>.\n"]}, "homological_cv": {"short_name": "", "name": "Homological bosonic code", "protection": "Protects against certain types of erasure errors (depending on the specific dimension). Certain constructions also protect arbitrary sized errors on multiple photon states.", "features": {"transversal_gates": "", "decoders": ["Decoding requires a different circuit for each possible erasure error, with no general circuit decoding any possible erasure error. Every circuit relies on a generalized conditional rotation, which Ref. [1601.02544] calls the QND Gate and which is defined as \\(QND_c | x , y \\rangle = |x + c y, y \\rangle\\)."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Encoding depends on the specific dimension, but can generally be done using generalized conditional-rotation and Fourier-transform gates."]}, "physical": "oscillators", "realizations": ["No experimental realization. However, Ref. [1601.02544] describes a potential experimental optical procedure for the simplest non-trival code with 5 modes."], "code_id": "homological_cv", "logical": "oscillators", "introduced": "[1601.02544]", "description": "An \\([[n,1]]_{\\mathbb{R}}\\) oscillator-into-oscillator CSS stabilizer code<code:oscillator_stabilizer> defined using homological structres associated with an \\(n-1\\) simplex. Relevant to the study of spacetime replication of quantum information [1210.0913].\n\nStabilizer generators are defined by two orthogonal subspaces of the \\(C_1\\) in the chain complex. \\(C_X = \\partial_2 C_2\\) and \\(C_P = \\partial_1^T Q\\) for some \\(Q \\subset C_0\\). The standard approach would use \\(Q = C_0\\), which would mean the logical dimension would be the dimension of the 1st homology group \\(H^1\\). However, \\(H^1\\) is trivial for the \\(n-1\\) simplex, so one chooses \\(Q \\neq C_0\\) such that exactly one stabilizer is removed, yielding a stabilizer code instead of a single stabilized state.'\n", "notes": []}, "hybrid_qudit_oscillator": {"short_name": "", "name": "Hybrid qudit-oscillator code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "hybrid_qudit_oscillator", "logical": "groups", "introduced": "", "description": "Encodes a \\(K\\)-dimensional logical Hilbert space into \\(n_1\\) qudits of dimension \\(q\\) and \\(n_2 \\neq 0\\) oscillators, i.e., the Hilbert space of \\(\\ell^2\\)-normalizable functions on \\(\\mathbb{Z}_q^{n_1} \\times \\mathbb{R}^{n_2}\\).", "notes": []}, "gkp": {"short_name": "GKP", "name": "Gottesman-Kitaev-Preskill (GKP) code", "protection": "For stabilizer \\(\\hat{S}_q(2\\alpha),\\hat{S}_p(2\\beta)\\), code can correct displacement errors up to \\(\\frac{\\alpha}{2}\\) in the \\(q\\)-direction and \\(\\frac{\\beta}{2}\\) at \\(p\\)-direction. Approximately protects against photon loss errors [10.1103/PhysRevA.93.012315], outperforming most other codes designed to explicitly protect against loss [1708.05010]. Very sensitive to dephasing errors [10.1103/PRXQuantum.2.020101]. A biased-noise GKP error correcting code can be prepared by choosing \\(\\alpha\\neq \\beta\\).", "features": {"transversal_gates": "", "decoders": ["Syndrome measruement of displacement error can be done by applying a controlled-displacement controlled by an ancilla qubit. The syndrome information can be obtained by measuring the ancilla qubit after controlled-displacement opearation. See Section. 2D in [10.1103/PRXQuantum.2.020101].", "Pauli \\(X\\),\\(Y\\) and \\(Z\\) measurements can be performed by measuring \\(-\\hat{p},\\hat{x}-\\hat{p}\\) and \\(\\hat{x}\\) repectively. If the measurement outcome is closed to an even multiple of \\(\\sqrt{\\pi}\\), then the outcome is +1. If the measurement outcome is closed to an odd multiple of \\(\\sqrt{\\pi}\\), then the outcome is -1. See Section. 2D in [10.1103/PRXQuantum.2.020101]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Clifford gates can be realized by performing linear-optical operations, sympletic transformations and displacements, all of which are Gaussian operations. Pauli gates can be performed using displacement operators. Clifford gates are fault tolerant in the sense that they map bounded-size errors to bounded-size errors [quant-ph/0008040].", "Error correction scheme is fault-tolerant to displacement noise as long as all input states have displacement errors less than \\(\\sqrt{\\pi}/6\\) [quant-ph/0510107]."], "general_gates": ["By applying GKP error correction to Gaussian input states, universality can be achieved without non-Gaussian elements [10.1103/PhysRevLett.123.200502]."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Preparation of approximate GKP states is studied both theoretically and experimentally on circuit-QED platforms, by putting the GKP lattice inside a Gaussian envelope [10.1103/PhysRevA.93.012315,10.1103/PhysRevA.97.022341,10.1038/s41586-020-2603-3].", "Dissipative stabilization of finite-energy GKP states using stabilizers conjugated by a damping operator, i.e., a damped exponential of the total occupation number [2009.07941,2010.09681]."]}, "physical": "oscillators", "realizations": ["GKP encoding realized in the motional degree of freedom of a trapped ion [1807.01033], followed by realization of dissipative stabilization scheme [2010.09681].", "A reduced form of GKP error correction, consisting of measuring only the direction of a displacement error with an ancillary transmon, realized in a microwave cavity coupled to superconducting circuits [1907.12487]."], "code_id": "gkp", "logical": "qudits", "introduced": "[quant-ph/0008040]", "description": "Bosonic qudit-into-oscillator code whose stabilizers are oscillator displacement operators \\(\\hat{S}_q(2\\alpha)=e^{-2i\\alpha \\hat{p}}\\) and \\(\\hat{S}_p(2\\beta)=e^{2i\\beta \\hat{x}}\\). To ensure \\(\\hat{S}_q(2\\alpha)\\) and \\(\\hat{S}_p(2\\beta)\\) generate a stabilizer group that is Abelian, there is another constraint that \\(\\alpha\\beta=2k\\pi\\) where \\(k\\) is an integer. Codewords can be expressed as equal weight superpositions of coherent states on an infinite lattice, such as a square lattice in phase space with spatial period \\(2\\sqrt{\\pi}\\). The exact GKP state is non-normalizable, so approximate constructs have to be considered.", "notes": ["GKP codes were obtained after iterative numerical optimization of encoding and recovery against photon loss, starting with Haar-random states [1801.07271]."]}, "oscillators_into_oscillators": {"short_name": "", "name": "Oscillator-into-oscillator code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "oscillators", "realizations": [], "code_id": "oscillators_into_oscillators", "logical": "oscillators", "introduced": "[quant-ph/9711021,quant-ph/9711049]", "description": "Encodes Hilbert space of \\(\\ell^2\\)-normalizable functions on \\(\\mathbb{R}^k\\) into that on \\(\\mathbb{R}^n\\). Usually denoted as \\(((n,k))_{\\mathbb{R}}\\).", "notes": []}, "niset_andersen_cerf": {"short_name": "", "name": "Niset-Andersen-Cerf code", "protection": "The deterministic protocol protects against a single erasure error on a known mode. This recovers one state perfectly and the other state with fidelity \\(F = \\frac{1}{1 + e^{-2 r}}\\) for an initial EPR pair squeezed with variance \\(e^{-2r}\\). The probabalistic protocol utilizes post-selection to protect against multiple erasures with state-dependent fidelity.", "features": {"transversal_gates": "", "decoders": ["Optical decoder using three beam splitters, electronic gain detectors, and two phase-insensitive amplifiers as described in Ref. [0710.4858]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["After an EPR pair preparation, use 2 continuous CNOT and 2 continuous inverse CNOT gates to entangle a bosonic EPR pair with initial states \\(|\\alpha \\rangle\\) and \\(|\\beta \\rangle\\).", "Alternate optical encoder using a two-mode squeezed vacuum state and two balanced beam splitters to mix the input coherent states with the EPR pair."]}, "physical": "oscillators", "realizations": ["Realized in Ref. [10.1038/nphoton.2010.168] in an optical system with 3 beam-splitters. The fidelity peaked around \\(0.6\\) for deterministic approach, and around \\(0.77\\) for the probabilistic approach (with a 25% chance of error)."], "code_id": "niset_andersen_cerf", "logical": "oscillators", "introduced": "[0710.4858]", "description": "Encodes two-mode coherent states \\(\\{|\\alpha\\rangle, |\\beta\\rangle\\}\\) over two modes into four modes such that the values \\((\\alpha,\\beta)\\) are recoverable after a single-mode erasure. There are two variations of the storage procedure: a deterministic protocol that offers recovery against a single mode erasure, and a probabalistic that can protect against multiple errors with post selection. This code is effectively protecting classical information stored in \\((\\alpha,\\beta)\\) using quantum operations.", "notes": []}, "oscillator_stabilizer": {"short_name": "", "logical": null, "introduced": "", "description": "Bosonic code whose codespace is defined as the common \\(+1\\) eigenspace of a group of mutually commuting displacement operators. Displacements form the stabilizers of the code, and, have continuous eigenvalues, in contrast with the discrete set of eigenvalues of qubit stabilizers. Exact codewords are non-normalizable, so approximate constructions have to be considered.\n\nStabilizer codewords encoding a finite-dimensional codespace admit a discrete infinite stabilizer group. Such qudit-into-oscillator<code:qudits_into_oscillators> stabilizer codes are GKP<code:gkp> and multimode GKP<code:multimodegkp> codes.\n\nStabilizer codewords encoding a logical oscillator admit either a discrete or a continuous stabilizer group. The former, called GKP-stabilizer codes, are obtained from multimode GKP codes by removing stabilizer generators for some of the modes. The latter can be defined in terms of the continuous group's Lie algebra, i.e., as the common \\(0\\)-eigenvalue eigenspace of mutually commuting linear combinations of oscillator position and momentum operators called annihilators. An \\(((n,k,d))_{\\mathbb{R}}\\) oscillator-into-oscillator<code:oscillators_into_oscillators> stabilizer code is denoted as \\([[n,k,d]]_{\\mathbb{R}}\\), where \\(d\\) is the code's distance.\n\nA bosonic stabilizer code admitting a set of mutually commuting operators (either annihilators or displacements) such that each operator consists of either position or momentum operators is called a bosonic CSS code.\n", "name": "Bosonic stabilizer code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "Protective properties can be delineated in terms of the annihilators or displacements. If an error operator does not commute with a stabilizer group element, then that error is detectable. Oscillator-into-oscillator stabilizer codes protect against erasures of a subset of modes, while GKP codes protect against sufficiently small displacements in any number of modes.", "physical": "oscillators", "notes": [], "realizations": [], "code_id": "oscillator_stabilizer"}, "gkp-stabilizer": {"short_name": "", "logical": null, "introduced": "[1903.12615]", "description": "Stub.", "name": "GKP-stabilizer code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "oscillators", "notes": [], "realizations": [], "code_id": "gkp-stabilizer"}, "oscillators": {"short_name": "", "logical": null, "introduced": "", "description": "Also called an oscillator or a continuous-variable (CV) code. Encodes logical Hilbert space, finite- or infinite-dimensional, into a physical Hilbert space that contains at least one oscillator (a.k.a. bosonic mode or qumode). States of a single oscillator are elements of the Hilbert space of \\(\\ell^2\\)-normalizable functions on \\(\\mathbb{R}\\)). Ideal codewords may not be normalizable because the space is infinite-dimensional, so approximate versions have to be constructed in practice.", "name": "Bosonic code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "An error set relevant to Fock-state bosonic<code:fock_state> codes is the set of loss operators associated with the amplitude damping (a.k.a. photon loss or attenuation) noise channel, a common form of physical noise in bosonic systems. For a single mode, loss operators are proportional to powers of the mode's annihilation operator \\(a=(\\hat{x}+i\\hat{p})/\\sqrt{2}\\), where \\(\\hat x\\) (\\(\\hat p\\)) is the mode's position (momentum) operator, and with the power signifying the number of particles lost during the error. For multiple modes, error set elements are tensor products of elements of the single-mode error set. A definition of distance associated with this error set is the minimum weight of a loss error that implements a nontrivial logical operation in the code.\n\nAn error set relevant to bosonic stabilizer<code:oscillator_stabilizer> codes is the set of displacement operators, a bosonic analogue of the Pauli string basis for qubit<code:qubits_into_qubits> codes. For a single mode, its elements are products of exponentials of the mode's position and momentum operators, acting on the mode's position states \\(|y\\rangle\\) for \\(y\\in\\mathbb{R}\\) as\n\\begin{align}\n  e^{-iq\\hat{p}}\\left|y\\right\\rangle =\\left|y+q\\right\\rangle \\,\\,\\text{ and }\\,\\,e^{iq\\hat{x}}\\left|y\\right\\rangle =e^{iq y}\\left|y\\right\\rangle ~,\n\\end{align}\nwhere \\(q\\in\\mathbb{R}\\). For multiple modes, error set elements are tensor products of elements of the single-qudit error set, characterized by the vector of coefficients \\(\\xi\\in\\mathbb{R}^{2n}\\).\n\nThe displacement error set is a unitary basis for trace-class linear operators on the \\(n\\)-mode Hilbert space that is Dirac-orthonormal under the Hilbert-Schmidt inner product [10.1103/PhysRev.177.1857]. There are two definitions of code distance associated with displacements. The definition inherited from qubit codes is the minimum weight of a displacement operator (i.e., number of nonzero entries in \\(\\xi\\)) that implements a nontrivial logical operation in the code. The second definition is the minimum Euclidean distance (i.e., \\(\\ell^2\\)-norm of \\(\\xi\\)) such that the corresponding displacement implements a nontrivial logical operation in the code.\n", "physical": "oscillators", "notes": [], "realizations": [], "code_id": "oscillators"}, "qudits_into_oscillators": {"short_name": "", "name": "Qudit-into-oscillator code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Given an encoding of a finite-dimensional code, a decoder that yields the optimal entanglement fidelity can be obtained by solving a semi-definite program [quant-ph/0109155,quant-ph/0307138] (see also Ref. [0706.3400]). This approximate QEC technique can be adapted to bosonic codes as long as they are restricted to a finite-dimensional subspace of the oscillator Hilbert space [1708.05010]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "oscillators", "realizations": [], "code_id": "qudits_into_oscillators", "logical": "qudits", "introduced": "", "description": "Encodes \\(K\\)-dimensional Hilbert space into Hilbert space of \\(\\ell^2\\)-normalizable functions on \\(\\mathbb{R}^n\\).", "notes": []}, "very-small-logical-qubit": {"short_name": "", "name": "Very small logical qubit (VSLQ) code", "protection": "Passively protects against single photon loss.", "features": {"transversal_gates": "", "decoders": ["Logical qubit can be measured with physical qubit measurements along \\(X\\). Can be implemented by engineering a coupling of one of the qubits to a readout cavity via the interaction \\(\\sigma_x (a+a^\\dagger)\\) [10.1103/PhysRevLett.115.203601]. This results in an \\(X\\)-dependent shift of the readout cavity resonance which can be measured."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Single logical qubit operations implemented by resonant physical qubit driving and phase shifting the SQUID drives.", "A CZ gate between two logical qubits implemented by coupling devices through another driven SQUID and applying a pulse to the coupling squid simultaneously with a single qubit operation on one of the logical qubits."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Engineering a circuit made of two transmons and two oscillators coupled through three driven superconducting quantum interference devices (SQUIDs) results in passive stabilization of the logical states."]}, "physical": "groups", "realizations": [], "code_id": "very-small-logical-qubit", "logical": "qubits", "introduced": "[10.1103/PhysRevLett.116.150501]", "description": "The two logical codewords are \\(|\\pm\\rangle \\propto (|0\\rangle\\pm|2\\rangle)(|0\\rangle\\pm|2\\rangle)|0\\rangle|0\\rangle\\), where the total Hilbert space is the tensor product of two qudits (whose ground states \\(|0\\rangle\\) and second excited states \\(|2\\rangle\\) are used in the codewords) and two oscillators. In the original proposal for implementation, the single logical qubit is given by the two lowest energy states of a circuit composed of two transmons coupled to two lossy resonators, but the resonators can also be thought of as qubits since only a few low-lying Fock states are used by the code.", "notes": []}, "multimodegkp": {"short_name": "", "name": "Multi-mode GKP code", "protection": "The level of protection against displacement errors is quantified by the Euclidean code distance \\(\\Delta=\\min_{x\\in {\\mathcal{L}}^{\\perp}\\setminus {\\mathcal{L}}} \\|x\\|_2\\) [2109.14645].", "features": {"transversal_gates": "", "decoders": ["The MLD decoder for Gaussian displacement errors is realized by evaluating a lattice theta function, and in general the decision can be approximated by either solving (approximating) the closest vector problem (CVP) or by using other effective iterative schemes when e.g. the lattice represents a concatenated GKP code [1810.00047,1908.03579,2109.14645,2111.07029]."], "rate": "Transmission schemes with multimode GKP codes achieve, up to a constant-factor offset, the capacity of displacement-noise and thermal-noise Gaussian loss channels [quant-ph/0105058,1708.07257,1801.04731,1801.07271].", "code_capacity_threshold": [], "fault_tolerance": ["Logical Clifford operations are given by Gaussian unitaries, which map bounded-size errors to bounded-size errors [quant-ph/0008040]."], "general_gates": ["By applying GKP error correction to Gaussian input states, universality can be achieved without non-Gaussian elements [1903.00012]."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Multi-mode GKP codes with fixed \\(n\\) and prime-dimensional logical Hilbert space are symplectically related to a disjoint product of single-mode GKP codes on \\(n\\) modes, such that encoding via Gaussian unitaries is possible.", "Dissipative stabilization of finite-energy GKP states using stabilizers conjugated by a damping operator, i.e., a damped exponential of the total occupation number [2009.07941,2201.12337]."]}, "physical": "oscillators", "realizations": [], "code_id": "multimodegkp", "logical": "qudits", "introduced": "[quant-ph/0008040,quant-ph/0105058]", "description": "Generalization of the GKP code to \\(n\\) bosonic modes whose stabilizer group is an infinite countable group of oscillator displacement operators.\n\nDisplacement operators on \\(n\\) modes can be written as\n\\begin{align}\nD(\\xi) = \\exp \\left\\{-i \\sqrt{2\\pi} {\\xi}^\\mathrm{T} J \\hat{q} \\right\\} , \\quad \\xi \\in \\mathbb{R}^{2n}~,\n\\end{align}\nwhere \\(\\hat{q}\\) is a \\(2n\\)-dimensional vector position and momentum operators of the modes, the symplectic form\n\\begin{align}\nJ = \\begin{pmatrix} 0 & 1 \\\\ -1 & 0 \\end{pmatrix} \\otimes I_n = \\begin{pmatrix}\n0 &  I_n \\\\\n-I_n  & 0 \\end{pmatrix}~,\n\\end{align}\nand \\(I_n\\) is the identity matrix. A group generated by a set of independent displacement operators is given by a lattice \\({\\mathcal{L}}\\)\n\\begin{align}\n\\langle D(\\xi_1) ,\\dots,  D(\\xi_{2n})  \\rangle = \\{ e^{ i \\phi_M (\\xi) } D(\\xi) ~\\vert~ \\xi \\in {\\mathcal{L}} \\}\n\\end{align}\nand becomes a valid stabilizer group when every symplectic inner product between lattice vectors yields an integer. In other words, the corresponding lattice is symplectically integral, corresponding to an integer-valued symplectic Gram matrix \\(A\\),\n\\begin{align}\nA_{ij}={\\xi}^T_i J \\xi_j \\in \\mathbb{Z}~.\n\\end{align}\n\nThe centralizer for this stabilizer group within the displacement operators can be identified with the symplectic dual lattice \\({\\mathcal{L}}^{\\perp}\\) (i.e. all points in \\(\\mathbb{R}^{2n}\\) that have integer symplectic inner product with all points in \\({\\mathcal{L}}\\) ), such that logical operations are identified with the dual quotients \\({\\mathcal{L}}^{\\perp}/{\\mathcal{L}}\\). The size of this dual quotient is the determinant of the Gram matrix, yielding the logical dimension \\(d=\\sqrt{\\| \\det{A}\\|}\\) [quant-ph/0008040].\n", "notes": []}, "chuang-leung-yamamoto": {"short_name": "", "name": "Chuang-Leung-Yamamoto code", "protection": "Protects against amplitude damping for up to \\(t = d-1\\) excitation losses. Defining the spacing between two Fock states \\(|u_1\\cdots u_n\\rangle\\) and \\(|v_1\\cdots v_n\\rangle\\),\n\\begin{align}\n\\text{Spacing}(u,v) = \\frac{1}{2}\\sum_{i=1}^n |u_i - v_i|,\n\\end{align}\nthe code distance \\(d\\) can be defined as the minimial spacing between Fock states making up the codewords.\n", "features": {"transversal_gates": "", "decoders": ["Destructive decoding with a photon number measurement on each mode.", "State can be decoded with a network of beamsplitters, phase shifters, and Kerr media."], "rate": "Code rate is \\(\\frac{k}{n \\log_2(N+1)}\\). To correct the loss of up to \\(t\\) excitations with \\(K+1\\) codewords, a code exists with scaling \\(N \\sim t^3 K/2\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Photon Fock state input into a network of beamsplitters, phase shifters, and Kerr media. These operations all preserve total photon number. Beamsplitters and phase shifters take annihilation operators to linear combinations of annihilation operators, and the transformation matrix is unitary. The operations corresponding to Kerr nonlinear media are diagonal in the Fock basis, but they implement phases that in general depend nonlinearly on the number of photons in each mode. State preparation may require ancillary modes and be conditioned on photon-number measurement results."]}, "physical": "oscillators", "realizations": [], "code_id": "chuang-leung-yamamoto", "logical": "qubits", "introduced": "[10.1103/PhysRevA.56.1114]", "description": "Bosonic Fock-state code that encodes \\(k\\) qubits into \\(n\\) oscillators, with each oscillator restricted to having at most \\(N\\) excitations. Codewords are superpositions of oscillator Fock states which have exactly \\(N\\) total excitations, and are either uniform (i.e., balanced) superpositions or unbalanced superpositions. Codes can be denoted as \\([[N,n,2^k,d]]\\), which conflicts with stabilizer code<code:stabilizer> notation.", "notes": []}, "binomial": {"short_name": "", "name": "Binomial code", "protection": "An \\((N, S)\\) binomial code protects against \\(L\\) boson losses, \\(G\\) boson gains, and dephasing up to \\(\\hat{n}^{D}\\), where \\(S=L+G\\) and \\(N = \\mathrm{max}(L,G,2D)\\). Binomial codes approximately protect against continuous-time amplitude damping, boson loss and gain, and dephasing.", "features": {"transversal_gates": "", "decoders": ["Photon loss and dephasing errors can be detected by measuring the phase-space rotation \\(\\exp\\left(2\\pi\\mathrm{i} \\hat{n} / (S+1)\\right)\\) and the check operator \\(J_x/J\\) in the spin-coherent state language, where \\(J\\) is the total angular momentum and \\(J_x\\) is the angular momentum in the \\(x\\) direction [1708.05010]. This type of error correction fails for errors that are products of photon loss/gain and dephasing errors. However, for certain \\((N,S)\\) instances of the binomial code, detection of these types of errors can be done.", "Recovery can be done via projective measurements and unitary operations [1602.00008,1708.05010]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "oscillators", "realizations": ["Realized in microwave cavities coupled to superconducting circuits [10.1038/s41567-018-0414-3]."], "code_id": "binomial", "logical": "qudits", "introduced": "[1602.00008]", "description": "Bosonic rotation codes designed to approximately protect against errors consisting of powers of raising and lowering operators up to some maximum power. Binomial codes can be thought of as spin-coherent states embedded into an oscillator [1708.05010]. The \\(q\\)-dimensional qudit \\((N, S)\\) binomial codeword states are \\(\\{|\\overline{i}\\rangle\\mid i\\in \\mathbb Z_q \\}\\), where\n  \\begin{align}\n    |\\overline{i}\\rangle = \\frac{1}{\\sqrt{q^N}} \\sum_{\\substack{p=0\\\\p\\equiv i \\pmod{q}}}^{(q-1)(N+1)} \\sqrt{\\binom{N+1}{p}_q} \\ket{p(S+1)}.\n  \\end{align}\n  Here, \\(\\binom{N+1}{p}_q\\) are extended binomial coefficients, or polynomial coeffiients, defined recursively as\n  \\begin{align}\n    \\binom{n}{m}_1 \\equiv 1,\\quad \\binom{n}{m}_q \\equiv \\sum_{k=0}^n \\binom{n}{k}\\binom{k}{m-k}_{q-1}.\n  \\end{align}\n", "notes": ["The mean occupation number, or average Fock-state number in maximally-mixed state of the code, is \\((N+1)(S+1)(q-1)/2 \\), where \\(q\\) is the qudit dimension."]}, "wasilewski-banaszek": {"short_name": "", "name": "Wasilewski-Banaszek code", "protection": "Protects against single photon loss in any one mode.", "features": {"transversal_gates": "", "decoders": ["Destructive measurement with photon number measurements on each mode."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Single-qubit gates implemented using linear optical networks, sometimes with the addition of auxiliary modes with vacuum input and (conditional) output."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["A qubit in the dual-rail code can be transferred to this code via a linear optical network using four ancillary modes, each with one photon input. Successful encoding is conditioned on measuring the state \\(|110\\rangle\\) on the last three modes."]}, "physical": "oscillators", "realizations": [], "code_id": "wasilewski-banaszek", "logical": "qubits", "introduced": "[10.1103/PhysRevA.75.042316]", "description": "Three-oscillator Fock-state code encoding a single logical qubit using codewords \\begin{align} \\begin{split} |\\overline{0}\\rangle &= \\frac{1}{\\sqrt{3}}(|003\\rangle+|030\\rangle+|300\\rangle)\\\\ |\\overline{1}\\rangle &= |111\\rangle \\end{split}. \\end{align}", "notes": []}, "dual_rail": {"short_name": "", "name": "Dual-rail code", "protection": "This is an error-detecting code against one photon loss event; it is often used in photonic quantum devices because of its ease of realization. A single loss event can be detected because, after the loss occurs, the output state \\(|00\\rangle\\) is orthogonal to the codespace. Recovery is not possible, so a successful run of a quantum circuit is conditioned on not losing a photon during the circuit.\n\nFor Deutsch''s  problem specifically, this code protects against errors resulting in states that have the correct photon number, but in the wrong modes [10.1103/PhysRevA.52.3489].\n", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["General gates are performed using beamsplitters and Kerr non-linearities. Universal quantum computing can be achieved with photons in dual-rail encodings using the KLM protocol [10.1038/35051009] with only linear optical elements and photon detectors."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "dual_rail", "logical": "qubits", "introduced": "[10.1103/PhysRevA.52.3489]", "description": "Two-mode code encoding a logical qubit in Fock states with one excitation. The logical-zero state is represented by \\(|01\\rangle\\), while the logical-one state is represented by \\(|10\\rangle\\).", "notes": ["For Deutsch's problem [10.1098/rspa.1992.0167] with optical qubits, error correction using photon number detection reduces the error probability from \\(\\frac{1}{4} (1+e^{-\\gamma}-2e^{-3\\gamma/2}) \\)   to \\(\\frac{1}{2} (1- \\text{sech} \\gamma/2)\\)."]}, "bosonic_rotation": {"short_name": "", "name": "Bosonic rotation code", "protection": "Losses or gains less than \\(N\\) are detectable. Dephasing rotations \\(\\exp(\\mathrm{i}\\theta \\hat{n})\\) can be detected whenever \\(\\theta\\) is roughly less than \\(\\pi/N\\). To get precise bounds on \\(\\theta\\), one needs to analyze the particular bosonic rotation code.", "features": {"transversal_gates": "", "decoders": ["One can distinguish (destructively) the codewords by performing a Fock-state number measurement. If a Fock state state \\(|n\\rangle\\) is measured, then one rounds to the nearest integer of the form \\((kq+j)/N\\), and deduces that the true state was \\(|\\overline{j}\\rangle\\).", "One can distinguish states in the dual basis by performing phase estimation on \\(\\mathrm{e}^{\\mathrm{i} \\theta \\hat n}\\). One then rounds the resulting \\(\\theta\\) to the nearest number \\(2\\pi j / qN\\) in order to determine which dual basis state \\(j \\in \\mathbb Z_q\\) it came from.", "Autonomous quantum error correction schemes for \\(S=1\\) codes [2203.09234]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["The logical Pauli-\\(Z\\) gate can be the discrete rotation operator \\(\\mathrm{e}^{\\mathrm{i} \\pi \\hat n /N}\\), and the logical Pauli-\\(X\\) gate can be the (note: non-unitary) number-translation operator \\(\\sum_{n=0}^\\infty |n\\rangle\\bra{n+N}\\).", "For qubit codes, a logical phase gate is \\(S = \\mathrm{e}^{\\pi \\mathrm{i} \\hat n^2 / 2N^2}\\).", "The \\(T = \\mathrm{diag}(1,\\exp(\\mathrm{i}\\pi/4))\\) gate can be done via gate teleportation and a resource state \\(\\vert 0_N\\rangle + \\exp(\\mathrm{i}\\pi/4) \\vert 1_N \\rangle\\).", "A controlled-rotation gate between an order \\(N\\) rotation code and an order \\(M\\) rotation code is \\(\\mathrm{CROT}_{NM} = \\mathrm{e}^{(2\\pi\\mathrm{i} / qNM) \\hat n \\otimes \\hat n}\\)."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["The optimal way to prepare codewords depends on the exact rotation code in question [1901.08071]."]}, "physical": "oscillators", "realizations": [], "code_id": "bosonic_rotation", "logical": "qudits", "introduced": "[1901.08071]", "description": "A single-mode Fock-state bosonic code whose codespace is preserved by a phase-space rotation by a multiple of \\(2\\pi/N\\) for some \\(N\\). The rotation symmetry ensures that encoded states have support only on every \\(N^{\\textrm{th}}\\) Fock state. For example, single-mode Fock-state codes for \\(N=2\\) encoding a qubit admit basis states that are, respectively, supported on Fock state sets \\(\\{|0\\rangle,|4\\rangle,|8\\rangle,\\cdots\\}\\) and \\(\\{|2\\rangle,|6\\rangle,|10\\rangle,\\cdots\\}\\).\n\nEncoding of a \\(q\\)-dimensional logical qudit admit a basis whose elements are eigenstates of the rotation operator \\(\\exp\\left(\\mathrm{i} 2\\pi \\hat{n}/qN \\right)\\), where \\(\\hat{n}\\) is the number operator diagonal in the Fock basis. Basis elements are of the form \\(\\sum_{j=0}^\\infty c_j |(kq+j)N \\rangle\\) for some coefficients \\(c_j\\) and \\(k\\). This is because the rotation acting on a general Fock-state superposition \\(\\sum_n a_n |n\\rangle\\) yields \\(\\sum_n a_n \\exp\\left(\\mathrm{i} 2\\pi n / qN \\right) |n\\rangle\\). In order for a codeword to be an eigenvector of this operation, \\(a_n\\) must be zero whenever \\(n \\neq (kq+j)N\\) for some \\(k\\).\n\nCodewords can be uniquely specified by choosing a primitive state \\(|\\Theta\\rangle\\). To ensure valid (orthogonal and nonzero) codewords, \\(|\\Theta\\rangle\\) must satisfy the following requirement: for each \\(j \\in \\mathbb{Z}_q\\), \\(|\\Theta\\rangle\\) must have support on the Fock state \\(|(k_j q+j)N\\rangle\\) for at least one \\(k_j \\in \\mathbb{N}_0\\). From such a primitive, the codewords \\(\\{|\\overline{j}\\rangle \\mid j \\in \\mathbb{Z}_q\\}\\) are constructed as\n\\begin{align}\n|\\overline{j}\\rangle \\propto \\sum_{m=0}^{2N-1} \\mathrm{e}^{2\\pi \\mathrm{i} m (\\hat n  / N + j) / q} |\\Theta\\rangle~.\n\\end{align}\n", "notes": []}, "cat": {"short_name": "", "name": "Cat code", "protection": "Due to the spacing between sets of Fock states, the distance between two distinct logical states is \\(d=S+1\\). Hence, this code is able to detect \\(S\\)-photon loss error. Two-legged cat codes (\\(S=1\\)) do not protect against loss events, but there exist modifications based on sign alternation [1901.05358] or squeezing [2201.02570] that add such protection.", "features": {"transversal_gates": "", "decoders": ["Measurement in the Fock basis. For a \\(2(S+1)\\) cat code, a number measurement returns outcome \\(2(S+1)k\\), if \\(k\\) is even, then it corresponds to logical 0 state; if \\(k\\) is odd, then it corresponds to logical 1 state."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Bias-preserving CNOT gate [1905.00450] is part of a universal bias-preserving gate set that can be made fault tolerant using concatenation [1904.09474,1905.00450]."], "general_gates": ["For \\(S=1\\), universal gates can be performed using displacement operators and a rotation based on the Kerr nonlinearity [1312.2017]. For \\(S=2\\), squeezing replaces displacements.", "Holonomic gates utilizing the Berry phase of coherent states are universal [1503.00194].", "Bias-preserving CNOT gate utilizing a topological Berry phase [1905.00450]."], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Lindbladian-based dissipative encoding utilizing multi-photon absorption [1312.2017].", "Hamiltonian-based 'Kerr-cat' encoding utilizing the Kerr effect [1605.09408] (see also Ref. [1510.02566]).", "Combined dissipative and Hamiltonian-based encoding utilizing two-photon exchange for \\(S=1\\) codes [2112.05545]."]}, "physical": "oscillators", "realizations": ["Two-legged (\\(S=1\\)) cat code has been realized in a superconducting circuit device by the Devoret group [1412.4633]. Exponential suppression of bit-flip errors achieved [1907.11729] up to a bit-flip time of 1 ms. A bit-flip time of up to 1 sec has been achieved while away from the logical-qubit regime [2204.09128].", "Four-legged (\\(S=2\\)) cat code has been realized in a superconducting circuit device [10.1038/nature18949]. This paper is the first to reach break-even error-correction, where the lifetime of a logical qubit is on par with the lifetime of the noisiest constituent of the system."], "code_id": "cat", "logical": "qubits", "introduced": "[quant-ph/9809037,1207.0679]", "description": "Rotation-symmetric bosonic Fock-state code encoding a \\(q\\)-dimensional qudit into one oscillator. Codewords for a qubit code (\\(q=2\\)) consist of a coherent state \\(|\\alpha\\rangle\\) projected onto a subspace of Fock state number modulo \\(2(S+1)\\). The logical state \\(|\\overline{0}\\rangle\\) is in the \\(\\{|0\\rangle , |2(S+1)\\rangle , |4(S+1)\\rangle \\cdots \\}\\) Fock-state subspace, while \\(|\\overline{1}\\rangle\\) is in the \\(\\{|(S+1)\\rangle, |3(S+1)\\rangle , |5(S+1)\\rangle , |7(S+1)\\rangle \\cdots \\}\\) subspace. An alternative basis, valid for for general \\(q\\) and \\(\\alpha\\neq 0\\), consists of \\(q\\) coherent states distributed equidistanctly around a circle in phase space of radius \\(\\alpha\\).\n", "notes": []}, "constant_excitation_permutation_invariant": {"short_name": "", "name": "Constant-excitation permutation-invariant code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "constant_excitation_permutation_invariant", "logical": "qubits", "introduced": "[1809.09801]", "description": "Stub.\n", "notes": []}, "number_phase": {"short_name": "", "name": "Number-phase code", "protection": "Number-phase codes of order \\(N\\) detect up to \\(N\\) photon loss or gain errors, and dephasing up to \\(\\theta = \\pi/N\\).", "features": {"transversal_gates": "", "decoders": ["Measurement done in the logical \\(X\\), or dual, basis has zero uncertainty in the case of ideal number phase codes. Approximate number-phase codes are characterized by vanishing phase uncertainty.", "Number measurement can be done by using the CROT gate \\(\\mathrm{e}^{(2\\pi \\mathrm{i} / NM) \\hat n \\otimes \\hat n}\\). See Section 4.B.1 of Ref. [1901.08071]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Fault-tolerant computation schemes with number-phase codes have been proposed based on concatenation with Bacon-Shor subsystem codes [1901.08071]."], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "oscillators", "realizations": [], "code_id": "number_phase", "logical": "qubits", "introduced": "[1901.08071]", "description": "Bosonic rotation code consisting of superpositions of Pegg-Barnett phase states [10.1088/0305-4470/19/18/030],\n\\begin{align}\n|\\phi\\rangle \\equiv \\frac{1}{\\sqrt{2\\pi}}\\sum_{n=0}^{\\infty} \\mathrm{e}^{\\mathrm{i} n \\phi} \\ket{n}.\n\\end{align}\nSince phase states and thus the ideal codewords are not normalizable, approximate versions need to be constructed. The codes' key feature is that, in the ideal case, phase measurement has zero uncertainty, making it a good canditate for a syndrome measurement.\n\nLogical states of an order-\\(N\\) number-phase qubit encoding are \\(|\\overline{0}\\rangle= \\sum_{m=0}^{2N-1} |\\phi = m\\pi/N\\rangle\\) and \\(|\\overline{1}\\rangle = \\sum_{m=0}^{2N-1} (-1)^m |\\phi=m\\pi/N\\rangle\\). By performing the summation over \\(m\\), one finds that \\(|\\overline{0}\\rangle\\) is supported on Fock states \\(|2kN\\rangle\\), while \\(|\\overline{1}\\rangle\\) is supported on states \\(|(2k+1)N\\rangle\\), for \\(k \\geq 0\\).\n", "notes": []}, "fock_state": {"short_name": "", "name": "Fock-state bosonic code", "protection": "Code distance \\(d\\) is the minimum distance (assuming some metric) between any two labels of Fock states corresponding to different code basis states. For a single mode, \\(d\\) is the minimum absolute value of the difference between any two Fock-state labels; such codes can detect up to \\(d-1\\) loss events. Multimode distances can be defined analogously; see, e.g., Chuang-Leung-Yamamoto codes<code:chuang-leung-yamamoto>.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "oscillators", "realizations": [], "code_id": "fock_state", "logical": "qudits", "introduced": "", "description": "Qudit-into-oscillator code whose protection against amplitude damping (i.e., photon loss) stems from the use of disjoint sets of Fock states for the construction of each code basis state. The simplest example is the dual-rail code, which has codewords consisting of single Fock states \\(|10\\rangle\\) and \\(|01\\rangle\\). This code can detect a single loss error since a loss operator in either mode maps one of the codewords to a different Fock state \\(|00\\rangle\\). More involved codewords consist of several well-separated Fock states such that multiple loss events can be detected and corrected.", "notes": []}, "group_quantum": {"short_name": "", "name": "Group-based quantum code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "groups", "realizations": [], "code_id": "group_quantum", "logical": "groups", "introduced": "", "description": "Encodes a logical Hilbert space, finite- or infinite-dimensional, into a physical Hilbert space of \\(\\ell^2\\)-normalizable functions on a second-countable unimodular group. For \\(K\\)-dimensional logical subspace and for groups \\(G^{\\times n}\\), can be denoted as \\(((n,K))_G\\). When the logical subspace is the Hilbert space of \\(\\ell^2\\)-normalizable functions on \\(G^{\\times k}\\), can be denoted as \\([[n,k]]_G\\). Ideal codewords may not be normalizable, depending on whether \\(G\\) is continuous and/or noncompact, so approximate versions have to be constructed in practice.", "notes": []}, "rotor_gkp": {"short_name": "", "name": "Rotor GKP code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "groups", "realizations": [], "code_id": "rotor_gkp", "logical": "qudits", "introduced": "[quant-ph/0008040,1911.00099]", "description": "GKP code protecting against small angular position and momentum shifts of a planar rotor.", "notes": []}, "molecular": {"short_name": "", "name": "Molecular code", "protection": "Protects against generalized bit-flip errors \\(g\\in SO_3\\) that are inside the fundamental domain of \\(G/K\\). Protection against phase-flip errors determined by branching rules of irreps of \\(G\\) into those of \\(K\\), and further into those of \\(H\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "groups", "realizations": [], "code_id": "molecular", "logical": "rigid_bodies", "introduced": "[1911.00099]", "description": "Encodes finite-dimensional Hilbert space into the Hilbert space of \\(\\ell^2\\)-normalizable functions on the group \\(SO_3\\). Construction is based on nested subgroups \\(H\\subset K \\subset SO_3\\), where \\(H,K\\) are finite. The \\(|K|/|H|\\)-dimensional logical subspace is spanned by basis states that are equal superpositions of elements of cosets of \\(H\\) in \\(K\\).", "notes": ["Physical space characterizes orientations of a rigid body in 3D, which correspond to rotational states of an asymmetric molecule."]}, "quantum_double": {"short_name": "", "name": "Quantum-double code", "protection": "Error-correcting properties established in Ref. [1908.02829]. The code distance is the number of edges in the shortest non contractible cycle in the tesselation or dual tesselation  [quant-ph/0110143].", "features": {"transversal_gates": "", "decoders": ["For any solvable group \\(G\\), topological charge measurements can be done with an adaptive constant-depth circuit with geometrically local gates and measurements throughout [2205.01933]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["For any solvable group \\(G\\), ground-state preparation and anyon-pair creation can be done with an adaptive constant-depth circuit with geometrically local gates and measurements throughout [2205.01933]. Anyon-pair creation requires an adaptive circuit for any nonabelian \\(G\\)."]}, "physical": "groups", "realizations": [], "code_id": "quantum_double", "logical": "groups", "introduced": "[quant-ph/9707021]", "description": "A family of topological codes, defined by a finite group \\( G \\),  whose generators are few-body operators associated to the stars and plaquettes, respectively, of a tessellation of a two-dimensional surface (with a qudit of dimension \\( |G| \\) located at each edge of the tesselation).\n\nThe physical Hilbert space has dimension \\( |G|^E  \\), where \\( E \\) is the number of  edges in the tessellation. The dimension of the code space is the number of orbits of the conjugation action of \\( G \\) on \\( \\text{Hom}(\\pi_1(\\Sigma),G) \\),  the set of group homomorphisms from the fundamental group of the surface \\( \\Sigma \\) into the finite group \\( G \\) [1908.02829]. When \\( G \\) is abelian, the formula for the dimension simplifies to \\( |G|^{2g} \\), where \\( g \\) is the genus of the surface \\( \\Sigma \\).\n\nThe codespace is the ground-state subspace of the quantum double model Hamiltonian. For nonabelian groups, alternative constructions are possible, encoding information in the fusion space of the low-energy anyonic quasiparticle excitations of the model [10.1007/3-540-49208-9_31,quant-ph/0306063,10.1017/CBO9780511792908]. The fusion space of such nonabelian anyons has dimension greater than one, allowing for topological quantum computation of logical information stored in the fusion outcomes.\n", "notes": ["The \\( \\Phi, \\Lambda \\)  Decodoku game <https://citizensciencegames.com/games/decodoku/> is based on the quantum double model for the group \\(S_3\\) of permutations on three letters."]}, "group_gkp": {"short_name": "", "name": "Group GKP code", "protection": "Protects against generalized bit-flip errors \\(g\\in G\\) that are inside the fundamental domain of \\(G/K\\). Protection against phase-flip errors determined by branching rules of irreps of \\(G\\) into those of \\(K\\), and further into those of \\(H\\).", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "groups", "realizations": [], "code_id": "group_gkp", "logical": "groups", "introduced": "[1911.00099]", "description": "Group code whose construction is based on nested subgroups \\(H\\subset K \\subset G\\). Logical subspace is spanned by basis states that are equal superpositions of elements of cosets of \\(H\\) in \\(K\\), and can be finite- or infinite-dimensional. Extension of the GKP code<code:gkp> construction.", "notes": []}, "stab_3_1_2": {"short_name": "", "name": "Three qutrit code", "protection": "Detects single qutrit errors and protects against a single-qutrit erasure. There does not exist a three-qubit code with analogous properties.\n\nThe code is an example of a \\( ((n = 3, k = 2)) \\) threshold scheme where a secret (the quantum information) is split into \\( n \\) shares and can be reconstructed by \\( k \\) pieces.\n\nThey key property of this code is that the reduced density matrix of any single qutrit is maximally mixed, meaning no information can be extracted from that qutrit. Therefore, a single qutrit tells you nothing about the encoded message, but access to any two pairs of qutrits will reveal the secret.\n", "features": {"transversal_gates": "", "decoders": ["The quantum information (the secret) can be recovered from a unitary transformation acting on only two qutrits, \\( U_{ij} \\otimes I \\), where \\(U_{ij}\\) acts on qutrits \\(i,j\\) and \\(I\\) is the identity on the remaining qutrit. By the cyclic structure of the codewords, this unitary transformation performs a permutation that recovers the information and stores it in one of the two qutrits involved in recovery."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["In addition to thinking about the encoding of states, it is also interesting to look at the trasformation of operators from the physical space into the logical space. Due to the unique structure and recovery protocol of the three qutrit code, the representation of a logical operator \\( \\overline{O} \\) is not unique. Instead, \\( \\overline{O} \\) can be constructed from unitary matricies with support on only two out of the three qutrits. Therefore, the logical operator has valid representations constructed from support on different sets of two qutrits. This operator construction is directly analogous to the construction of operators in the bulk (at the center) of the AdS\\(_3\\)-Rindler reconstruction. The three-qutrit code can then be used to describe how these local bulk operators are protected against localized boundary errors [1411.7041].", "This construction is related to the cleaning lemma [0810.1983], which was introduced in the context of constructing self-correcting quantum memories from stabilizer codes with geometrically-local generators. In this lemma, subspaces can be cleaned out by removing operators with support on a subset of qutrits."]}, "physical": "qudits", "realizations": [], "code_id": "stab_3_1_2", "logical": "qudits", "introduced": "[quant-ph/9901025]", "description": "A \\([[3,1,2]]_3\\) prime-qudit CSS code with stabilizer generators \\(ZZZ\\) and \\(XXX\\). The code defines a quantum secret-sharing scheme and serves as a minimal model for the AdS/CFT holographic duality. The codewords are\n\\begin{align}\n  \\begin{split}\n    | \\overline{0} \\rangle &= \\frac{1}{\\sqrt{3}} (| 000 \\rangle + | 111 \\rangle + | 222 \\rangle) \\\\\n    | \\overline{1} \\rangle &= \\frac{1}{\\sqrt{3}} (| 012 \\rangle + | 120 \\rangle + | 201 \\rangle) \\\\\n    | \\overline{2} \\rangle &= \\frac{1}{\\sqrt{3}} (| 021 \\rangle + | 102 \\rangle + | 210 \\rangle)~.\n  \\end{split}\n\\end{align}\nThe elements in the superposition of each logical codeword are related to each other via cyclic permutations.\n", "notes": ["Connections to Ads/CFT from the perspetive of how arbitrary operators are encoded into the logical space. This encoding is analagous and helps explain why operators acting on the bulk are protected against localized boundary errors [1411.7041]."]}, "qudit_hamming_css": {"short_name": "", "name": "\\([[2^r-1, 2^r-2r-1, 3]]_p\\) prime-qudit CSS code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "qudit_hamming_css", "logical": "qudits", "introduced": "[2110.11510]", "description": "A family of CSS codes extending Hamming-based CSS codes<code:quantum_hamming_css> to prime qudits of dimension \\(p\\) by expressing the qubit code stabilizers in local-dimension-invariant (LDI) form [2110.11510].", "notes": []}, "frobenius": {"short_name": "", "name": "Frobenius code", "protection": "Protects against Pauli noise.", "features": {"transversal_gates": "", "decoders": ["Adapted from the Berlekamp decoding algorithm for classical BCH codes. There exists a polynomial time quantum algorithm to correct errors of weight at most \\(\\tau\\), where \\(\\delta=2\\tau+1\\) is the BCH distance of the code [1011.5814]. "], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "frobenius", "logical": "qudits", "introduced": "[1011.5814]", "description": "Let \\(C\\) be a quantum cyclic code on \\(n\\) prime-dimensional qudits. \\(C\\) is a Frobenius code if there exists a positive integer \\(t\\) such that \\(n\\) divides \\(p^t +1\\).", "notes": ["Frobenius codes that are also stabilizer codes have been completely classified. No such codes exist when \\(t\\) is odd. All such codes with even \\(t\\) can be directly constructed."]}, "qudit_stabilizer": {"short_name": "", "name": "Modular-qudit stabilizer code", "protection": "Detects errors on up to \\(d-1\\) qudits, and corrects erasure errors on up to \\(d-1\\) qudits. More generally, define the normalizer \\(\\mathsf{N(S)}\\) of \\(\\mathsf{S}\\) to be the set of all operators that commute with all \\(S\\in\\mathsf{S}\\). A stabilizer code can correct a Pauli error set \\({\\mathcal{E}}\\) if and only if \\(E^\\dagger F \\notin \\mathsf{N(S)}\\setminus \\mathsf{S}\\) for all \\(E,F \\in {\\mathcal{E}}\\).", "features": {"transversal_gates": "", "decoders": ["The structure of stabilizer codes allows for syndrome-based decoding, where errors are corrected based on the results of stabilizer measurements (syndromes).", "Trellis decoder for prime-dimensional qudits, which builds a compact representation of the algebraic structure of the normalizer \\(\\mathsf{N(S)}\\) [2106.08251]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "qudit_stabilizer", "logical": "qudits", "introduced": "[quant-ph/9705052]", "description": "An \\(((n,K,d))_q\\) modular-qudit code whose logical subspace is the joint eigenspace of commuting qudit Pauli operators forming the code's stabilizer group \\(\\mathsf{S}\\). Traditionally, the logical subspace is the joint \\(+1\\) eigenspace, and the stabilizer group does not contain \\(e^{i \\phi} I\\) for any \\(\\phi \\neq 0\\). The distance \\(d\\) is the minimum weight of a qudit Pauli string that implements a nontrivial logical operation in the code.\n\nA modular-qudit stabilizer code encoding an integer number of qudits (\\(K=q^k\\)) is denoted as \\([[n,k]]_{q}\\) or \\([[n,k,d]]_{q}\\). For composite \\(q\\), such codes need not encode an integer number of qudits, with \\(K=q^n/|\\mathsf{S}|\\) [1101.1519]. This is because \\(|{\\mathsf{S}}|\\) need not be a power of \\(q\\), as group generators may have different orders. As a result, \\([[n,k,d]]\\) notation is often used with non-integer \\(k=\\log_q K\\). Prime-qudit stabilizer codes, where \\(q=p\\) for some prime \\(p\\), do not suffer from this issue and encode \\(n-k\\) logical qudits, with \\(K=p^{n-k}\\).\n\nEach code can be represented by a check matrix (a.k.a. stabilizer generator matrix) \\(H=(A|B)\\), where each row \\((a|b)\\) is the \\(q\\)-ary symplectic representation of a stabilizer generator. The check matrix can be brought into standard form via Gaussian elimination [1101.1519].\n", "notes": ["A standardized definition of the qudit stabilizer group is developed in [1101.1519]."]}, "polynomial": {"short_name": "Prime QPyc", "name": "Prime-qudit polynomial code (QPyC)", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "polynomial", "logical": "qudits", "introduced": "[quant-ph/9910059]", "description": "Also called quantum Reed-Solomon code. An \\([[n,k,n-k+1]]_p\\) (with prime \\(p>n\\)) prime-qudit CSS code constructed using two Reed-Solomon codes over \\(GF(p)=\\mathbb{Z}_p\\). Let \\(\\{\\alpha_1,\\cdots,\\alpha_n\\}\\) be \\(n\\) distinct nonzero elements of \\(\\mathbb{Z}_p\\), and let \\(g\\) be a number satisfying \\(0\\leq k \\leq g < n\\). Then, define degree-\\(g\\) polynomials\n\\begin{align}\n  f_{\\mu\\cup c}\\left(x\\right)=\\mu_{0}+\\mu_{1}x+\\cdots+\\mu_{k-1}x^{k-1}+c_{k}x^{k}+\\cdots+c_{g}x^{g}\\,,\n\\end{align}\nwhere the first \\(k\\) coefficients are indexed by the coefficient vector \\(\\mu\\in\\mathbb{Z}_p^{\\times k}\\), and the remaining coefficients are indexed by the vector \\(c\\in\\mathbb{Z}_p^{\\times (g+1-k)}\\). Logical states, labeled by \\(\\mu\\), are superpositions of canonical basis states whose \\(i\\)th bit is \\(f_{\\mu\\cup c}\\), evaluated at \\(\\alpha_i\\) and summed over all possible vectors \\(c\\),\n\\begin{align}\n  |\\overline{\\mu}\\rangle=\\sum_{c\\in\\mathbb{Z}_{p}^{\\times(g+1-k)}}|f_{\\mu\\cup c}(\\alpha_{1}),|f_{\\mu\\cup c}(\\alpha_{2}),\\cdots,|f_{\\mu\\cup c}(\\alpha_{n})\\rangle.\n\\end{align}\n", "notes": []}, "qudit_surface": {"short_name": "", "name": "Modular-qudit surface code", "protection": "When defined on an \\(L\\times L\\) square tiling of the torus, protects against \\(L\\) errors. More generally, the code distance is the number of edges in the shortest non contractible cycle in the tesselation or dual tesselation  [quant-ph/0110143].", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "qudit_surface", "logical": "qudits", "introduced": "[quant-ph/9707021]", "description": "A family of stabilizer codes whose generators are few-body \\(X\\)-type and \\(Z\\)-type Pauli strings associated to the stars and plaquettes, respectively, of a tessellation of a two-dimensional surface (with a qudit located at each edge of the tesselation). The code has \\( n=E \\) many physical qudits, where \\( E \\) is the number of edges of the tesselation, and \\( k=2g \\) many logical qudits, where \\( g \\) is the genus of the surface.", "notes": ["The simplest Decodoku game <https://citizensciencegames.com/games/decodoku/> is based on the qudit surface code with \\( q=10\\)."]}, "qudits_into_qudits": {"short_name": "", "name": "Modular-qudit code", "protection": "A convenient and often considered error set is the modular-qudit analogue of the Pauli string basis for qubit<code:qubits_into_qubits> codes. For a single qudit, this set consists of products of powers of the qudit Pauli matrices \\(X\\) and \\(Z\\), which act on computational basis states \\(|k\\rangle\\) for \\(k\\in\\mathbb{Z}_q\\) as\n\\begin{align}\n  X\\left|k\\right\\rangle =\\left|k+1\\right\\rangle \\,\\,\\text{ and }\\,\\,Z\\left|k\\right\\rangle =e^{i\\frac{2\\pi}{q}k}\\left|k\\right\\rangle ~,\n\\end{align}\nwith addition performed modulo \\(q\\). For multiple qudits, error set elements are tensor products of elements of the single-qudit error set.\n\nThe Pauli error set is a unitary basis for linear operators on the multi-qudit Hilbert space that is orthonormal under the Hilbert-Schmidt inner product; it is a nice error basis [quant-ph/9608048]. The distance associated with this set is often the minimum weight of a qudit Pauli string that implements a nontrivial logical operation in the code.\n", "features": {"transversal_gates": "", "decoders": ["For few-qudit codes (\\(n\\) is small), decoding can be based on a lookup table. For infinite code families, the size of such a table scales exponentially with \\(n\\), so approximate decoding algorithms scaling polynomially with \\(n\\) have to be used. The decoder determining the most likely error given a noise channel is called the maximum-likelihood decoder."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "qudits_into_qudits", "logical": "qudits", "introduced": "", "description": "Also called a \\(\\mathbb{Z}_q\\)-qudit code. Encodes \\(K\\)-dimensional Hilbert space into a \\(q^n\\)-dimensional (\\(n\\)-qudit) Hilbert space, with canonical qudit states \\(|k\\rangle\\) labeled by elements \\(k\\) of the group \\(\\mathbb{Z}_q\\) of integers modulo \\(q\\). Usually denoted as \\(((n,K))_q\\) or \\(((n,K,d))_q\\), whenever the code's distance \\(d\\) is defined, and with \\(q=p\\) when the dimension is prime.\n", "notes": []}, "stabilizer_over_gfqsq": {"short_name": "", "name": "Stabilizer code over \\(GF(q^2)\\)", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "stabilizer_over_gfqsq", "logical": "galois", "introduced": "[quant-ph/0508070]", "description": "Stub.", "notes": []}, "qudit_css": {"short_name": "", "name": "Modular-qudit CSS code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "qudit_css", "logical": "qudits", "introduced": "[quant-ph/0005008,quant-ph/0508070]", "description": "An \\(((n,K,d))_q\\) modular-qudit stabilizer code admitting a set of stabilizer generators that\nare either \\(Z\\)-type or \\(X\\)-type Pauli strings.\nThe stabilizer generator matrix, taking values from \\(\\mathbb{Z}_q\\), is of the form\n\\begin{align}\nH=\\begin{pmatrix}0 & H_{Z}\\\\\nH_{X} & 0\n\\end{pmatrix}\n\\label{eq:parityq}\n\\end{align}\nsuch that the rows of the two blocks must be orthogonal\n\\begin{align}\nH_X H_Z^T=0~.\n\\label{eq:commQ}\n\\end{align}\nThe above condition guarantees that the \\(X\\)-stabilizer generators, defined in the symplectic representation as rows of \\(H_X\\), commute with the \\(Z\\)-stabilizer generators associated with \\(H_Z\\).\n\nFor composite \\(q\\), such codes need not encode an integer number of qudits. For prime \\(q=p\\), properties reminiscent of qubit CSS codes are restored: encoding is based on two related \\(p\\)-ary linear codes<code:q-ary_linear>, an \\([n,k_X,d_X]_p \\) code \\(C_X\\) and \\([n,k_Z,d_Z]_p \\) code \\(C_Z\\),\nsatisfying \\(C_X^\\perp \\subseteq C_Z\\). The resulting CSS code has \\(k=k_X+k_Z-n\\) logical qubits and distance \\(d\\geq\\min\\{d_X,d_Z\\}\\).\nThe \\(H_X\\) (\\(H_Z\\)) block of \\(H\\) eq:parityq is the parity-check matrix of the code \\(C_X\\) (\\(C_Z\\)). The requirement \\(C_X^\\perp \\subseteq C_Z\\) guarantees eq:commQ.\nBasis states for the code are, for \\(\\gamma \\in C_X\\),\n\\begin{align}\n|\\gamma + C_Z^\\perp \\rangle = \\frac{1}{\\sqrt{|C_Z^\\perp|}} \\sum_{\\eta \\in C_Z^\\perp} |\\gamma + \\eta\\rangle.\n\\end{align}\n", "notes": []}, "skew-cyclic_galois_css": {"short_name": "", "name": "Skew-cyclic CSS code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qudits", "realizations": [], "code_id": "skew-cyclic_galois_css", "logical": "qudits", "introduced": "[10.1016/j.disc.2020.112189]", "description": "Stub.", "notes": []}, "galois_stabilizer": {"short_name": "", "name": "Galois-qudit stabilizer code", "protection": "Detects errors on up to \\(d-1\\) qudits, and corrects erasure errors on up to \\(d-1\\) qudits. Corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qudits.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["As opposed to modular qudits for composite \\(q\\), Galois qudits inherit most of the properties of the prime-qudit Clifford group due to the correspondence between a \\(q=p^m\\) Galois qudit and \\(m\\) prime qudits of dimension \\(p\\) [quant-ph/0005008]."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "galois_stabilizer", "logical": "galois", "introduced": "[quant-ph/0005008,quant-ph/0508070]", "description": "An \\(((n,K,d))_{GF(q)}\\) Galois-qudit code whose logical subspace is the joint eigenspace of commuting Galois-qudit Pauli operators forming the code's stabilizer group \\(\\mathsf{S}\\). Traditionally, the logical subspace is the joint \\(+1\\) eigenspace, and the stabilizer group does not contain \\(e^{i \\phi} I\\) for any \\(\\phi \\neq 0\\). The distance \\(d\\) is the minimum weight of a Galois-qudit Pauli string that implements a nontrivial logical operation in the code.\n\nA Galois-qudit stabilizer code encoding an integer number of qudits (\\(K=q^k\\)) is denoted as \\([[n,k]]_{GF(q)}\\) or \\([[n,k,d]]_{GF(q)}\\). This notation differentiates between Galois-qudit and modular-qudit stabilizer codes, although the same notation, \\([[n,k,d]]_q\\), is usually used for both. Galois-qudit stabilizer codes need not encode an integer number of qudits, with \\(K=q^{n-\\frac{r}{m}}\\), where \\(r\\) is the number of generators of the stabilizer group, and \\(q=p^m\\) given prime \\(p\\) for all Galois qudits. As a result, \\([[n,k,d]]\\) notation is often used with non-integer \\(k=\\log_q K\\).\n", "notes": []}, "galois_true_stabilizer": {"short_name": "", "name": "True Galois-qudit stabilizer code", "protection": "Detects errors on up to \\(d-1\\) qudits, and corrects erasure errors on up to \\(d-1\\) qudits.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "galois_true_stabilizer", "logical": "galois", "introduced": "", "description": "Also called a linear stabilizer code. A \\([[n,k,d]]_{GF(q)}\\) stabilizer code whose stabilizer's symplectic representation forms a linear subspace. In other words, the set of \\(q\\)-ary vectors representing the stabilizer group is closed under both addition and multiplication by elements of \\(GF(q)\\). In contrast, Galois-qudit stabilizer codes admit sets of vectors that are closed under addition only.\n\nThe number of generators \\(r\\) for a true stabilizer code is a multiple of \\(m\\) (recall that \\(q=p^m\\) for Galois qudits). As a result, the number \\(k=n-r/m\\) of logical qudits is an integer.\n\nEach code can be represented by a stabilizer generator matrix \\(H=(A|B)\\), where each row \\((a|b)\\) is the \\(GF(q)\\)-valued symplectic representation of a stabilizer generator.\n", "notes": []}, "binary_quantum_goppa": {"short_name": "", "name": "Binary quantum Goppa code", "protection": "Protects against weight \\(t\\) errors where \\( 0 < t \\leq  \\lfloor \\frac{d^*-g-1}{2} \\rfloor \\) where \\( d^* = \\text{deg} G + 2 -2g \\) and \\(g\\) is the genus of the function field and \\(d \\geq n - \\lfloor \\frac{deg G}{2} \\rfloor\\).", "features": {"transversal_gates": "", "decoders": ["Farran algorithm [math/9910151]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Encoding defined in Ref. [quant-ph/0107129] uses a technique from Ref. [quant-ph/0005008] to encode quantum stabilizer codes."]}, "physical": "galois", "realizations": [], "code_id": "binary_quantum_goppa", "logical": "galois", "introduced": "[quant-ph/0501074,10.1007/s11128-006-0047-9]", "description": "Also known as a quantum AG code. Binary quantum Goppa codes are a family of \\( [[n,k,d]]_{GF(q)} \\) CSS codes for \\( q=2^m \\), generated using classical Goppa codes.\n\nLet \\( F/GF(q) \\) be an algebraic function field of one variable, \\(\\sigma \\) be an automorphism of order 2\nof \\(F\\) which leaves \\(GF(q)\\) invariant, and \\(P_1, \\cdots, P_n \\) be pairwise distinct places of degree one such that \\( \\sigma P_i = P_j\\) for all\n\\(i,j = 1, \\cdots, n\\). A place \\( P_i \\) of \\( F/ GF(q) \\) is the unique maximal ideal of a discrete valuation ring of the function field. Let \\( \\nu \\) be a  differential\nthat satisfies the properties guaranteed by  the strong approximation theorem of discrete evaluations. Let \\(G\\) be a divisor such that \\( \\sigma G = G \\) and the\ndiscrete valuation corresponding to place \\(P_i \\) of \\(G\\) and the discrete valuation corresponding to place \\(\\sigma P_i \\) of \\(G\\) are both 0 for all \\(i\\). Then we can define\na code \\( C(G)  = \\{ f(P_1), \\cdots, f(P_n), f(\\sigma P_1), \\cdots , f(\\sigma P_n) | f \\in \\mathcal{L}(G)\\} \\subset GF(q^{2n})\\) and\na code \\(C(H)\\) where \\(H = (P_1 + \\cdots + P_n + \\sigma P_1 + \\cdots + \\sigma P_n) - G + \\nu \\). Then the dual of \\(C(G)\\) with respect to the weighted symplectic inner\nproduct with weights \\(s_i\\) on \\( GF(q^n) \\) is equivalent to \\(C(H)\\). Therefore, the orthogonal code of \\(C(G)\\) is generated by \\(H\\). Using these properties and the assumption\nthat \\(H\\) is a subgroup of \\(G\\), we can construct a classical Goppa code \\(C(D,G)\\), where \\(D\\) is the sum of all \\(P_i\\). Using \\(C(D,G)\\), we can construct a \\([[n,k,d]]_{GF(q)}\\) quantum stabilizer code such that\n\\(k  = \\text{dim} G - \\text{dim}(G-P_1 - \\cdots - P_n - \\sigma P_1 - \\cdots  - \\sigma P_n) - n~.\\)\n", "notes": []}, "galois_into_galois": {"short_name": "", "name": "Galois-qudit code", "protection": "A convenient and often considered error set is the Galois-qudit analogue of the Pauli string set for qubit<code:qubits_into_qubits> codes. For a single Galois qudit, this set consists of products of \\(X\\)-type and \\(Z\\)-type operators labeled by elements \\(\\beta \\in GF(q)\\), which act on computational basis states \\(|\\gamma\\rangle\\) for \\(\\gamma\\in GF(q)\\) as\n\\begin{align}\n  X_{\\beta}\\left|\\gamma\\right\\rangle =\\left|\\gamma+\\beta\\right\\rangle \\,\\,\\text{ and }\\,\\,Z_{\\beta}\\left|\\gamma\\right\\rangle =e^{i\\frac{2\\pi}{p}\\text{Tr}(\\beta\\gamma)}\\left|\\gamma\\right\\rangle~,\n\\end{align}\nwhere the trace maps elements of the field to elements of \\(\\mathbb{Z}_p\\) as\n\\begin{align}\n  \\text{tr}(\\gamma)=\\sum_{k=0}^{m-1}\\gamma^{p^{k}}~.\n\\end{align}\nFor multiple Galois qudits, error set elements are tensor products of elements of the single-qudit error set.\n\nThe Galois-qudit Pauli error set is a unitary basis for linear operators on the multi-qudit Hilbert space that is orthonormal under the Hilbert-Schmidt inner product; it is a nice error basis [quant-ph/9608048]. The distance associated with this set is often the minimum weight of a Galois qudit Pauli string that implements a nontrivial logical operation in the code.\n", "features": {"transversal_gates": "", "decoders": ["For few-qudit codes (\\(n\\) is small), decoding can be based on a lookup table. For infinite code families, the size of such a table scales exponentially with \\(n\\), so approximate decoding algorithms scaling polynomially with \\(n\\) have to be used. The decoder determining the most likely error given a noise channel is called the maximum-likelihood decoder."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "galois_into_galois", "logical": "galois", "introduced": "[10.1002/(SICI)1520-6610(2000)8:3<174::AID-JCD3>3.0.CO;2-T,quant-ph/0508070]", "description": "Also called a \\(GF(q)\\)- or \\(\\mathbb{F}_q\\)-qudit code. Encodes \\(K\\)-dimensional Hilbert space into a \\(q^n\\)-dimensional (\\(n\\)-qudit) Hilbert space, with canonical qudit states \\(|k\\rangle\\) labeled by elements \\(k\\) of the Galois field \\(GF(q)\\) and with \\(q\\) being a power of a prime \\(p\\). A Galois field can be thought of as a vector space whose basis vectors are the \\(m\\) roots of some polynomial and whose coefficients (i.e., field) are \\(p\\)th roots of unity. Codes can be denoted as \\(((n,K))_{GF(q)}\\) or \\(((n,K,d))_{GF(q)}\\), whenever the code's distance \\(d\\) is defined. This notation differentiates between Galois-qudit and modular-qudit codes, although the same notation, \\(((n,K,d))_q\\), is usually used for both.", "notes": ["Introduction to Galois qudits by Gottesman <https://ethz.ch/content/vp/en/conferences/2014/qec/05_thursday/dab6ca18-7453-4197-aaaa-8b1964ece714.html>."]}, "non_stabilizer": {"short_name": "Non-stabilizer", "name": "Galois-qudit non-stabilizer code", "protection": "", "features": {"transversal_gates": "", "decoders": ["The decoding circuit involves the application of phase estimation."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["The encoding circuit involves the application of quantum Fourier transform."]}, "physical": "galois", "realizations": [], "code_id": "non_stabilizer", "logical": "galois", "introduced": "[quant-ph/0210097]", "description": "The projection onto a stabilizer code is proportional to an equal sum over all elements of the stabilizer group \\(\\mathsf{S}\\).\nNon-stabilizer codes generalize stabilizer codes by modifying the code projection with elements of a subset \\(\\mathsf{B}\\subset\\mathsf{S}\\) called the Fourier description (see proof of Thm. 2.7 in Ref. [quant-ph/0210097]). When \\(\\mathsf{B}\\) is a subgroup of \\(\\mathsf{S}\\), then the code reduces to an ordinary stabilizer code.\n\nThe following non-stabilizer codes were constructed in Ref. [quant-ph/0210097]: \\(((33, 155, 3))\\), \\(((15, 8, 3))\\), \\(((n, \\lceil\\frac{q^n}{n(q^2-1)}\\rceil,2))_{GF(q)}\\) and \\(((n, 1+n(q-1),2))_{GF(q)}\\), where \\(n\\) is odd. The last code family is a Galois-qudit extension of the non-additive \\(((5,6,2))\\) qubit code<code:qubits_into_qubits> from Ref. [quant-ph/9703002].\n", "notes": []}, "quantum_secret_sharing": {"short_name": "", "name": "Approximate secret-sharing code", "protection": "Corrects up to \\(\\lfloor (n-1)/2 \\rfloor\\) errors with fidelity exponentially lose to 1.", "features": {"transversal_gates": "", "decoders": ["Decoding is analagous to reconstruction in a secret sharing scheme and is done in polynomial time. The only required operations are verification of quantum authentication, which is a pair of polynomial-time quantum algorithms that check if the fidelity of the received state is close to 1, and erasure correction for a stabilizer code, which involves solving a system of linear equations."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Uses a quantum authentication scheme, which is a keyed system in which a valid state has high fidelity, and a classical secret-sharing scheme."]}, "physical": "galois", "realizations": [], "code_id": "quantum_secret_sharing", "logical": "galois", "introduced": "[quant-ph/0503139]", "description": "A family of \\( [[n,k,d]]_{GF(q)} \\) CSS codes approximately correcting errors on up to \\(\\lfloor (n-1)/2 \\rfloor\\) qubits, i.e., with approximate distance approaching the no-cloning bound \\(n/2\\). Constructed using a non-degenerate CSS code, such as a polynomial quantum code, and a classical authentication scheme. The code can be viewed as an \\(t\\)-error tolerant secret sharing scheme. Since the code yields a small logical subspace using large registers that contain both classical and quantum information, it is not useful for practical error correction problems, but instead demonstrates the power of approximate quantum error correction.", "notes": []}, "galois_css": {"short_name": "", "name": "Galois-qudit CSS code", "protection": "Detects errors on \\(d-1\\) qubits, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) qubits.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "galois_css", "logical": "galois", "introduced": "[quant-ph/0312164,10.1016/j.disc.2007.08.038]", "description": "An \\([[n,k,d]]_{GF(q)} \\) Galois-qudit true stabilizer code admitting a set of stabilizer generators that\nare either \\(Z\\)-type or \\(X\\)-type Galois-qudit Pauli strings.\nThe stabilizer generator matrix, taking values from \\(GF(q)\\), is of the form\n\\begin{align}\nH=\\begin{pmatrix}0 & H_{Z}\\\\\nH_{X} & 0\n\\end{pmatrix}\n\\label{eq:parityg}\n\\end{align}\nsuch that the rows of the two blocks must be orthogonal\n\\begin{align}\nH_X H_Z^T=0~.\n\\label{eq:commG}\n\\end{align}\nThe above condition guarantees that the \\(X\\)-stabilizer generators, defined in the symplectic representation as rows of \\(H_X\\), commute with the \\(Z\\)-stabilizer generators associated with \\(H_Z\\).\n\nEncoding is based on two related \\(q\\)-ary linear codes<code:q-ary_linear>,\nan \\([n,k_X,d_X]_q \\) code \\(C_X\\) and \\([n,k_Z,d_Z]_q \\) code \\(C_Z\\),\nsatisfying \\(C_X^\\perp \\subseteq C_Z\\).\nThe resulting CSS code has \\(k=k_X+k_Z-n\\) logical qubits and distance \\(d\\geq\\min\\{d_X,d_Z\\}\\).\nThe \\(H_X\\) (\\(H_Z\\)) block of \\(H\\) eq:parityg is the parity-check matrix of the code \\(C_X\\) (\\(C_Z\\)). The requirement \\(C_X^\\perp \\subseteq C_Z\\) guarantees eq:commG.\nBasis states for the code are, for \\(\\gamma \\in C_X\\),\n\\begin{align}\n|\\gamma + C_Z^\\perp \\rangle = \\frac{1}{\\sqrt{|C_Z^\\perp|}} \\sum_{\\eta \\in C_Z^\\perp} |\\gamma + \\eta\\rangle.\n\\end{align}\n", "notes": []}, "galois_polynomial": {"short_name": "Galois QPyC", "name": "Galois-qudit polynomial code (QPyC)", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "galois_polynomial", "logical": "galois", "introduced": "[quant-ph/9906129]", "description": "Also called quantum Reed-Solomon code. An \\([[n,k,n-k+1]]_{GF(q)}\\) (with \\(q>n\\)) Galois-qudit CSS code constructed using two Reed-Solomon codes over \\(GF(q)\\). Let \\(C_1\\) be a \\([n,k_1,d_1]_q\\) Reed-Solomon code and \\(C_2^\\perp\\) be a \\([n,k_2,d_2]_q\\) Reed-Solomon code, modified such that \\(C_2^\\perp \\subseteq C_1\\) and \\(0\\le k_2 \\le k_1 \\le n\\). Then, a polynomial code is a non-degenerate \\([[n,k_2,d]]_{GF(q)}\\) Galois-qudit CSS code with \\(d=\\min(n-k_1+1,k_1-k_2+1)\\). The polynomial code is the span of the basis codewords over GF(\\(q\\)) \\begin{align} |\\overline{\\beta_0,\\cdots,\\beta_{k_2-1}}\\rangle = \\sum_{(\\beta_{k_2},\\cdots,\\beta_{k_1-1})\\in GF(q) } \\bigotimes_{i=1}^{n} \\left|\\sum_{j=0}^{k_1-1} \\beta_j \\alpha_i^j \\right\\rangle, \\end{align} where \\((\\alpha_1, \\cdots, \\alpha_n)\\) are \\(n\\) distinct points chosen for code \\(C_1\\) from \\(GF(q)\\setminus \\{0\\}\\).", "notes": []}, "dynamic_gen": {"short_name": "Dynamically-generated QECC", "name": "Dynamically-generated quantum error-correcting code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "dynamic_gen", "logical": null, "introduced": "[0708.4025]", "description": "Code whose natural definition is in terms of a many-body scaling limit of a local dynamical process. Such processes, which are often non-deterministic, update the code structure and can include random unitary evolution or non-commuting projective measurements.", "notes": []}, "quantum_concatenated": {"short_name": "", "logical": null, "introduced": "", "description": "A combination of two codes, an inner code \\(C\\) and an outer code \\(C^\\prime\\), where the physical subspace used for the outer code consists of the logical subspace of the inner code. In other words, first one encodes in the outer code \\(C^\\prime\\), and then one encodes each of the physical registers of \\(C^\\prime\\) in an inner code \\(C\\).", "name": "Concatenated quantum code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["The first method to achieve a fault-tolerant computational threshold uses concatenated stabilizer codes [quant-ph/9702058,quant-ph/9906129,quant-ph/9705031,quant-ph/0504218]."], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "quantum_concatenated"}, "symmetry_protected_self_correct": {"short_name": "", "logical": null, "introduced": "[1805.01474]", "description": "Also called a symmetry-protected self-correcting memory. An restricted notion of thermal stability against symmetric perturbations, i.e., perturbations that commute with a set of operators forming a group \\(G\\) called the symmetry group.\n\nGiven a symmetry group \\(G\\) and its unitary representation \\(S\\) on the \\(n\\)-site physical Hilbert space (in this case, a lattice), an operator \\(O\\) is \\(G\\)-symmetric (a.k.a. respects the \\(G\\) symmetry) if \\([S(g),O]=0\\) for all \\(g\\in G\\). A symmetry-protected self-correcting memory is a ground-state encoding of an \\(n\\)-body \\(G\\)-symmetric geometrically local Hamiltonian whose logical information is recoverable for arbitrary long times in the \\(n\\to\\infty\\) limit after a \\(G\\)-symmetric interaction with a thermal environment at sufficiently low temperature.\n\nTensor-product symmetries of the form \\(S(g)=u(g)^{\\otimes n}\\), where \\(u\\) is a unitary representation of \\(G\\ni g\\) on a site, cannot support symmetry-protected self-correction. One can instead use 1-form symmetries, i.e., symmetries generated by operators of the form\n\\begin{align}\n  S_{\\mathcal{M}}(g)=\\bigotimes_{\\text{sites}\\in\\mathcal{M}}u(g),\n\\end{align}\nwhere \\(\\mathcal{M}\\) runs over all closed codimension-one submanifolds of the lattice.\n", "name": "Symmetry-protected self-correcting quantum code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "The code is intended to be used as a self-correcting quantum memory when the symmetry is enforced, and protection is characterized by the scaling of the memory time \\(\\tau\\) in the system size.\n\nAnother characterization of the protection property is the symmetric version of the energy barrier \\(\\Delta\\), defined as follows.\nFor a given logical operator and a given decomposition into a product of local operators, we consider the maximal energy attained when implementing this logical operator stepwise with this decomposition. Then, \\(\\Delta\\) is defined by minimizing this quantity over all logical operators and over those decompositions for which each local operator respects the symmetry. For some models [1805.01474], the linear growth of \\(\\Delta\\) with system size \\(n\\) implies the exponential growth of \\(\\tau\\) below a critical temperature.\n", "physical": null, "notes": [], "realizations": [], "code_id": "symmetry_protected_self_correct"}, "stabilizer": {"short_name": "", "logical": null, "introduced": "", "description": "A stabilizer code is a code whose logical subspace is the joint eigenspace (usually with eigenvalue \\(+1\\)) of a set of commuting unitary operators forming the code's stabilizer group. Stabilizer codes have been defined for qubits, modular qudits, Galois qudits, and oscillators using their respective Pauli-type groups.\n\nThe coding theory motivation for stabilizer codes came from linear binary codes, whose codewords form a closed subspace in the space of binary strings. Stabilizer codes extend this property, in various ways, to quantum error correction. The stabilizer formalism is applicable to the qubit, modular-qudit, Galois-qudit, bosonic, and fermionic kingdoms; see list of stabilizer codes <https://errorcorrectionzoo.org/list/stabilizer> for a list of all stabilizer codes in the zoo.\n\nStabilizer codes were originally defined for qubits, where the relevant commuting operators are tensor products of Pauli matrices. The Pauli stabilizer structure is immensely useful in providing standardized encoding, gates, decoding, and performance bounds. Elements of this structure remain in qudit extensions, in particular for prime-dimensional modular qudits and Galois qudits. Other qubit-based extensions, such as XS<code:xs_stabilizer> and XP<code:xp_stabilizer> stabilizer codes, relax the mutual commutation property. Still other extensions defined for qudits include non-stabilizer codes<code:non_stabilizer>.\n\nAn important property of qubit and qudit stabilizer codes is the QLDPC property, which means (roughly) that working with them remains not too hard as number of qudits grows; these remain as the primary ingredients for a quantum memory.\n", "name": "Stabilizer code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "stabilizer"}, "quantum_cyclic": {"short_name": "", "name": "Quantum cyclic code", "protection": "Cyclic symmetry guarantees that if a single subsystem is protected against some noise, then all other subsystems are also.", "features": {"transversal_gates": "", "decoders": ["Adapted from the Berlekamp decoding algorithm for classical BCH codes [1007.1697]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "quantum_cyclic", "logical": null, "introduced": "[1007.1697]", "description": "A code \\(C\\) constructed in a physical space consisting of a tensor product of \\(n\\) subsystems (e.g., qubits) is cyclic if a cyclic permutation of the subsystems leaves the code subspace invariant.", "notes": ["Many examples have been found by computer algebra programs. Ref. [1007.1697] give examples of \\([[17,1,7]]\\) and \\([[17,9,3]]\\) quantum cyclic codes."]}, "topological": {"short_name": "", "logical": null, "introduced": "", "description": "Stub.", "name": "Topological code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "topological"}, "random_circuit": {"short_name": "", "logical": null, "introduced": "", "description": "Code whose encoding is naturally constructed by randomly sampling from a large set of quantum circuits.", "name": "Random-circuit code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "random_circuit"}, "approximate_qecc": {"short_name": "AQECC", "name": "Approximate quantum error-correcting code (AQECC)", "protection": "", "features": {"transversal_gates": "", "decoders": ["Given an encoding, a decoder that yields the optimal entanglement fidelity can be obtained by solving a semi-definite program [quant-ph/0109155,quant-ph/0307138] (see also Ref. [0706.3400]).", "The Petz recovery map (a.k.a. the transpose map) [10.1007/BF01212345,10.1093/qmath/39.1.97], a quantum channel determined by the codespace and noise channel, recovers information perfectly for strictly correctable noise and yields an infidelity of recovery that is at most twice away from the infidelity of the best possible recovery [quant-ph/0004088]. The infidelity of a modified Petz recovery map can be bounded using relative entropies between uncorrupted and corrupted code states on countably infinite Hilbert spaces [1509.07127]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Given a decoder, an encoding that yields the optimal entanglement fidelity can be obtained by solving a semi-definite program [quant-ph/0109155,quant-ph/0307138] (see also Ref. [0706.3400])."]}, "physical": null, "realizations": [], "code_id": "approximate_qecc", "logical": null, "introduced": "[quant-ph/9704002,10.1070/RM1997v052n06ABEH002155,quant-ph/0307138,quant-ph/0503139,0907.4207,0907.5391]", "description": "Stub.", "notes": []}, "holographic": {"short_name": "", "name": "Holographic code", "protection": "Protects against erasure errors on the boundary. Error-correction properties are often stated in the Heisenberg picture, i.e., in terms of which logical operators can be reconstructed after erasures. Specifically, bulk operators outside the entanglement wedges of the erased boundary operators can be reconstructed using the remaining boundary operators. However, the protection can be nontrivial, and may only apply to a subalgebra of bulk operators [1411.7041,1612.00017].", "features": {"transversal_gates": "There exist holographic approximate codes with arbitrary transversal gate sets for any compact Lie group [2108.11402]. However, for sufficiently localized logical subsystems of holographic stabilizer codes, the set of transversally implementable logical operations is contained in the Clifford group [2103.13404].", "decoders": [], "rate": "", "code_capacity_threshold": ["The ideal holographic code (perfect representation of AdS/CFT) should be able to protect a central bulk operator against erasures of half of the physical qubits on the boundary, in line with AdS-Rindler reconstruction [1503.06237].", "Holographic codes are argued to have a algebraic threshold, for which the error rate scales polynomially (as opposed to exponentially) in the thermodynamic limit [2202.04710]. Such a threshold is governed by the underlying conformal field theory describing the boundary."], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "holographic", "logical": null, "introduced": "[1503.06237]", "description": "A code whose encoding isometry serves to model aspects of the AdS/CFT holographic duality. Encodes operators in the bulk of the Anti de Sitter (AdS) space, represented by logical qudits, into operators on the boundary of the corresponding Conformal Field Theory (CFT), represented by physical qudits. Encoding can often be represented by a tensor network associated with a tiling of hyperbolic space. See Defn 4.3 of Ref. [2108.11402] for a technical formulation.\n\nTypically, the encoding isometry \\(U\\) obeys the entanglement-wedge reconstruction condition, which states that for any boundary region \\(R\\), any bulk operator \\(O\\) localized to the entanglement wedge of \\(R\\) must be implementable by some boundary operator \\(\\tilde{O}\\) localized to \\(R\\). Formally, \\(UO = \\tilde{O}U\\) and \\([\\tilde{O},UU^\\dagger] = 0\\). The entanglement wedge is the space enclosed within the Ryu\u2013Takayanagi surface in the bulk (minimal surface) with boundary \\(R\\).\n", "notes": ["All Boundary global symmetries must be dual to bulk gauge symmetries, and vice versa [1810.05338]."]}, "fracton": {"short_name": "", "logical": null, "introduced": "", "description": "A code whose codewords make up the ground-state space of a fracton-phase Hamiltonian.", "name": "Fracton code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "fracton"}, "hamiltonian": {"short_name": "", "logical": null, "introduced": "", "description": "Encoding corresponds to a set of energy eigenstates of a quantum-mechanical Hamiltonian. The codespace is typically a set of low-energy eigenstates or ground states, but can include subspaces of arbitrarily high energy.\n\nWhen the physical space is a tensor product of subsystems, the Hamiltonian is typically local, consisting of operators acting on a number of subsystems that is independent of the total number of subsystems (e.g., QLDPC codes<code:qldpc>). When the physical space is endowed with a geometry, the Hamiltonian is typically geometrically local, consisting of operators acting on subsystems that occupy a region whose size is independent of the number of subsystems (e.g., topological codes<code:topological>). When the terms in a geometrically local Hamiltonian commute and can be expressed as projectors (i.e., having eigenvalues 0 or 1), the Hamiltonian is called commuting-projector.\n", "name": "Hamiltonian-based code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Lindbladian-based dissipative encoding can be constructed for a codespace that is the ground-state subspace of a frustration-free Hamiltonian [0809.0613,1112.4860,0803.1447,1802.00010]."]}, "protection": "Often determined from the underlying physical properties of the Hamiltonian.", "physical": null, "notes": [], "realizations": [], "code_id": "hamiltonian"}, "quantum_random": {"short_name": "", "logical": null, "introduced": "", "description": "Quantum code whose construction is non-deterministic in some way, i.e., codes that utilize an elements of randomness somewhere in their construction. Members of this class range from fully non-deterministic codes (e.g., random-circuit codes), to codes whose multi-step construction is deterministic with the exception of a single step (e.g., expander lifter-product codes).", "name": "Random quantum code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "quantum_random"}, "topological_abelian": {"short_name": "", "logical": null, "introduced": "", "description": "Code whose codewords realize topological order associated with an abelian group. Stub.\n\nAny local quantum circuit connecting ground states of topological orders with non-isomorphic abelian groups must have depth that is at least linear in the system\u2019s diameter [1407.2926].\n", "name": "Abelian topological code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "topological_abelian"}, "fusion": {"short_name": "FBQC", "name": "Fusion-based quantum computing (FBQC) code", "protection": "Protects against erasure, Pauli errors, photon loss, fusion failure from non-determinism, and faulty resource states. Redundancy in fusion outcomes is captured by the check operator group. Fusion measurement outcomes form a syndrome that allows to correct for Pauli errors. There is no physical error correction, and decoding output is simply used to update the Pauli frame.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Fusion networks are constructed in a fault tolerant way (as a stabilizer code), and they can be created in a way that naturally encodes topological fault tolerance."], "general_gates": ["Clifford gates by creating topological features such as boundaries, defects, or twists, which can be done by single qubit measurements.", "Logical gates can be performed by code deformation.", "Non Clifford gates by Magic-state injection", "Logical Clifford operations can be kept track of using the classical Pauli-frame register and need not be explicitly applied at the quantum level."], "magic_scaling_exponent": "", "threshold": ["\\(11.98\\%\\) against erasure in fusion measurements.", "\\(1.07\\%\\) against Pauli error.", "In linear optical systems, can tolerate \\(10.4\\%\\) probability of photon loss in each fusion.", "\\(43.2\\%\\) against fusion failure."], "encoders": ["Resource state generators, which produce small constant size cluster states, and Fusion measurements (Bell fusions)."]}, "physical": "qubits", "realizations": [], "code_id": "fusion", "logical": "qubits", "introduced": "[2101.09310]", "description": "Fusion Based Quantum Computing, or FBQC, describes a fault tolerant way to produce fusion networks, or large entangled states starting from small constant-sized entangled resource states along with destructive measurements called fusions. These large states can be produced asychronously in the fusion framework and can be used as resources, as in measurement-based quantum computation (MBQC), or as logical states of topological codes. The difference from ordinary MBQC is that error-correction is baked into the state-generation protocol.", "notes": []}, "quantum_perfect": {"short_name": "", "logical": null, "introduced": "", "description": "A non-degenerate code constructed out of \\(q\\)-dimensional qudits and having parameters \\(((n,K,2t+1))\\) is perfect if \\(n\\), \\(K\\), \\(t\\), and \\(q\\) are such that the quantum Hamming bound\n\\begin{align}\n\\sum_{j=0}^{t}(q^2-1)^{j}{n \\choose j}\\leq q^{n}/K\n\\end{align}\nbecomes an equality. For example, for a qubit \\(q=2\\) code with one logical qubit (\\(K=2\\)) and \\(t=1\\), the bound becomes \\(3n+1 \\leq 2^{n-1}\\). The bound can be saturated only at certain \\(n\\).\n\nFor qubit codes with \\(K=2^k\\), one can work out an asymptotic Hamming bound in the large-\\(n,k,t\\) limit,\n\\begin{align}\n\\frac{k}{n}\\leq 1-\\frac{t}{n}\\log_{2}3-h(t/n),\n\\end{align}\nwhere \\(h\\) is the binary entropy function.\n", "name": "Perfect quantum code", "features": {"transversal_gates": "", "decoders": [], "rate": "\\(k/n\\to 1\\) asymptotically with \\(n\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "Perfect codes have been classified. For qubits (\\(q=2\\)), the only codes are the stabilizer code family \\([[(4^r-1)/3, (4^r-1)/3 - 2r, 3]]\\) for \\(r \\geq 2\\) [quant-ph/9607027,quant-ph/9608006]. For qudits, the family is parameterized by \\(K=q^{n-2r}\\) for \\(n=\\frac{q^{2r}-1}{q^{2}-1}\\) and \\(r \\geq 2\\); all codes correct a single error (\\(t=1\\)) [0907.0049,10.1002/(SICI)1520-6610(2000)8:3<174::AID-JCD3>3.0.CO;2-T]. The trivial code (\\(k=n\\)) is also perfect.", "physical": null, "notes": [], "realizations": [], "code_id": "quantum_perfect"}, "quantum_mds": {"short_name": "Quantum MDS", "name": "Quantum maximum-distance-separable (MDS) code", "protection": "Given \\(n\\) and \\(k\\), MDS codes have the highest distance possible of all codes and so have the best possible error correction properties.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "quantum_mds", "logical": null, "introduced": "", "description": "An \\(((n,q^k,d))\\) code constructed out of \\(q\\)-dimensional qudits is an MDS code if parameters \\(n\\), \\(k\\), \\(d\\), and \\(q\\) are such that the quantum Singleton bound\n\\begin{align}\n2(d-1) \\leq n-k\n\\end{align}\nbecomes an equality.\n", "notes": ["The \\([[5,1,3]]\\) code and \\([[n,n-2,2]]\\) codes, where \\(n\\) is even, are the only examples of MDS qubit codes."]}, "constant_excitation": {"short_name": "", "name": "Constant-excitation (CE) code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "Fock-state CE codes can be used in a protocol that achieves the two-way quantum capacity of the pure-loss Gaussian channel [2203.13924].", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": null, "realizations": [], "code_id": "constant_excitation", "logical": null, "introduced": "[quant-ph/9603022,quant-ph/9705044,quant-ph/9809081]", "description": "Code whose codewords lie in an excited-state eigenspace of a Hamiltonian governing the total energy or total number of excitations of the underlying quantum system. For qubit codes, such a Hamiltonian is the total spin Hamiltonian, \\(H=\\sum_i Z_i\\). For bosonic codes, such as Fock-state codes, codewords are in an eigenspace with eigenvalue \\(N>0\\) of the total excitation or energy Hamiltonian, \\(H=\\sum_i \\hat{n}_i\\).\n\nOne of the first such codes [quant-ph/9603022] is a \\(((8,1,3))\\) qubit code, with codewords\n\\begin{align}\n\\begin{split}\n|\\overline{0}\\rangle&= |00001111\\rangle + |11101000\\rangle \u2212 |10010110\\rangle \u2212 |01110001\\rangle\\\\\n                    & +|11010100\\rangle + |00110011\\rangle + |01001101\\rangle + |10101010\\rangle\\\\\n|\\overline{1}\\rangle&= X^{\\otimes 8} |\\overline{0}\\rangle~.\n\\end{split}\n\\end{align}\nEach logical state is a superposition of computational basis states with four excitations.\n", "notes": []}, "quantum_lego": {"short_name": "", "logical": null, "introduced": "[2109.08158]", "description": "Code constructed using a tensor-network-based graphical framework from quantum lego blocks, which are smaller quantum codes over qubits or qudits. The class of codes constructed using the framework depends on the choice of atomic lego blocks. For instance, any stabilizer code can be built out of atomic blocks like the 2-site repetition code, single-site trivial stabilizer codes, and tensor products of the \\(|0\\rangle\\) state. Specifically, the HaPPY<code:happy> code is a quantum Lego code whose atomic Lego block is the five-qubit perfect<code:stab_5_1_3> code.\n\nThe individual lego blocks and resulting quantum lego codes can be stabilizer or non-stabilizer. However, both the logical and physical degrees of freedom must have the same local dimension.\n", "name": "Quantum Lego code", "features": {"transversal_gates": "", "decoders": ["Tensor-network decoder when the tensor network is contractible via stabilizer isometries [2009.10329].", "Tensor-network-based decoder when the encoding unitary is known [1312.4578]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": ["Unitary-circuit encoding for a restricted class of tensor networks contractible via isometries [2109.08158]."]}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "quantum_lego"}, "self_correct": {"short_name": "", "logical": null, "introduced": "[quant-ph/0110143,0811.0033]", "description": "Also called a self-correcting quantum memory or thermally stable encoding. A ground-state encoding of an \\(n\\)-body geometrically local Hamiltonian whose logical information is recoverable for arbitrary long times in the \\(n\\to\\infty\\) limit after interaction with a sufficiently cold thermal environment. Typically, one also requires a decoder whose decoding time scales polynomially with \\(n\\).\n\nThe effect of a Markovian thermal environment consists of a Lindbladian in Davies form admitting a Gibbs steady state at some temperature \\(T\\) [1411.6643]. An initial codeword \\(\\rho(0)\\) is evolved under the code Hamiltonian and the Davies Lindbladian to the state \\(\\rho(t)\\) at time \\(t\\), after which it is decoded via decoding map \\(\\cal{D}\\). The memory time \\(\\tau\\) is defined to be\n\\begin{align}\n  \\tau=\\sup\\left\\{ t>0\\,|\\left\\Vert {\\cal D}(\\rho(t))-\\rho(0)\\right\\Vert _{1}<\\epsilon\\right\\}\n\\end{align}\nfor some fixed \\(\\epsilon\\). For a self-correcting memory, there exists a critical temperature \\(T_\\star>0\\) such that \\(\\tau\\to\\infty\\) (typically, exponentially with \\(n\\)) as \\(n\\to\\infty\\) for any temperature \\(T<T_{\\star}\\) and any codeword \\(\\rho(0)\\). A memory is partially self-correcting if \\(\\tau\\) scales polynomially with \\(n\\) up to some cutoff \\(n_{max}\\). A self-correcting memory is typically associated with a (stable) phase of quantum matter.\n", "name": "Self-correcting quantum code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "Self-correcting classical memories exist in two and higher dimensions, with the canonical example being the classical Ising model. In that model, a classical bit is stored in the overall magnetization. The magnetization is thermally stable due to the fact that there is an \\(n\\)-dependent (i.e., macroscopic) energy cost of flipping a contiguous region of physical bits [10.1017/S0305004100019174,1411.6643]. This cost scales with the surface area of the region, and the surface area is \\(n\\)-dependent for dimensions greater than one.\n\nSelf-correcting quantum memories currently exist in four and higher dimensions, with their existence in three dimensions being an open question. For similar reasons as the classical Ising model, the four-dimensional toric code is a self-correcting quantum memory due to an order \\(O(n)\\) energy cost of creating a logical error [quant-ph/0110143,0811.0033]. On the other hand, the 2D toric code is not thermally stable because its string-like logical operators anti-commite with stabilizer generators supported only at their ends, and thus have a constant energy cost of creation.\n\nAn \\(n\\)-dependent energy barrier to all logical errors is likely necessary for a thermally stable memory, having been shown as such for a large class of 2D topological phases [1412.2858,1601.01324,2107.01628]. Two-dimensional stabilizer codes [0810.1983] and encodings of frustration-free code Hamiltonians [1209.5750] admit only constant-energy excitations, and so do not have admit such a barrier. No-go theorems for 3D models are much more restrictive, and there exist several candidates for self-correction as well as several partially self-correcting memories (see cousins below).\n", "physical": null, "notes": [], "realizations": [], "code_id": "self_correct"}, "distance_balanced": {"short_name": "", "name": "Distance-balanced code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "distance_balanced", "logical": "qubits", "introduced": "[1611.03790,2004.07935]", "description": "CSS stabilizer code constructed from a CSS code and a classical code using a distance-balancing procedure based on a generalized homological product. The initial code is said to be unbalanced, i.e., tailored to noise biased toward either bit- or phase-flip errors, and the procedure can result in a code that is treats both types of errors on a more equal footing. The original distance-balancing procedure [1611.03790], later generalized in Ref. [2004.07935], can yield QLDPC codes; see Thm. 1 in Ref. [1611.03790].", "notes": []}, "ramanujan_tensor_product": {"short_name": "", "name": "Ramanujan-complex product code", "protection": "Without distance balancing, a Ramanujan code can have \\(d_X =\\Omega(\\log n)\\) and \\(d_Z = \\Omega (n)\\). For 2D Ramanujan complexes, distance-balanced codes protect against errors with minimum distance \\(d = \\Omega(\\sqrt{n \\log n}\\). For 3D Ramanujan complexes, distance-balanced codes protect against errors with minimum distance \\(d= \\Omega(n^{1/2}\\log n )\\).", "features": {"transversal_gates": "", "decoders": ["For 2D simplicial complexes, cycle code decoder admitting a polynomial-time decoding algorithm can be used [2004.07935]."], "rate": "For 2D Ramanujan complexes, the rate is \\(\\Omega(\\sqrt{ \\frac{1}{n \\log n} })\\), with minimum distance \\(d = \\Omega(\\sqrt{n \\log n}) \\). For 3D, the rate is \\( \\Omega(\\frac{1}{\\sqrt{n}\\log n}) \\) with minimum distance \\(d \\geq \\sqrt{n} \\log n \\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "ramanujan_tensor_product", "logical": "qubits", "introduced": "[2004.07935]", "description": "CSS code constructed from a Ramanujan quantum code and an asymptotically good classical LDPC code using distance balancing. Ramanujan quantum codes are defined using Ramanujan complexes which are simplicial complexes that generalise Ramanujan graphs. Combining the quantum code obtained from a Ramanujan complex and a good classical LDPC code, which can be thought of as coming from a 1-dimensional chain complex, yields a new quantum code that is defined on a 2-dimensional chain complex. This 2-dimensional chain complex is obtained by the co-complex of the product of the 2 co-complexes. The length, dimension and distance of the new quantum code depend on the input codes.", "notes": ["Codes were first to break a 20-year record set by the Freedman-Meyer-Luo code<code:freedman_meyer_luo> for the lower bound on scaling of the minimum distance [2103.06309]."]}, "fiber_bundle": {"short_name": "", "name": "Fiber-bundle code", "protection": "", "features": {"transversal_gates": "", "decoders": ["Greedy algorithm can be used to efficiently decode \\(X\\) errors, but no known efficient decoding of \\(Z\\) errors yet [2009.03921]."], "rate": "Rate \\(k/n = \\Omega(n^{-2/5}/\\text{polylog}(n))\\), distance \\(d=\\Omega(n^{3/5}/\\text{polylog}(n))\\). This is the first QLDPC code to achieve a distance scaling better than \\(\\sqrt{n}~\\text{polylog}(n)\\).", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "fiber_bundle", "logical": "qubits", "introduced": "[2009.03921]", "description": "CSS code constructed by combining a random LDPC code as the base and a cyclic repetition code as the fiber of a fiber bundle. After applying distance balancing, a QLDPC code with distance \\(\\Omega(n^{3/5}\\text{polylog}(n))\\) and rate \\(\\Omega(n^{-2/5}\\text{polylog}(n))\\) is obtained.", "notes": []}, "quantum_tanner": {"short_name": "", "name": "Quantum Tanner code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "Good QLDPC codes.", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": ["Used to obtain explicit lower bounds in the sum-of-squares game [2204.11469]."], "code_id": "quantum_tanner", "logical": "qubits", "introduced": "[2202.13641]", "description": "Stub.", "notes": ["For details, see talk by A. Leverrier <https://www.youtube.com/watch?v=5GO3BtJuo3I>."]}, "translationally_invariant_stabilizer": {"short_name": "", "logical": null, "introduced": "[1101.1962,1204.1063,10.7907/GCYW-ZE58]", "description": "A geometrically local qubit or qudit stabilizer code with qudits organized on a lattice modeled by the additive group \\(\\mathbb{Z}^D\\) for spatial dimension \\(D\\) such that each lattice point, referred to as a site,\ncontains \\(m\\) qudits of dimension \\(q\\). The stabilizer group of the translationally invariant code is generated by site-local Pauli operators and their translations.\n\nA single-qudit Pauli operator can be specified by the lattice coordinate of the site and the symplectic vector\nrepresentation of the Pauli operator within the site. In an extension of the sympletic representation, each lattice coordinate can be represented by a Laurent monomial of \\(D\\) formal variables. For example, when \\(D=2\\) and \\(m=1\\), the product of an \\(X\\) acting on the qubit at lattice coordinate \\((-1,2)\\) and a \\(Z\\) acting on the qubit at \\((1,0)\\) can be represented by the vector \\( (x^{-1} y^2 | x) \\). The multiplicative group of finitely supported Pauli operators modulo phase factors on the lattice of dimension \\(D\\) with \\(m\\) prime-dimensional qubits per site is isomorphic to the additive group of Laurent polynomial column vectors of length \\(2m\\) in \\(D\\) formal variables (see Ref. [1607.01387] and Sec. IV of Ref. [1812.01625]).\n\nTranslationally-invariant prime-qudit (\\(q=p\\)) stabilizer codes have been classified in dimensions \\(D\\in\\{1,2\\}\\), up to equivalence under local constant-depth Clifford circuits. Any 1D (2D) code can be converted to several copies of the 1D repetition code (prime-qudit 2D surface code) along with some trivial codes [1607.01387] ([1812.11193]). Three-dimensional qubit codes can be characterized by four\ncoarse classes [1908.08049]:\n\n1. Abelian topological phase: Excitations are mobile in all 3 dimensions, as is typical in a topological code. Such codes are conjectured to be equivalent to a \\(\\mathbb{Z}_2\\) gauge theory, i.e., multiple copies of the 3D surface code or its variant where the charge excitation is a fermion.\n\n2. Foliated type-I fracton phase: Excitations are mobile in less than 3 dimensions, but codes can be grown by foliation, i.e., stacking copies of the 2D surface code.\n\n3. Fractal type-I fracton phase: Excitations are mobile in less than 3 dimensions, and codes are not foliated.\n\n4. Type-II fracton phase: Excitations are not mobile in any dimension and there are no string operators.\n", "name": "Translationally-invariant stabilizer code", "features": {"transversal_gates": "", "decoders": ["Clustering decoder [10.7907/AHMQ-EG82,1112.3252]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "translationally_invariant_stabilizer"}, "qldpc": {"short_name": "QLDPC", "name": "Quantum low-density parity-check (QLDPC) code", "protection": "Detects errors on \\(d-1\\) sites, corrects errors on \\(\\left\\lfloor (d-1)/2 \\right\\rfloor\\) sites. Asymptotic scaling of \\(k\\) and \\(d\\) with \\(n\\) is often of interest, and this depends heavily on the code construction.   Geometrically local qubit codes are limited by the BPT bound [0810.1983], which states that \\(d=O(n^{1-1/D})\\) for \\(D\\)-dimensional lattice geometries. For general graphs, distance is limited by graphs' connectivity, and a constant relative minimum distance can be achieved only for graphs that contain expanders [2106.00765]. Conversely, a code with parameters \\(k\\) and \\(d\\) requires a graph with \\(\\Omega(d)\\) edges of length \\(\\Omega(d/n^{1/D})\\) [2109.10982].\n\nCode distance may not be a reliable marker of code performance. QLDPC codes with generator weights bounded by some constant can correct many stochastic errors far beyond the distance, which may not scale as favorably. Together with more accurate, faster, and easier-to-parallelize measurements than those of general stabilizer codes, this property makes QLDPC codes interesting in practice.\n", "features": {"transversal_gates": "", "decoders": ["Non-binary decoding algorithm for CSS-type QLDPC codes [10.1109/ACCESS.2015.2503267].", "BP-OSD decoder adds a post-processing step based on ordered statistics decoding (OSD) to the belief propogation (BP) decoder [1904.02703].", "Soft-syndrome iterative belief propagation for CSS-type QLDPC codes, utilizing the entire continuous signal obtained in the physical implementation of the stabilizer measurement (as opposed to discretizing the signal into a syndrome bit) [2205.02341].", "Message-passing decoder utilizing stabilizer inactivation (MP-SI) for CSS-type QLDPC qubit codes [2205.06125]."], "rate": "A family of QLDPC codes \\([[n_i,k_i,d_i]]\\) is asymptotically good if the asymptotic rate \\(\\lim_{i\\to\\infty} k_i/n_i\\) and asymptotic distance \\(\\lim_{i\\to\\infty} d_i/n_i\\) are both positive. The first examples of good qubit codes are a family of lifted-product codes<code:lifted_product>.", "code_capacity_threshold": ["For correlated Pauli noise, bounds on code capacity thresholds for families of QLDPC codes can be obtained by mapping the effect of noise on the code to a statistical mechanical model [quant-ph/0110143,1208.2317,1311.7688].", "Bounds on code capacity thresholds for various noise models exist in terms of stabilizer generator weights [1412.6172]."], "fault_tolerance": ["Lattice surgery techniques with ancilla qubits [2110.10794].", "Fault-tolerance with constant overhead can be performed on certain QLDPC codes [1310.2984], e.g., quantum expander codes [1808.03821]."], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["QLDPC codes with a constant encoding rate can reduce the overhead of fault-tolerant quantum computation to be constant [1310.2984]."], "encoders": []}, "physical": null, "realizations": [], "code_id": "qldpc", "logical": null, "introduced": "[quant-ph/0304161]", "description": "Family of \\([[n,k,d]]\\) stabilizer codes for which the number of sites (either qubit or qudit) participating in each stabilizer generator and the number of stabilizer generators that each site participates in are both bounded by a constant as \\(n\\to\\infty\\). A geometrically local stabilizer code is a QLDPC code where the sites involved in any syndrome bit are contained in a fixed volume that does not scale with \\(n\\).\n\nStrictly speaking, the term parity check describes only bitwise qubit error syndromes. Nevertheless, qudit stabilizer codes satisfying the above criteria are also called QLDPC codes.\n", "notes": ["Links to code tables of notable QLDPC codes [2103.06309].", "Reviews of QLDPC codes provided in Refs. [10.1109/ACCESS.2015.2503267,2103.06309]."]}, "quantum_expander": {"short_name": "", "name": "Quantum expander code", "protection": "Pauli errors of weight \\(\\leq t\\), distance scales as \\(\\Omega(n^{1/2})\\).", "features": {"transversal_gates": "", "decoders": ["Ref. [10.1109/FOCS.2015.55] details a linear time decoder, which corrects \\(\\Omega(n^{1/2})\\) adversarial errors."], "rate": "\\([[n,k=\\Theta(n),d=O(\\sqrt{n})]]\\) code with asymptotically constant rate.", "code_capacity_threshold": [], "fault_tolerance": ["Fault-tolerance with constant overhead can be achieved [1808.03821]."], "general_gates": [], "magic_scaling_exponent": "", "threshold": ["Current estimate of \\(2.7 \\cdot 10^{-16}\\) in locally stochastic noise model [1711.08351]."], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "quantum_expander", "logical": "qubits", "introduced": "[1504.00822]", "description": "CSS codes constructed from a hypergraph product of bipartite expander graphs with bounded left and right vertex degrees. For every bipartite graph there is an associated matrix (the parity check matrix) with columns indexed by the left vertices, rows indexed by the right vertices, and 1 entries whenever a left and right vertex are connected. This matrix can serve as the parity check matrix of a classical code. Two bipartite expander graphs can be used to construct a quantum CSS code (the quantum expander code) by using the parity check matrix of one as \\(X\\) checks, and the parity check matrix of the other as \\(Z\\) checks.", "notes": []}, "expander_lifted_product": {"short_name": "", "name": "Expander lifted-product code", "protection": "Code performance strongly depends on \\(G\\). Certain nonabelian groups yield asymptotically good QLDPC codes with parameters \\([[n, k = \\Theta(n), d = \\Theta(n)]]\\) [2111.03654]. Abelian groups like \\(\\mathbb{Z}_{\\ell}\\) for \\(\\ell=\\Theta(n / \\log n)\\) yield constant-rate codes with parameters \\([[n, k = \\Theta(n), d = \\Theta(n / \\log n)]]\\) [2012.04068]; this construction can be derandomized by being reformulated as a balanced product code [2012.09271].", "features": {"transversal_gates": "", "decoders": [], "rate": "Expander lifted-product codes include the first examples [2111.03654] of (asymptotically) good QLDPC codes, i.e., codes with asymptotically constant rate and linear distance. The existence of such codes proves the QLDPC conjecture [2103.06309]. Another notable family encodes \\(k \\in \\Theta(n^\\alpha \\log n)\\) logical qubits with distance \\(d \\in \\Omega(n^{1 - \\alpha} / \\log n)\\) for any number of physical qubits \\(n\\) and any real parameter \\(0 \\leq \\alpha < 1\\) [2012.04068].", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "expander_lifted_product", "logical": "galois", "introduced": "[2111.03654]", "description": "Family of \\(G\\)-lifted product codes constructed using two random classical Tanner codes<code:tanner> defined on expander graphs. For certain parameters, this construction yields the first asymptotically good QLDPC codes [2111.03654].\n\nAn expander lifted-product code family is constructed as follows. First, take the Cayley graph of a finite group \\(G\\). Second, take the double cover of the graph, resulting in a graph that satisfies the requirements of participating in a \\(G\\)-lifted product (i.e., the resulting graph is a free \\({\\mathbb{F}}_q G\\)-module). Third, create a Tanner code<code:tanner> out of the graph, in which parity-check supports are defined by the graph, and bitstrings satisfying a particular parity check are defined to be the codewords of a small classical code (chosen to be a random code in the construction). Fourth, take the \\(G\\)-lifted product of two copies of the Tanner code<code:tanner>.\n\nThe small classical codes used in the construction of good QLDPC codes are required to have a certain product-expansion property (Lemma 10 in Ref. [2111.03654]); it is proven that random codes satisfy said property in the thermodynamic limit.\n", "notes": ["Construction outlined in talk by R. O'Donnell <https://www.youtube.com/watch?v=k7LuOiOBYyQ>.", "Popular summary in Quanta Magazine <https://www.quantamagazine.org/qubits-can-be-as-safe-as-bits-researchers-show-20220106>."]}, "homological_product": {"short_name": "", "name": "Homological product code", "protection": "Given two codes \\([[n_a, k_a, d_a, w_a]]\\) for \\(a\\in\\{1,2\\}\\), where \\(w_a\\) denotes the maximum hamming weight of all rows and columns of \\(\\partial_a\\), the homological product code has parameter \\([[n=n_1 n_2, k=k_1 k_2, d\\leq d_1 d_2, w\\leq w_1+w_2]]\\). From this formula, and the fact that a randomly selected boundary operator \\(\\partial\\) yields a CSS code that is good with high probability, we see that the product code has \\(k=\\Theta(n)\\) and \\(w=O(\\sqrt{n})\\) with high probability. The main result in [1311.0885] is to show that the product code actually has linear distance with high probability as well. To sum up, it is shown that we have a family of \\([[n,k=c_1 n, d=c_2 n, w=c_3 \\sqrt{n}]]\\) codes given small enough \\(c_1,c_2,c_3\\).", "features": {"transversal_gates": "", "decoders": ["Union-find [2009.14226]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": ["Universal set of gates can be obtained by fault-tolerantly mapping between different encoded representations of a given logical state [1807.09783]."], "general_gates": ["Universal set of gates can be obtained by fault-tolerantly mapping between different encoded representations of a given logical state [1807.09783]."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "homological_product", "logical": "qubits", "introduced": "[1301.1363,1311.0885]", "description": "CSS code formulated using the CSS chain-complex<code:css> construction in the homological product construction. Stub.\n", "notes": []}, "generalized_homological_product": {"short_name": "", "logical": null, "introduced": "", "description": "Stabilizer code formulated using the CSS chain-complex<code:css> construction, with chain complexes consisting of products of other chain complexes. The chain-complex construction of codes yields an interpretation of codes in terms of manifolds, thus allowing for the use of various products from topology in constructing codes. The codes participating in the product can be quantum, classical, or mixed. Products can be of more than two codes, in which case the output code need not be of CSS type (e.g., for XYZ-product codes<code:xyz_product>). The simplest product is a tensor product, with more general products imposing equivalence or symmetry relations on the outputs of the tensor product. A product of two codes can be interpreted as a fiber bundle, with one element of the product being the base and the other being the fiber.\n", "name": "Generalized homological product code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": null, "notes": [], "realizations": [], "code_id": "generalized_homological_product"}, "balanced_product": {"short_name": "", "name": "Balanced product code", "protection": "Taking balanced products of two classical LDPC codes which have a symmetry group which grows linearly in their block lengths were known to give QLDPC codes with a linear rate and which were conjectured to have linear distance [2012.09271]. This conjecture was proved in Ref. [2111.03654].", "features": {"transversal_gates": "", "decoders": ["BP-OSD decoder [1904.02703]."], "rate": "A notable family of balanced product codes encode \\(k \\in \\Theta(n^{4/5})\\) logical qubits with distance \\(d \\in \\Omega(n^{3/5})\\) for any number of physical qubits \\(n\\). Additionally, it is known that the code constructed from the balanced product of two good classical LDPC codes over groups of order \\(\\Theta(n)\\) has a constant encoding rate [2012.09271].", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "balanced_product", "logical": "qubits", "introduced": "[2012.09271]", "description": "Family of CSS quantum codes based on products of two classical codes which share common symmetries. The balanced product can be understood as taking the usual tensor/hypergraph product and then factoring out the symmetries factored. This reduces the overall number of physical qubits \\(n\\), while, under certain circumstances, leaving the number of encoded qubits \\(k\\) and the code distance \\(d\\) invariant. This leads to a more favourable encoding rate \\(k/n\\) and normalized distance \\(d/n\\) compared to the tensor/hypergraph product.", "notes": []}, "xyz_product": {"short_name": "", "name": "XYZ product code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "Not much has been proven about the relationship between XYZ-product codes and other codes. The logical dimension depends on properties of the input classical codes, specifically similarity invariants from abstract algebra. It is conjectured that specific instances of XYZ-product codes have a constant encoding rate and a minimum distance of \\(d \\in \\Theta(n^{2/3})\\) [2011.09746].\n", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "xyz_product", "logical": "qubits", "introduced": "[2011.09746]", "description": "A non-CSS QLDPC code constructed from three classical codes. The construction of an XYZ product code is similar to that of a hypergraph product code and related codes. The idea is that rather than taking a product of only two classical codes to produce a CSS code, a third classical code is considered, acting with Pauli-\\(Y\\) operators.\n", "notes": []}, "hypergraph_product": {"short_name": "", "name": "Hypergraph product code", "protection": "The hypergraph product has distance \\(d=O(\\sqrt{n})\\). The number of encoded logical qubits is \\(k=O(k_1k_2)\\) where \\(k_1\\) and \\(k_2\\) are the dimensions of the classical seed codes \\(C_1\\) and \\(C_2\\).", "features": {"transversal_gates": "Hadamard (up to logical SWAP gates) and control-\\(Z\\) on all logical qubits [2204.10812].", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Code deformation techniques yield Clifford gates [1909.07424]."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "qubits", "realizations": [], "code_id": "hypergraph_product", "logical": "qubits", "introduced": "[0903.0566,1202.0928]", "description": "A family of \\([[n,k,d]]\\) CSS codes whose construction is based on two binary linear seed codes \\(C_1\\) and \\(C_2\\).", "notes": []}, "lifted_product": {"short_name": "", "name": "Lifted-product (LP) code", "protection": "Code performance strongly depends on the group \\(G\\) used in the product [2012.04068].", "features": {"transversal_gates": "", "decoders": [], "rate": "There is no known simple way to compute the logical dimension \\(k\\) in the general case [2012.04068].", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "galois", "realizations": [], "code_id": "lifted_product", "logical": "galois", "introduced": "[1904.02703,2111.03654]", "description": "Code that utilizes the notion of a lifted product in its construction. Lifted products of certain classical Tanner codes are the first (asymptotically) good QLDPC codes.\n\nA lifted product over a ring \\(R\\) is a product of two chain complexes whose chains are free modules over \\(R\\). An interesting case is when \\(R=\\mathbb{F}_q G\\), the group-\\(G\\) algebra over the finite field \\({\\mathbb{F}}_q = GF(q)\\); in this case, the product can be called a \\(G\\)-lifted product. Just like its further generalization the balanced product, a lifted product code generalizes a hypergraph product code in that a reduction of symmetry is exploited to decrease the number of physical qubits required.\n\nThe key operation behind the \\(G\\)-lifted product is the \\(G\\)-lift. A \\(G\\)-lift of a \\(\\mathbb{F}_q\\)-valued matrix \\(A\\) substitutes matrix elements of \\(A\\) with matrices forming the regular representation of the group algebra \\({\\mathbb{F}}_q G\\) according to some rule. A combination of the lift and the usual hypergraph product yields lifted-product codes. The two operations commute: one can first take the usual hypergraph product of two chain complexes, and then lift the resulting product complex; equivalently, one can take the hypergraph product of the two lifted complexes.\n", "notes": ["Formerly known as generalized hypergraph product codes [1904.02703], and later renamed to lifted-product codes [2012.04068,10.1103/PRXQuantum.2.040101]."]}, "spins_into_spins": {"short_name": "", "logical": "spins", "introduced": "", "description": "Encodes \\(K\\)-dimensional Hilbert space into a \\(q^n\\)-dimensional (\\(n\\)-qudit) Hilbert space, where the canonical qudit basis consists of states of a quantum mechanical spin. In other words, canonical single-qudit states \\(|^\\ell_m\\rangle\\) are labeled by total angular momentum \\(\\ell\\) (either integer or half-integer) and its \\(z\\)-axis projection \\(m\\), with \\(q=2\\ell+1\\).\n\nIn contrast to other qudit codes, spin codes are closely associated with the angular momentum Lie algebra and/or the Lie groups \\(SU(2)\\) or \\(SO(3)\\).\n", "name": "Spin code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "spins", "notes": [], "realizations": [], "code_id": "spins_into_spins"}, "fermions": {"short_name": "", "name": "Fermionic code", "protection": "", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "fermions", "realizations": [], "code_id": "fermions", "logical": "fermions", "introduced": "", "description": "Finite-dimensional quantum error-correcting code encoding a logical Hilbert space into a physical Fock space of fermionic modes. Codes are typically described using Majorana operators, which are linear combinations of fermionic creation and annihilation operators [quant-ph/0003137].", "notes": []}, "majorana_stab": {"short_name": "", "name": "Majorana stabilizer code", "protection": "Detects products of Majorana operators with weight up to \\(d-1\\). Physically, protects against dephasing errors caused by coupling of fermion density to the environment and bit-flip errors caused by quasiparticle poisoning processes.", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "fermions", "realizations": [], "code_id": "majorana_stab", "logical": "fermions", "introduced": "[1004.3791]", "description": "Majorana fermion stabilizer codes are stabilizer codes whose stabilizers are products of an even number of Majorana fermion operators, analogous to Pauli strings for a traditional stabilizer code and referred to as Majorana stabilizers. The codespace is the mutual \\(+1\\) eigenspace of all Majorana stabilizers. In such systems, Majorana fermions may either be considered individually or paired into creation and annihilation operators for fermionic modes. Codes can be denoted as \\([[n,k,d]]_{f}\\) [1703.00459], where \\(n\\) is the number of fermionic modes.", "notes": []}, "string_net": {"short_name": "", "name": "String-net code", "protection": "Error-correcting properties established in Ref. [2004.11982].", "features": {"transversal_gates": "", "decoders": ["Syndrome measurement circuits analyzed in Ref. [1206.6048]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Gates can be implemented through topological operations corresponding to elements of the mapping class group, which is generated by Dehn-twists along non-contractible cycles for triangulations of toroidal [1806.02358,1806.06078] and hyperbolic [1901.11029] manifolds. Whether or not a gate set is universal depends on the choice of input category; in some cases such as the Ising category, gates can be complemented by topological charge measurements to obtain a universal gate set.", "Alternatively, one could encode the logical quantum information into the degenerate fusion space of a number of computational anyons. In this case, a universal logical gate set can be implemented through the braiding of the computational anyons [quant-ph/0001108,math/0103200,1002.2816], e.g., for the case of the Fibonacci<code:fibonacci> input category."], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "physical": "categories", "realizations": [], "code_id": "string_net", "logical": "categories", "introduced": "[cond-mat/0404617,1002.2816]", "description": "Also called a Turaev-Viro or Levin-Wen model code. A family of topological codes, defined by a finite unitary spherical category \\( \\mathcal{C} \\),  whose generators are few-body operators acting on a cell decomposition dual to a triangulation of a two-dimensional surface (with a qudit of dimension \\( |\\mathcal{C}| \\) located at each edge of the decomposition).\n\nThe codespace is the ground-state subspace of the Levin-Wen model Hamiltonian [cond-mat/0404617], a many-body Hamiltonian realizing the 3-manifold Turaev-Viro invariant [1002.2816,1106.6033]. Alternative constructions are possible, encoding information in the fusion space of the low-energy anyonic quasiparticle excitations of the model [quant-ph/0001108,1002.2816]. The fusion space can have dimension greater than one, allowing for topological quantum computation of logical information stored in the fusion outcomes.\n", "notes": []}, "fibonacci": {"short_name": "", "name": "Fibonacci string-net code", "protection": "When defined on a \\(L \\times L\\) tailed honeycomb lattice on a torus, the code distance for ground-state encoding is \\(L\\).", "features": {"transversal_gates": "A universal transversal gate set could be implemented in a folded version of this code using the techniques introduced in Ref.[1711.05752].", "decoders": ["Clustering decoder (provides best known threshold for this code) [2012.04610].", "Fusion aware iterative minimum-weight perfect matching decoder. Note that ordinary MWPM decoders do not produce a threshold with this code [2012.04610]."], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": ["Universal gate set for the ground-state encoding is implemented through topological operations corresponding to elements of the mapping class group, which is generated by Dehn-twists along non-contractible cycles. These Dehn-twists can be implemented using constant-dept circuits when allowing long-range permutations of qubits [1806.02358,1806.06078].", "Universal gate set for the fusion-space encoding is implemented through braiding of the computational anyons [quant-ph/0001108,1002.2816]."], "magic_scaling_exponent": "", "threshold": ["\\(4.7\\%\\) for depolarizing noise, \\(7.3\\%\\) for dephasing noise, and \\(3.8\\%\\) for bit-flip noise with clustering decoder, assuming perfect measurements and gates [2012.04610].", "\\(3.0\\%\\) for depolarizing noise, \\(6.0\\%\\) for dephasing noise, and \\(2.5\\%\\) for bit-flip noise with fusion-aware iterative MWPM decoder, assuming perfect measurements and gates [2012.04610]."], "encoders": []}, "physical": "categories", "realizations": [], "code_id": "fibonacci", "logical": "categories", "introduced": "[cond-mat/0404617]", "description": "Quantum error correcting code associated with the Levin-Wen string-net model with the Fibonacci input category, admitting two types of encodings.\n\nThe first type of encoding is into the ground-state subspace of the Levin-Wen model Hamiltonian, defined on a cell decomposition (dual to a triangulation) of a manifold with a qubit on each link. The code space is the simultaneous \\(+1\\) eigenspace of a set of vertex operators and plaquette operators, which are defined by the fusion rules and the numerical data of the Fibonacci category, respectively. The degeneracy of the code space is \\(4g\\),\nwere \\(g\\) is the genus of the surface on which the cell decomposition is defined.\n\nThe second type of encoding is into the degenerate fusion space of a number of anyonic quasiparticle excitations of the Levin-Wen model.\n", "notes": []}, "category_quantum": {"short_name": "", "logical": "categories", "introduced": "", "description": "Encodes a finite-dimensional logical Hilbert space into a physical Hilbert space associated with a category. Often associated with a particular topological quantum field theory (TQFT), as the data of such theories is described by a category.", "name": "Category-based quantum code", "features": {"transversal_gates": "", "decoders": [], "rate": "", "code_capacity_threshold": [], "fault_tolerance": [], "general_gates": [], "magic_scaling_exponent": "", "threshold": [], "encoders": []}, "protection": "", "physical": "categories", "notes": [], "realizations": [], "code_id": "category_quantum"}}